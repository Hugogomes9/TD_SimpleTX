
C:\Users\Safadinho\Documents\TD\TD_SimpleTX\Debug\TX_Simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800204c  0800204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08002054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e4  20000028  0800207c  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000010c  0800207c  0002010c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   000063f6  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014cb  00000000  00000000  00026447  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009c0  00000000  00000000  00027918  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  000282d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003350  00000000  00000000  00028b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029c3  00000000  00000000  0002bee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e8ab  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000025fc  00000000  00000000  0002e92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f80 	.word	0x08001f80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08001f80 	.word	0x08001f80

0800014c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000154:	4a03      	ldr	r2, [pc, #12]	; (8000164 <EXTI_ClearITPendingBit+0x18>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6153      	str	r3, [r2, #20]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40010400 	.word	0x40010400

08000168 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000170:	2300      	movs	r3, #0
 8000172:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000174:	4b09      	ldr	r3, [pc, #36]	; (800019c <FLASH_SetLatency+0x34>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000180:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4313      	orrs	r3, r2
 8000188:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 800018a:	4a04      	ldr	r2, [pc, #16]	; (800019c <FLASH_SetLatency+0x34>)
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	40022000 	.word	0x40022000

080001a0 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80001a8:	4a08      	ldr	r2, [pc, #32]	; (80001cc <FLASH_PrefetchBufferCmd+0x2c>)
 80001aa:	4b08      	ldr	r3, [pc, #32]	; (80001cc <FLASH_PrefetchBufferCmd+0x2c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f023 0310 	bic.w	r3, r3, #16
 80001b2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80001b4:	4905      	ldr	r1, [pc, #20]	; (80001cc <FLASH_PrefetchBufferCmd+0x2c>)
 80001b6:	4b05      	ldr	r3, [pc, #20]	; (80001cc <FLASH_PrefetchBufferCmd+0x2c>)
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4313      	orrs	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
}
 80001c0:	bf00      	nop
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	40022000 	.word	0x40022000

080001d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b089      	sub	sp, #36	; 0x24
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	61fb      	str	r3, [r7, #28]
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	78db      	ldrb	r3, [r3, #3]
 80001f6:	f003 030f 	and.w	r3, r3, #15
 80001fa:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	78db      	ldrb	r3, [r3, #3]
 8000200:	f003 0310 	and.w	r3, r3, #16
 8000204:	2b00      	cmp	r3, #0
 8000206:	d005      	beq.n	8000214 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	789b      	ldrb	r3, [r3, #2]
 800020c:	461a      	mov	r2, r3
 800020e:	69fb      	ldr	r3, [r7, #28]
 8000210:	4313      	orrs	r3, r2
 8000212:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d044      	beq.n	80002a8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000224:	2300      	movs	r3, #0
 8000226:	61bb      	str	r3, [r7, #24]
 8000228:	e038      	b.n	800029c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800022a:	2201      	movs	r2, #1
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	4013      	ands	r3, r2
 800023e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000240:	693a      	ldr	r2, [r7, #16]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d126      	bne.n	8000296 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800024e:	220f      	movs	r2, #15
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	fa02 f303 	lsl.w	r3, r2, r3
 8000256:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	43db      	mvns	r3, r3
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	4013      	ands	r3, r2
 8000260:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000262:	69fa      	ldr	r2, [r7, #28]
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	fa02 f303 	lsl.w	r3, r2, r3
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	4313      	orrs	r3, r2
 800026e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	78db      	ldrb	r3, [r3, #3]
 8000274:	2b28      	cmp	r3, #40	; 0x28
 8000276:	d105      	bne.n	8000284 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000278:	2201      	movs	r2, #1
 800027a:	69bb      	ldr	r3, [r7, #24]
 800027c:	409a      	lsls	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	615a      	str	r2, [r3, #20]
 8000282:	e008      	b.n	8000296 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	78db      	ldrb	r3, [r3, #3]
 8000288:	2b48      	cmp	r3, #72	; 0x48
 800028a:	d104      	bne.n	8000296 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800028c:	2201      	movs	r2, #1
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	409a      	lsls	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000296:	69bb      	ldr	r3, [r7, #24]
 8000298:	3301      	adds	r3, #1
 800029a:	61bb      	str	r3, [r7, #24]
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	2b07      	cmp	r3, #7
 80002a0:	d9c3      	bls.n	800022a <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	2bff      	cmp	r3, #255	; 0xff
 80002ae:	d946      	bls.n	800033e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
 80002ba:	e03a      	b.n	8000332 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	3308      	adds	r3, #8
 80002c0:	2201      	movs	r2, #1
 80002c2:	fa02 f303 	lsl.w	r3, r2, r3
 80002c6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4013      	ands	r3, r2
 80002d2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80002d4:	693a      	ldr	r2, [r7, #16]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d127      	bne.n	800032c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80002e2:	220f      	movs	r2, #15
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ea:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	43db      	mvns	r3, r3
 80002f0:	697a      	ldr	r2, [r7, #20]
 80002f2:	4013      	ands	r3, r2
 80002f4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002f6:	69fa      	ldr	r2, [r7, #28]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	697a      	ldr	r2, [r7, #20]
 8000300:	4313      	orrs	r3, r2
 8000302:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	78db      	ldrb	r3, [r3, #3]
 8000308:	2b28      	cmp	r3, #40	; 0x28
 800030a:	d105      	bne.n	8000318 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800030c:	69bb      	ldr	r3, [r7, #24]
 800030e:	3308      	adds	r3, #8
 8000310:	2201      	movs	r2, #1
 8000312:	409a      	lsls	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	78db      	ldrb	r3, [r3, #3]
 800031c:	2b48      	cmp	r3, #72	; 0x48
 800031e:	d105      	bne.n	800032c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	3308      	adds	r3, #8
 8000324:	2201      	movs	r2, #1
 8000326:	409a      	lsls	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800032c:	69bb      	ldr	r3, [r7, #24]
 800032e:	3301      	adds	r3, #1
 8000330:	61bb      	str	r3, [r7, #24]
 8000332:	69bb      	ldr	r3, [r7, #24]
 8000334:	2b07      	cmp	r3, #7
 8000336:	d9c1      	bls.n	80002bc <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	697a      	ldr	r2, [r7, #20]
 800033c:	605a      	str	r2, [r3, #4]
  }
}
 800033e:	bf00      	nop
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	460b      	mov	r3, r1
 8000352:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000354:	2300      	movs	r3, #0
 8000356:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	4013      	ands	r3, r2
 8000360:	2b00      	cmp	r3, #0
 8000362:	d002      	beq.n	800036a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000364:	2301      	movs	r3, #1
 8000366:	73fb      	strb	r3, [r7, #15]
 8000368:	e001      	b.n	800036e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800036e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000388:	887a      	ldrh	r2, [r7, #2]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	611a      	str	r2, [r3, #16]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80003a4:	887a      	ldrh	r2, [r7, #2]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	615a      	str	r2, [r3, #20]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	da03      	bge.n	80003de <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80003d6:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <GPIO_PinRemapConfig+0xdc>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e002      	b.n	80003e4 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80003de:	4b2c      	ldr	r3, [pc, #176]	; (8000490 <GPIO_PinRemapConfig+0xdc>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	0c1b      	lsrs	r3, r3, #16
 80003e8:	f003 030f 	and.w	r3, r3, #15
 80003ec:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80003fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80003fe:	d10a      	bne.n	8000416 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000406:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000408:	4a21      	ldr	r2, [pc, #132]	; (8000490 <GPIO_PinRemapConfig+0xdc>)
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <GPIO_PinRemapConfig+0xdc>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000412:	6053      	str	r3, [r2, #4]
 8000414:	e021      	b.n	800045a <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00e      	beq.n	800043e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000420:	2203      	movs	r2, #3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	43db      	mvns	r3, r3
 800042e:	697a      	ldr	r2, [r7, #20]
 8000430:	4013      	ands	r3, r2
 8000432:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	e00d      	b.n	800045a <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0d5b      	lsrs	r3, r3, #21
 8000442:	011b      	lsls	r3, r3, #4
 8000444:	693a      	ldr	r2, [r7, #16]
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	4013      	ands	r3, r2
 8000450:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000458:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d008      	beq.n	8000472 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	0d5b      	lsrs	r3, r3, #21
 8000464:	011b      	lsls	r3, r3, #4
 8000466:	693a      	ldr	r2, [r7, #16]
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	4313      	orrs	r3, r2
 8000470:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	da03      	bge.n	8000480 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000478:	4a05      	ldr	r2, [pc, #20]	; (8000490 <GPIO_PinRemapConfig+0xdc>)
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800047e:	e002      	b.n	8000486 <GPIO_PinRemapConfig+0xd2>
  {
    AFIO->MAPR2 = tmpreg;
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <GPIO_PinRemapConfig+0xdc>)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	6053      	str	r3, [r2, #4]
  }  
}
 8000486:	bf00      	nop
 8000488:	371c      	adds	r7, #28
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40010000 	.word	0x40010000

08000494 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000498:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <RCC_DeInit+0x54>)
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <RCC_DeInit+0x54>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004a4:	4910      	ldr	r1, [pc, #64]	; (80004e8 <RCC_DeInit+0x54>)
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <RCC_DeInit+0x54>)
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <RCC_DeInit+0x58>)
 80004ac:	4013      	ands	r3, r2
 80004ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <RCC_DeInit+0x54>)
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <RCC_DeInit+0x54>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c0:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <RCC_DeInit+0x54>)
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <RCC_DeInit+0x54>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <RCC_DeInit+0x54>)
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <RCC_DeInit+0x54>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <RCC_DeInit+0x54>)
 80004da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004de:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	f8ff0000 	.word	0xf8ff0000

080004f0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <RCC_HSEConfig+0x58>)
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <RCC_HSEConfig+0x58>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000502:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <RCC_HSEConfig+0x58>)
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <RCC_HSEConfig+0x58>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000516:	d003      	beq.n	8000520 <RCC_HSEConfig+0x30>
 8000518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800051c:	d007      	beq.n	800052e <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 800051e:	e00d      	b.n	800053c <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <RCC_HSEConfig+0x58>)
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <RCC_HSEConfig+0x58>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052a:	6013      	str	r3, [r2, #0]
      break;
 800052c:	e006      	b.n	800053c <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <RCC_HSEConfig+0x58>)
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <RCC_HSEConfig+0x58>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000538:	6013      	str	r3, [r2, #0]
      break;
 800053a:	bf00      	nop
      
    default:
      break;
  }
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000556:	2300      	movs	r3, #0
 8000558:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800055e:	2031      	movs	r0, #49	; 0x31
 8000560:	f000 fa0c 	bl	800097c <RCC_GetFlagStatus>
 8000564:	4603      	mov	r3, r0
 8000566:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000574:	d002      	beq.n	800057c <RCC_WaitForHSEStartUp+0x30>
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f0      	beq.n	800055e <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800057c:	2031      	movs	r0, #49	; 0x31
 800057e:	f000 f9fd 	bl	800097c <RCC_GetFlagStatus>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000588:	2301      	movs	r3, #1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	e001      	b.n	8000592 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800058e:	2300      	movs	r3, #0
 8000590:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000592:	79fb      	ldrb	r3, [r7, #7]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <RCC_PLLConfig+0x38>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80005b6:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	4313      	orrs	r3, r2
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <RCC_PLLConfig+0x38>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6053      	str	r3, [r2, #4]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000

080005d8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <RCC_PLLCmd+0x1c>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	42420060 	.word	0x42420060

080005f8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <RCC_SYSCLKConfig+0x34>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f023 0303 	bic.w	r3, r3, #3
 8000610:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <RCC_SYSCLKConfig+0x34>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	6053      	str	r3, [r2, #4]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <RCC_GetSYSCLKSource+0x18>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 030c 	and.w	r3, r3, #12
 800063e:	b2db      	uxtb	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <RCC_HCLKConfig+0x34>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000664:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <RCC_HCLKConfig+0x34>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6053      	str	r3, [r2, #4]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <RCC_PCLK1Config+0x34>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800069c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <RCC_PCLK1Config+0x34>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6053      	str	r3, [r2, #4]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <RCC_PCLK2Config+0x34>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80006d4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006e0:	4a03      	ldr	r2, [pc, #12]	; (80006f0 <RCC_PCLK2Config+0x34>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6053      	str	r3, [r2, #4]
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <RCC_ADCCLKConfig+0x34>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4313      	orrs	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <RCC_ADCCLKConfig+0x34>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6053      	str	r3, [r2, #4]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000744:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f003 030c 	and.w	r3, r3, #12
 800074c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	2b04      	cmp	r3, #4
 8000752:	d007      	beq.n	8000764 <RCC_GetClocksFreq+0x38>
 8000754:	2b08      	cmp	r3, #8
 8000756:	d009      	beq.n	800076c <RCC_GetClocksFreq+0x40>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d133      	bne.n	80007c4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a47      	ldr	r2, [pc, #284]	; (800087c <RCC_GetClocksFreq+0x150>)
 8000760:	601a      	str	r2, [r3, #0]
      break;
 8000762:	e033      	b.n	80007cc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a45      	ldr	r2, [pc, #276]	; (800087c <RCC_GetClocksFreq+0x150>)
 8000768:	601a      	str	r2, [r3, #0]
      break;
 800076a:	e02f      	b.n	80007cc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800076c:	4b42      	ldr	r3, [pc, #264]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000774:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000776:	4b40      	ldr	r3, [pc, #256]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800077e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	0c9b      	lsrs	r3, r3, #18
 8000784:	3302      	adds	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4a3b      	ldr	r2, [pc, #236]	; (8000880 <RCC_GetClocksFreq+0x154>)
 8000792:	fb02 f203 	mul.w	r2, r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800079a:	e017      	b.n	80007cc <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d006      	beq.n	80007b6 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	4a35      	ldr	r2, [pc, #212]	; (8000880 <RCC_GetClocksFreq+0x154>)
 80007ac:	fb02 f203 	mul.w	r2, r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007b4:	e00a      	b.n	80007cc <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	4a30      	ldr	r2, [pc, #192]	; (800087c <RCC_GetClocksFreq+0x150>)
 80007ba:	fb02 f203 	mul.w	r2, r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007c2:	e003      	b.n	80007cc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a2d      	ldr	r2, [pc, #180]	; (800087c <RCC_GetClocksFreq+0x150>)
 80007c8:	601a      	str	r2, [r3, #0]
      break;
 80007ca:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007d4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	091b      	lsrs	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80007dc:	4a29      	ldr	r2, [pc, #164]	; (8000884 <RCC_GetClocksFreq+0x158>)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	40da      	lsrs	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007fc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000804:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <RCC_GetClocksFreq+0x158>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	40da      	lsrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000824:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	0adb      	lsrs	r3, r3, #11
 800082a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800082c:	4a15      	ldr	r2, [pc, #84]	; (8000884 <RCC_GetClocksFreq+0x158>)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	4413      	add	r3, r2
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	40da      	lsrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <RCC_GetClocksFreq+0x14c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	0b9b      	lsrs	r3, r3, #14
 8000852:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <RCC_GetClocksFreq+0x15c>)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	fbb2 f2f3 	udiv	r2, r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	611a      	str	r2, [r3, #16]
}
 800086e:	bf00      	nop
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40021000 	.word	0x40021000
 800087c:	007a1200 	.word	0x007a1200
 8000880:	003d0900 	.word	0x003d0900
 8000884:	20000000 	.word	0x20000000
 8000888:	20000010 	.word	0x20000010

0800088c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800089e:	4909      	ldr	r1, [pc, #36]	; (80008c4 <RCC_APB2PeriphClockCmd+0x38>)
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <RCC_APB2PeriphClockCmd+0x38>)
 80008a2:	699a      	ldr	r2, [r3, #24]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008aa:	e006      	b.n	80008ba <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008ac:	4905      	ldr	r1, [pc, #20]	; (80008c4 <RCC_APB2PeriphClockCmd+0x38>)
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <RCC_APB2PeriphClockCmd+0x38>)
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	4013      	ands	r3, r2
 80008b8:	618b      	str	r3, [r1, #24]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008da:	4909      	ldr	r1, [pc, #36]	; (8000900 <RCC_APB1PeriphClockCmd+0x38>)
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <RCC_APB1PeriphClockCmd+0x38>)
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80008e6:	e006      	b.n	80008f6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008e8:	4905      	ldr	r1, [pc, #20]	; (8000900 <RCC_APB1PeriphClockCmd+0x38>)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <RCC_APB1PeriphClockCmd+0x38>)
 80008ec:	69da      	ldr	r2, [r3, #28]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4013      	ands	r3, r2
 80008f4:	61cb      	str	r3, [r1, #28]
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000

08000904 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d006      	beq.n	8000924 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000916:	4909      	ldr	r1, [pc, #36]	; (800093c <RCC_APB2PeriphResetCmd+0x38>)
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <RCC_APB2PeriphResetCmd+0x38>)
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4313      	orrs	r3, r2
 8000920:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000922:	e006      	b.n	8000932 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000924:	4905      	ldr	r1, [pc, #20]	; (800093c <RCC_APB2PeriphResetCmd+0x38>)
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <RCC_APB2PeriphResetCmd+0x38>)
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	43db      	mvns	r3, r3
 800092e:	4013      	ands	r3, r2
 8000930:	60cb      	str	r3, [r1, #12]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000

08000940 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000952:	4909      	ldr	r1, [pc, #36]	; (8000978 <RCC_APB1PeriphResetCmd+0x38>)
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <RCC_APB1PeriphResetCmd+0x38>)
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800095e:	e006      	b.n	800096e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000960:	4905      	ldr	r1, [pc, #20]	; (8000978 <RCC_APB1PeriphResetCmd+0x38>)
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <RCC_APB1PeriphResetCmd+0x38>)
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	43db      	mvns	r3, r3
 800096a:	4013      	ands	r3, r2
 800096c:	610b      	str	r3, [r1, #16]
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000

0800097c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800097c:	b480      	push	{r7}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	b2db      	uxtb	r3, r3
 8000998:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d103      	bne.n	80009a8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <RCC_GetFlagStatus+0x70>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e009      	b.n	80009bc <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d103      	bne.n	80009b6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <RCC_GetFlagStatus+0x70>)
 80009b0:	6a1b      	ldr	r3, [r3, #32]
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e002      	b.n	80009bc <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <RCC_GetFlagStatus+0x70>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	fa22 f303 	lsr.w	r3, r2, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80009d4:	2301      	movs	r3, #1
 80009d6:	74fb      	strb	r3, [r7, #19]
 80009d8:	e001      	b.n	80009de <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80009de:	7cfb      	ldrb	r3, [r7, #19]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <SPI_I2S_DeInit+0x68>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d10a      	bne.n	8000a16 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000a00:	2101      	movs	r1, #1
 8000a02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a06:	f7ff ff7d 	bl	8000904 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a10:	f7ff ff78 	bl	8000904 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000a14:	e01c      	b.n	8000a50 <SPI_I2S_DeInit+0x60>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <SPI_I2S_DeInit+0x6c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10a      	bne.n	8000a34 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000a1e:	2101      	movs	r1, #1
 8000a20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a24:	f7ff ff8c 	bl	8000940 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a2e:	f7ff ff87 	bl	8000940 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000a32:	e00d      	b.n	8000a50 <SPI_I2S_DeInit+0x60>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else
  {
    if (SPIx == SPI3)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <SPI_I2S_DeInit+0x70>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d109      	bne.n	8000a50 <SPI_I2S_DeInit+0x60>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a42:	f7ff ff7d 	bl	8000940 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000a46:	2100      	movs	r1, #0
 8000a48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a4c:	f7ff ff78 	bl	8000940 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	40003800 	.word	0x40003800
 8000a60:	40003c00 	.word	0x40003c00

08000a64 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000a7e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	881a      	ldrh	r2, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	885b      	ldrh	r3, [r3, #2]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	89fa      	ldrh	r2, [r7, #14]
 8000ac6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	8b9b      	ldrh	r3, [r3, #28]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	8a1a      	ldrh	r2, [r3, #16]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	821a      	strh	r2, [r3, #16]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d008      	beq.n	8000b10 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000b0e:	e007      	b.n	8000b20 <SPI_Cmd+0x34>
    SPIx->CR1 |= CR1_SPE_Set;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	801a      	strh	r2, [r3, #0]
  }
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	889b      	ldrh	r3, [r3, #4]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000b4e:	e007      	b.n	8000b60 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 |= CR2_SSOE_Set;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f023 0304 	bic.w	r3, r3, #4
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	809a      	strh	r2, [r3, #4]
  }
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
    uint16 otp_addr = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <dwt_initialise+0x16c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	745a      	strb	r2, [r3, #17]
    pdw1000local->wait4resp = 0;
 8000b86:	4b54      	ldr	r3, [pc, #336]	; (8000cd8 <dwt_initialise+0x16c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	769a      	strb	r2, [r3, #26]
    pdw1000local->sleep_mode = 0;
 8000b8e:	4b52      	ldr	r3, [pc, #328]	; (8000cd8 <dwt_initialise+0x16c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	831a      	strh	r2, [r3, #24]

    pdw1000local->cbTxDone = NULL;
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <dwt_initialise+0x16c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <dwt_initialise+0x16c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <dwt_initialise+0x16c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <dwt_initialise+0x16c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000bb6:	f000 f893 	bl	8000ce0 <dwt_readdevid>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <dwt_initialise+0x170>)
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d002      	beq.n	8000bc8 <dwt_initialise+0x5c>
    {
        return DWT_ERROR ;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e082      	b.n	8000cce <dwt_initialise+0x162>
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
 8000bc8:	f000 fd0c 	bl	80015e4 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 fbd7 	bl	8001380 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2024      	movs	r0, #36	; 0x24
 8000bd8:	f000 fb18 	bl	800120c <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000bdc:	201e      	movs	r0, #30
 8000bde:	f000 fb6d 	bl	80012bc <_dwt_otpread>
 8000be2:	4603      	mov	r3, r0
 8000be4:	82fb      	strh	r3, [r7, #22]
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <dwt_initialise+0x16c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	8afa      	ldrh	r2, [r7, #22]
 8000bec:	0a12      	lsrs	r2, r2, #8
 8000bee:	b292      	uxth	r2, r2
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	725a      	strb	r2, [r3, #9]

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000bf4:	2004      	movs	r0, #4
 8000bf6:	f000 fb61 	bl	80012bc <_dwt_otpread>
 8000bfa:	6138      	str	r0, [r7, #16]
    if((ldo_tune & 0xFF) != 0)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00d      	beq.n	8000c20 <dwt_initialise+0xb4>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
 8000c04:	2202      	movs	r2, #2
 8000c06:	2112      	movs	r1, #18
 8000c08:	202d      	movs	r0, #45	; 0x2d
 8000c0a:	f000 faff 	bl	800120c <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000c0e:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	8b12      	ldrh	r2, [r2, #24]
 8000c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	831a      	strh	r2, [r3, #24]
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	2006      	movs	r0, #6
 8000c26:	f000 fb49 	bl	80012bc <_dwt_otpread>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6023      	str	r3, [r4, #0]
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c30:	681c      	ldr	r4, [r3, #0]
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 fb42 	bl	80012bc <_dwt_otpread>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	6063      	str	r3, [r4, #4]

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	8afa      	ldrh	r2, [r7, #22]
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	f002 021f 	and.w	r2, r2, #31
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	741a      	strb	r2, [r3, #16]
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	7c1b      	ldrb	r3, [r3, #16]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <dwt_initialise+0xf2>
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2210      	movs	r2, #16
 8000c5c:	741a      	strb	r2, [r3, #16]
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	7c1b      	ldrb	r3, [r3, #16]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fce3 	bl	8001630 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <dwt_initialise+0x120>
    {
        _dwt_loaducodefromrom();
 8000c74:	f000 fb70 	bl	8001358 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <dwt_initialise+0x16c>)
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	8b12      	ldrh	r2, [r2, #24]
 8000c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c86:	b292      	uxth	r2, r2
 8000c88:	831a      	strh	r2, [r3, #24]
 8000c8a:	e00f      	b.n	8000cac <dwt_initialise+0x140>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	2036      	movs	r0, #54	; 0x36
 8000c90:	f000 fa8a 	bl	80011a8 <dwt_read16bitoffsetreg>
 8000c94:	4603      	mov	r3, r0
 8000c96:	81fb      	strh	r3, [r7, #14]
        rega &= 0xFDFF ; // Clear LDERUN bit
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c9e:	81fb      	strh	r3, [r7, #14]
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	2036      	movs	r0, #54	; 0x36
 8000ca8:	f000 fac4 	bl	8001234 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fb67 	bl	8001380 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	202c      	movs	r0, #44	; 0x2c
 8000cb8:	f000 faa8 	bl	800120c <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <dwt_initialise+0x16c>)
 8000cbe:	681c      	ldr	r4, [r3, #0]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2004      	movs	r0, #4
 8000cc4:	f000 fa48 	bl	8001158 <dwt_read32bitoffsetreg>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	6163      	str	r3, [r4, #20]

    return DWT_SUCCESS ;
 8000ccc:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000cce:	4618      	mov	r0, r3
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	deca0130 	.word	0xdeca0130

08000ce0 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fa36 	bl	8001158 <dwt_read32bitoffsetreg>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop

08000cf4 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4ba1      	ldr	r3, [pc, #644]	; (8000f98 <dwt_configure+0x2a4>)
 8000d12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d16:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000d20:	7cfb      	ldrb	r3, [r7, #19]
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d002      	beq.n	8000d2c <dwt_configure+0x38>
 8000d26:	7cfb      	ldrb	r3, [r7, #19]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d101      	bne.n	8000d30 <dwt_configure+0x3c>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <dwt_configure+0x3e>
 8000d30:	2300      	movs	r3, #0
 8000d32:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	79db      	ldrb	r3, [r3, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10b      	bne.n	8000d54 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000d3c:	4b97      	ldr	r3, [pc, #604]	; (8000f9c <dwt_configure+0x2a8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a96      	ldr	r2, [pc, #600]	; (8000f9c <dwt_configure+0x2a8>)
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	6952      	ldr	r2, [r2, #20]
 8000d46:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d4a:	615a      	str	r2, [r3, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000d4c:	8abb      	ldrh	r3, [r7, #20]
 8000d4e:	08db      	lsrs	r3, r3, #3
 8000d50:	82bb      	strh	r3, [r7, #20]
 8000d52:	e007      	b.n	8000d64 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000d54:	4b91      	ldr	r3, [pc, #580]	; (8000f9c <dwt_configure+0x2a8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a90      	ldr	r2, [pc, #576]	; (8000f9c <dwt_configure+0x2a8>)
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	6952      	ldr	r2, [r2, #20]
 8000d5e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000d62:	615a      	str	r2, [r3, #20]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000d64:	4b8d      	ldr	r3, [pc, #564]	; (8000f9c <dwt_configure+0x2a8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	7a12      	ldrb	r2, [r2, #8]
 8000d6c:	721a      	strb	r2, [r3, #8]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000d6e:	4b8b      	ldr	r3, [pc, #556]	; (8000f9c <dwt_configure+0x2a8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a8a      	ldr	r2, [pc, #552]	; (8000f9c <dwt_configure+0x2a8>)
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	6952      	ldr	r2, [r2, #20]
 8000d78:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d7c:	615a      	str	r2, [r3, #20]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000d7e:	4b87      	ldr	r3, [pc, #540]	; (8000f9c <dwt_configure+0x2a8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a86      	ldr	r2, [pc, #536]	; (8000f9c <dwt_configure+0x2a8>)
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	6951      	ldr	r1, [r2, #20]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	7a12      	ldrb	r2, [r2, #8]
 8000d8c:	0412      	lsls	r2, r2, #16
 8000d8e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000d92:	430a      	orrs	r2, r1
 8000d94:	615a      	str	r2, [r3, #20]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8000d96:	4b81      	ldr	r3, [pc, #516]	; (8000f9c <dwt_configure+0x2a8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2004      	movs	r0, #4
 8000da2:	f000 fa63 	bl	800126c <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8000da6:	8abb      	ldrh	r3, [r7, #20]
 8000da8:	461a      	mov	r2, r3
 8000daa:	f642 0104 	movw	r1, #10244	; 0x2804
 8000dae:	202e      	movs	r0, #46	; 0x2e
 8000db0:	f000 fa40 	bl	8001234 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 faae 	bl	8001318 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000dbc:	7cfb      	ldrb	r3, [r7, #19]
 8000dbe:	4a78      	ldr	r2, [pc, #480]	; (8000fa0 <dwt_configure+0x2ac>)
 8000dc0:	5cd3      	ldrb	r3, [r2, r3]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b77      	ldr	r3, [pc, #476]	; (8000fa4 <dwt_configure+0x2b0>)
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2107      	movs	r1, #7
 8000dce:	202b      	movs	r0, #43	; 0x2b
 8000dd0:	f000 fa4c 	bl	800126c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000dd4:	7cfb      	ldrb	r3, [r7, #19]
 8000dd6:	4a72      	ldr	r2, [pc, #456]	; (8000fa0 <dwt_configure+0x2ac>)
 8000dd8:	5cd3      	ldrb	r3, [r2, r3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <dwt_configure+0x2b4>)
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	461a      	mov	r2, r3
 8000de2:	210b      	movs	r1, #11
 8000de4:	202b      	movs	r0, #43	; 0x2b
 8000de6:	f000 fa11 	bl	800120c <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000dea:	7c7b      	ldrb	r3, [r7, #17]
 8000dec:	4a6f      	ldr	r2, [pc, #444]	; (8000fac <dwt_configure+0x2b8>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	461a      	mov	r2, r3
 8000df2:	210b      	movs	r1, #11
 8000df4:	2028      	movs	r0, #40	; 0x28
 8000df6:	f000 fa09 	bl	800120c <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000dfa:	7cfb      	ldrb	r3, [r7, #19]
 8000dfc:	4a68      	ldr	r2, [pc, #416]	; (8000fa0 <dwt_configure+0x2ac>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <dwt_configure+0x2bc>)
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	210c      	movs	r1, #12
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f000 fa2d 	bl	800126c <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	79db      	ldrb	r3, [r3, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	799b      	ldrb	r3, [r3, #6]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4a65      	ldr	r2, [pc, #404]	; (8000fb4 <dwt_configure+0x2c0>)
 8000e20:	0043      	lsls	r3, r0, #1
 8000e22:	440b      	add	r3, r1
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	2027      	movs	r0, #39	; 0x27
 8000e2e:	f000 fa01 	bl	8001234 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000e32:	7cbb      	ldrb	r3, [r7, #18]
 8000e34:	4a60      	ldr	r2, [pc, #384]	; (8000fb8 <dwt_configure+0x2c4>)
 8000e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	2027      	movs	r0, #39	; 0x27
 8000e40:	f000 f9f8 	bl	8001234 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	79db      	ldrb	r3, [r3, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000e4c:	2264      	movs	r2, #100	; 0x64
 8000e4e:	2106      	movs	r1, #6
 8000e50:	2027      	movs	r0, #39	; 0x27
 8000e52:	f000 f9ef 	bl	8001234 <dwt_write16bitoffsetreg>
 8000e56:	e018      	b.n	8000e8a <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d10a      	bne.n	8000e76 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000e60:	2210      	movs	r2, #16
 8000e62:	2106      	movs	r1, #6
 8000e64:	2027      	movs	r0, #39	; 0x27
 8000e66:	f000 f9e5 	bl	8001234 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	2126      	movs	r1, #38	; 0x26
 8000e6e:	2027      	movs	r0, #39	; 0x27
 8000e70:	f000 f9cc 	bl	800120c <dwt_write8bitoffsetreg>
 8000e74:	e009      	b.n	8000e8a <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000e76:	2220      	movs	r2, #32
 8000e78:	2106      	movs	r1, #6
 8000e7a:	2027      	movs	r0, #39	; 0x27
 8000e7c:	f000 f9da 	bl	8001234 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000e80:	2228      	movs	r2, #40	; 0x28
 8000e82:	2126      	movs	r1, #38	; 0x26
 8000e84:	2027      	movs	r0, #39	; 0x27
 8000e86:	f000 f9c1 	bl	800120c <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000e8a:	7cbb      	ldrb	r3, [r7, #18]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	78d2      	ldrb	r2, [r2, #3]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <dwt_configure+0x2c8>)
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	2027      	movs	r0, #39	; 0x27
 8000ea2:	f000 f9e3 	bl	800126c <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	895b      	ldrh	r3, [r3, #10]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f241 0241 	movw	r2, #4161	; 0x1041
 8000eb4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	895b      	ldrh	r3, [r3, #10]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	2027      	movs	r0, #39	; 0x27
 8000ec0:	f000 f9b8 	bl	8001234 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <dwt_configure+0x2cc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	210c      	movs	r1, #12
 8000ecc:	2023      	movs	r0, #35	; 0x23
 8000ece:	f000 f9cd 	bl	800126c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000ed2:	7cbb      	ldrb	r3, [r7, #18]
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <dwt_configure+0x2cc>)
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	889b      	ldrh	r3, [r3, #4]
 8000edc:	461a      	mov	r2, r3
 8000ede:	2104      	movs	r1, #4
 8000ee0:	2023      	movs	r0, #35	; 0x23
 8000ee2:	f000 f9a7 	bl	8001234 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	799b      	ldrb	r3, [r3, #6]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00d      	beq.n	8000f0a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	79db      	ldrb	r3, [r3, #7]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <dwt_configure+0x2d0>)
 8000ef6:	5c9b      	ldrb	r3, [r3, r2]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	2021      	movs	r0, #33	; 0x21
 8000efe:	f000 f985 	bl	800120c <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000f02:	2303      	movs	r3, #3
 8000f04:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000f06:	2301      	movs	r3, #1
 8000f08:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000f0a:	7cfb      	ldrb	r3, [r7, #19]
 8000f0c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000f10:	7cfb      	ldrb	r3, [r7, #19]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	b2db      	uxtb	r3, r3
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000f16:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	049b      	lsls	r3, r3, #18
 8000f1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000f22:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000f2c:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	045b      	lsls	r3, r3, #17
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        useDWnsSFD = 1 ;
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000f36:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	059b      	lsls	r3, r3, #22
 8000f3e:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000f42:	4313      	orrs	r3, r2
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	7952      	ldrb	r2, [r2, #5]
 8000f48:	06d2      	lsls	r2, r2, #27
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
        nsSfd_result = 3 ;
        useDWnsSFD = 1 ;
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	2100      	movs	r1, #0
 8000f52:	201f      	movs	r0, #31
 8000f54:	f000 f98a 	bl	800126c <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <dwt_configure+0x2a8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	7891      	ldrb	r1, [r2, #2]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	7852      	ldrb	r2, [r2, #1]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	0411      	lsls	r1, r2, #16
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	79d2      	ldrb	r2, [r2, #7]
 8000f6e:	0352      	lsls	r2, r2, #13
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <dwt_configure+0x2a8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2008      	movs	r0, #8
 8000f80:	f000 f974 	bl	800126c <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000f84:	2242      	movs	r2, #66	; 0x42
 8000f86:	2100      	movs	r1, #0
 8000f88:	200d      	movs	r0, #13
 8000f8a:	f000 f93f 	bl	800120c <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08002018 	.word	0x08002018
 8000f9c:	20000014 	.word	0x20000014
 8000fa0:	08001f98 	.word	0x08001f98
 8000fa4:	08001fb8 	.word	0x08001fb8
 8000fa8:	08001fd0 	.word	0x08001fd0
 8000fac:	08001fd8 	.word	0x08001fd8
 8000fb0:	08001fa0 	.word	0x08001fa0
 8000fb4:	08001fe8 	.word	0x08001fe8
 8000fb8:	08001ff4 	.word	0x08001ff4
 8000fbc:	08001ff8 	.word	0x08001ff8
 8000fc0:	08001fdc 	.word	0x08001fdc
 8000fc4:	08001fe4 	.word	0x08001fe4

08000fc8 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000fd8:	887a      	ldrh	r2, [r7, #2]
 8000fda:	8839      	ldrh	r1, [r7, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2011      	movs	r0, #17
 8000fe0:	f000 f860 	bl	80010a4 <dwt_readfromdevice>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <dwt_writetodevice>:
    uint16      recordNumber,
    uint16      index,
    uint32      length,
    const uint8 *buffer
)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001002:	89bb      	ldrh	r3, [r7, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10d      	bne.n	8001024 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	617a      	str	r2, [r7, #20]
 800100e:	89fa      	ldrh	r2, [r7, #14]
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	f107 0118 	add.w	r1, r7, #24
 800101c:	440b      	add	r3, r1
 800101e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001022:	e033      	b.n	800108c <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	617a      	str	r2, [r7, #20]
 800102a:	89fa      	ldrh	r2, [r7, #14]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f107 0118 	add.w	r1, r7, #24
 8001038:	440b      	add	r3, r1
 800103a:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800103e:	89bb      	ldrh	r3, [r7, #12]
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	d80a      	bhi.n	800105a <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	617a      	str	r2, [r7, #20]
 800104a:	89ba      	ldrh	r2, [r7, #12]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	f107 0118 	add.w	r1, r7, #24
 8001052:	440b      	add	r3, r1
 8001054:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001058:	e018      	b.n	800108c <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	617a      	str	r2, [r7, #20]
 8001060:	89ba      	ldrh	r2, [r7, #12]
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f107 0118 	add.w	r1, r7, #24
 800106e:	440b      	add	r3, r1
 8001070:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	617a      	str	r2, [r7, #20]
 800107a:	89ba      	ldrh	r2, [r7, #12]
 800107c:	09d2      	lsrs	r2, r2, #7
 800107e:	b292      	uxth	r2, r2
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f107 0118 	add.w	r1, r7, #24
 8001086:	440b      	add	r3, r1
 8001088:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	b298      	uxth	r0, r3
 8001090:	f107 0110 	add.w	r1, r7, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f000 fb58 	bl	800174c <writetospi>
} // end dwt_writetodevice()
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32  length,
    uint8   *buffer
)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60ba      	str	r2, [r7, #8]
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4603      	mov	r3, r0
 80010b0:	81fb      	strh	r3, [r7, #14]
 80010b2:	460b      	mov	r3, r1
 80010b4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80010ba:	89bb      	ldrh	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10a      	bne.n	80010d6 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	617a      	str	r2, [r7, #20]
 80010c6:	89fa      	ldrh	r2, [r7, #14]
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	f107 0118 	add.w	r1, r7, #24
 80010ce:	440b      	add	r3, r1
 80010d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80010d4:	e033      	b.n	800113e <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	617a      	str	r2, [r7, #20]
 80010dc:	89fa      	ldrh	r2, [r7, #14]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f107 0118 	add.w	r1, r7, #24
 80010ea:	440b      	add	r3, r1
 80010ec:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80010f0:	89bb      	ldrh	r3, [r7, #12]
 80010f2:	2b7f      	cmp	r3, #127	; 0x7f
 80010f4:	d80a      	bhi.n	800110c <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	617a      	str	r2, [r7, #20]
 80010fc:	89ba      	ldrh	r2, [r7, #12]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f107 0118 	add.w	r1, r7, #24
 8001104:	440b      	add	r3, r1
 8001106:	f803 2c08 	strb.w	r2, [r3, #-8]
 800110a:	e018      	b.n	800113e <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	617a      	str	r2, [r7, #20]
 8001112:	89ba      	ldrh	r2, [r7, #12]
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f107 0118 	add.w	r1, r7, #24
 8001120:	440b      	add	r3, r1
 8001122:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	617a      	str	r2, [r7, #20]
 800112c:	89ba      	ldrh	r2, [r7, #12]
 800112e:	09d2      	lsrs	r2, r2, #7
 8001130:	b292      	uxth	r2, r2
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f107 0118 	add.w	r1, r7, #24
 8001138:	440b      	add	r3, r1
 800113a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	b298      	uxth	r0, r3
 8001142:	f107 0110 	add.w	r1, r7, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	f000 fb39 	bl	80017c0 <readfromspi>
} // end dwt_readfromdevice()
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop

08001158 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID,int regOffset)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	b298      	uxth	r0, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b299      	uxth	r1, r3
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2204      	movs	r2, #4
 8001174:	f7ff ff96 	bl	80010a4 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001178:	2303      	movs	r3, #3
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	e00b      	b.n	8001196 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	f107 010c 	add.w	r1, r7, #12
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	440a      	add	r2, r1
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer

    for (j = 3 ; j >= 0 ; j --)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	3b01      	subs	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	daf0      	bge.n	800117e <dwt_read32bitoffsetreg+0x26>
    {
        regval = (regval << 8) + buffer[j] ;
    }
    return regval ;
 800119c:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop

080011a8 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 80011b2:	2300      	movs	r3, #0
 80011b4:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	b298      	uxth	r0, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b299      	uxth	r1, r3
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2202      	movs	r2, #2
 80011c4:	f7ff ff6e 	bl	80010a4 <dwt_readfromdevice>

    regval = (buffer[1] << 8) + buffer[0] ;
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	7b3b      	ldrb	r3, [r7, #12]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4413      	add	r3, r2
 80011d6:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80011d8:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop

080011e4 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	b298      	uxth	r0, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b299      	uxth	r1, r3
 80011f6:	f107 030f 	add.w	r3, r7, #15
 80011fa:	2201      	movs	r2, #1
 80011fc:	f7ff ff52 	bl	80010a4 <dwt_readfromdevice>

    return regval ;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop

0800120c <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4613      	mov	r3, r2
 8001218:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b298      	uxth	r0, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	b299      	uxth	r1, r3
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2201      	movs	r2, #1
 8001226:	f7ff fee1 	bl	8000fec <dwt_writetodevice>
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop

08001234 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16 regval)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	b298      	uxth	r0, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	b299      	uxth	r1, r3
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2202      	movs	r2, #2
 8001260:	f7ff fec4 	bl	8000fec <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32 regval)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e00d      	b.n	800129a <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	b2d9      	uxtb	r1, r3
 8001282:	f107 0210 	add.w	r2, r7, #16
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4413      	add	r3, r2
 800128a:	460a      	mov	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
void dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32 regval)
{
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b03      	cmp	r3, #3
 800129e:	ddee      	ble.n	800127e <dwt_write32bitoffsetreg+0x12>
    {
        buffer[j] = regval & 0xff ;
        regval >>= 8 ;
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	b298      	uxth	r0, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	b299      	uxth	r1, r3
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2204      	movs	r2, #4
 80012ae:	f7ff fe9d 	bl	8000fec <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop

080012bc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint32 address)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	2104      	movs	r1, #4
 80012cc:	202d      	movs	r0, #45	; 0x2d
 80012ce:	f7ff ffb1 	bl	8001234 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80012d2:	2203      	movs	r2, #3
 80012d4:	2106      	movs	r1, #6
 80012d6:	202d      	movs	r0, #45	; 0x2d
 80012d8:	f7ff ff98 	bl	800120c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80012dc:	2200      	movs	r2, #0
 80012de:	2106      	movs	r1, #6
 80012e0:	202d      	movs	r0, #45	; 0x2d
 80012e2:	f7ff ff93 	bl	800120c <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80012e6:	210a      	movs	r1, #10
 80012e8:	202d      	movs	r0, #45	; 0x2d
 80012ea:	f7ff ff35 	bl	8001158 <dwt_read32bitoffsetreg>
 80012ee:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop

080012fc <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001300:	2200      	movs	r2, #0
 8001302:	2102      	movs	r1, #2
 8001304:	202c      	movs	r0, #44	; 0x2c
 8001306:	f7ff ff81 	bl	800120c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800130a:	2202      	movs	r2, #2
 800130c:	2102      	movs	r1, #2
 800130e:	202c      	movs	r0, #44	; 0x2c
 8001310:	f7ff ff7c 	bl	800120c <dwt_write8bitoffsetreg>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8001320:	226d      	movs	r2, #109	; 0x6d
 8001322:	f640 0106 	movw	r1, #2054	; 0x806
 8001326:	202e      	movs	r0, #46	; 0x2e
 8001328:	f7ff ff70 	bl	800120c <dwt_write8bitoffsetreg>

    if(prfIndex)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8001332:	f240 6207 	movw	r2, #1543	; 0x607
 8001336:	f641 0106 	movw	r1, #6150	; 0x1806
 800133a:	202e      	movs	r0, #46	; 0x2e
 800133c:	f7ff ff7a 	bl	8001234 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8001340:	e006      	b.n	8001350 <_dwt_configlde+0x38>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8001342:	f241 6207 	movw	r2, #5639	; 0x1607
 8001346:	f641 0106 	movw	r1, #6150	; 0x1806
 800134a:	202e      	movs	r0, #46	; 0x2e
 800134c:	f7ff ff72 	bl	8001234 <dwt_write16bitoffsetreg>
    }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800135c:	200e      	movs	r0, #14
 800135e:	f000 f80f 	bl	8001380 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001362:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001366:	2106      	movs	r1, #6
 8001368:	202d      	movs	r0, #45	; 0x2d
 800136a:	f7ff ff63 	bl	8001234 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800136e:	2001      	movs	r0, #1
 8001370:	f000 f9ca 	bl	8001708 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001374:	2001      	movs	r0, #1
 8001376:	f000 f803 	bl	8001380 <_dwt_enableclocks>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop

08001380 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2202      	movs	r2, #2
 800138e:	2100      	movs	r1, #0
 8001390:	2036      	movs	r0, #54	; 0x36
 8001392:	f7ff fe87 	bl	80010a4 <dwt_readfromdevice>
    switch(clocks)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0e      	cmp	r3, #14
 800139a:	d876      	bhi.n	800148a <_dwt_enableclocks+0x10a>
 800139c:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <_dwt_enableclocks+0x24>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013f1 	.word	0x080013f1
 80013a8:	080013e1 	.word	0x080013e1
 80013ac:	08001407 	.word	0x08001407
 80013b0:	0800148b 	.word	0x0800148b
 80013b4:	0800148b 	.word	0x0800148b
 80013b8:	0800148b 	.word	0x0800148b
 80013bc:	0800148b 	.word	0x0800148b
 80013c0:	0800141d 	.word	0x0800141d
 80013c4:	0800143d 	.word	0x0800143d
 80013c8:	0800148b 	.word	0x0800148b
 80013cc:	0800148b 	.word	0x0800148b
 80013d0:	08001453 	.word	0x08001453
 80013d4:	0800145f 	.word	0x0800145f
 80013d8:	0800146b 	.word	0x0800146b
 80013dc:	08001481 	.word	0x08001481
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80013e0:	2300      	movs	r3, #0
 80013e2:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80013e4:	7b7b      	ldrb	r3, [r7, #13]
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	737b      	strb	r3, [r7, #13]
        }
        break;
 80013ee:	e04d      	b.n	800148c <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	f023 0303 	bic.w	r3, r3, #3
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001404:	e042      	b.n	800148c <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001406:	7b3b      	ldrb	r3, [r7, #12]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	f023 0303 	bic.w	r3, r3, #3
 800140e:	b25b      	sxtb	r3, r3
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	733b      	strb	r3, [r7, #12]
        }
        break;
 800141a:	e037      	b.n	800148c <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800141c:	7b3b      	ldrb	r3, [r7, #12]
 800141e:	b25b      	sxtb	r3, r3
 8001420:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001424:	b25b      	sxtb	r3, r3
 8001426:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001436:	b2db      	uxtb	r3, r3
 8001438:	737b      	strb	r3, [r7, #13]
        }
        break;
 800143a:	e027      	b.n	800148c <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001442:	b2db      	uxtb	r3, r3
 8001444:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800144c:	b2db      	uxtb	r3, r3
 800144e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001450:	e01c      	b.n	800148c <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800145c:	e016      	b.n	800148c <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	f023 0302 	bic.w	r3, r3, #2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001468:	e010      	b.n	800148c <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800146a:	7b3b      	ldrb	r3, [r7, #12]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001472:	b25b      	sxtb	r3, r3
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	b25b      	sxtb	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	733b      	strb	r3, [r7, #12]
        }
        break;
 800147e:	e005      	b.n	800148c <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001480:	2301      	movs	r3, #1
 8001482:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001484:	2303      	movs	r3, #3
 8001486:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001488:	e000      	b.n	800148c <_dwt_enableclocks+0x10c>
        default:
        break;
 800148a:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2201      	movs	r2, #1
 8001492:	2100      	movs	r1, #0
 8001494:	2036      	movs	r0, #54	; 0x36
 8001496:	f7ff fda9 	bl	8000fec <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	3301      	adds	r3, #1
 80014a0:	2201      	movs	r2, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	2036      	movs	r0, #54	; 0x36
 80014a6:	f7ff fda1 	bl	8000fec <dwt_writetodevice>

} // end _dwt_enableclocks()
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop

080014b4 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff61 	bl	8001380 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80014be:	2200      	movs	r2, #0
 80014c0:	2104      	movs	r1, #4
 80014c2:	2036      	movs	r0, #54	; 0x36
 80014c4:	f7ff feb6 	bl	8001234 <dwt_write16bitoffsetreg>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 80014d2:	2100      	movs	r1, #0
 80014d4:	200e      	movs	r0, #14
 80014d6:	f7ff fe3f 	bl	8001158 <dwt_read32bitoffsetreg>
 80014da:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 80014dc:	f000 f8f2 	bl	80016c4 <decamutexon>
 80014e0:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	200e      	movs	r0, #14
 80014e8:	f7ff fec0 	bl	800126c <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	2100      	movs	r1, #0
 80014f0:	200d      	movs	r0, #13
 80014f2:	f7ff fe8b 	bl	800120c <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <dwt_forcetrxoff+0x58>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	200f      	movs	r0, #15
 80014fc:	f7ff feb6 	bl	800126c <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001500:	f000 f814 	bl	800152c <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	2100      	movs	r1, #0
 8001508:	200e      	movs	r0, #14
 800150a:	f7ff feaf 	bl	800126c <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f000 f8ec 	bl	80016ec <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <dwt_forcetrxoff+0x5c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	769a      	strb	r2, [r3, #26]

} // end deviceforcetrxoff()
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2427fff8 	.word	0x2427fff8
 8001528:	20000014 	.word	0x20000014

0800152c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001532:	2103      	movs	r1, #3
 8001534:	200f      	movs	r0, #15
 8001536:	f7ff fe55 	bl	80011e4 <dwt_read8bitoffsetreg>
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800153e:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	005b      	lsls	r3, r3, #1
{
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001544:	4053      	eors	r3, r2
 8001546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <dwt_syncrxbufptrs+0x2c>
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800154e:	2201      	movs	r2, #1
 8001550:	2103      	movs	r1, #3
 8001552:	200d      	movs	r0, #13
 8001554:	f7ff fe5a 	bl	800120c <dwt_write8bitoffsetreg>
    }
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001572:	f7ff ffdb 	bl	800152c <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157a:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158c:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	461a      	mov	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	200d      	movs	r0, #13
 8001596:	f7ff fe4d 	bl	8001234 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01a      	beq.n	80015da <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80015a4:	2103      	movs	r1, #3
 80015a6:	200f      	movs	r0, #15
 80015a8:	f7ff fe1c 	bl	80011e4 <dwt_read8bitoffsetreg>
 80015ac:	4603      	mov	r3, r0
 80015ae:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00f      	beq.n	80015da <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80015ba:	f7ff ff87 	bl	80014cc <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	2100      	movs	r1, #0
 80015ce:	200d      	movs	r0, #13
 80015d0:	f7ff fe30 	bl	8001234 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	e000      	b.n	80015dc <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 80015da:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80015e8:	f7ff ff64 	bl	80014b4 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	202c      	movs	r0, #44	; 0x2c
 80015f2:	f7ff fe1f 	bl	8001234 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2106      	movs	r1, #6
 80015fa:	202c      	movs	r0, #44	; 0x2c
 80015fc:	f7ff fe06 	bl	800120c <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001600:	f7ff fe7c 	bl	80012fc <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001604:	2200      	movs	r2, #0
 8001606:	2103      	movs	r1, #3
 8001608:	2036      	movs	r0, #54	; 0x36
 800160a:	f7ff fdff 	bl	800120c <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 f87a 	bl	8001708 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001614:	22f0      	movs	r2, #240	; 0xf0
 8001616:	2103      	movs	r1, #3
 8001618:	2036      	movs	r0, #54	; 0x36
 800161a:	f7ff fdf7 	bl	800120c <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <dwt_softreset+0x48>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	769a      	strb	r2, [r3, #26]
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000014 	.word	0x20000014

08001630 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	b25b      	sxtb	r3, r3
 8001644:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001648:	b25b      	sxtb	r3, r3
 800164a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	461a      	mov	r2, r3
 8001650:	210e      	movs	r1, #14
 8001652:	202b      	movs	r0, #43	; 0x2b
 8001654:	f7ff fdda 	bl	800120c <dwt_write8bitoffsetreg>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <NVIC_EnableIRQ+0x2c>)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	095b      	lsrs	r3, r3, #5
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100

08001690 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800169a:	4909      	ldr	r1, [pc, #36]	; (80016c0 <NVIC_DisableIRQ+0x30>)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	095b      	lsrs	r3, r3, #5
 80016a2:	79fa      	ldrb	r2, [r7, #7]
 80016a4:	f002 021f 	and.w	r2, r2, #31
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	3320      	adds	r3, #32
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80016ca:	2017      	movs	r0, #23
 80016cc:	f000 f926 	bl	800191c <EXTI_GetITEnStatus>
 80016d0:	4603      	mov	r3, r0
 80016d2:	607b      	str	r3, [r7, #4]

	if(s) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <decamutexon+0x1c>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80016da:	2017      	movs	r0, #23
 80016dc:	f7ff ffd8 	bl	8001690 <NVIC_DisableIRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop

080016ec <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <decamutexoff+0x14>
		port_EnableEXT_IRQ();
 80016fa:	2017      	movs	r0, #23
 80016fc:	f7ff ffb0 	bl	8001660 <NVIC_EnableIRQ>
	}
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    sleep_ms(time_ms);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f805 	bl	8001720 <sleep_ms>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop

08001720 <sleep_ms>:

void sleep_ms(unsigned int time_ms)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = portGetTickCount() + time_ms;
 8001728:	f000 f8d2 	bl	80018d0 <portGetTickCnt>
 800172c:	4602      	mov	r2, r0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
    while ((signed long)(portGetTickCount() - end) <= 0)
 8001734:	bf00      	nop
 8001736:	f000 f8cb 	bl	80018d0 <portGetTickCnt>
 800173a:	4602      	mov	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	ddf8      	ble.n	8001736 <sleep_ms+0x16>
        ;
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
 800174c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001750:	4681      	mov	r9, r0
 8001752:	4690      	mov	r8, r2
 8001754:	461e      	mov	r6, r3
 8001756:	460c      	mov	r4, r1

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
 8001758:	f7ff ffb4 	bl	80016c4 <decamutexon>

    SPIx_CS_GPIO->BRR = SPIx_CS;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <writetospi+0x6c>)
 800175e:	2210      	movs	r2, #16
 8001760:	615a      	str	r2, [r3, #20]

    for(i=0; i<headerLength; i++)
 8001762:	f1b9 0f00 	cmp.w	r9, #0
 8001766:	d00e      	beq.n	8001786 <writetospi+0x3a>
    {
    	SPIx->DR = headerBuffer[i];
 8001768:	4d14      	ldr	r5, [pc, #80]	; (80017bc <writetospi+0x70>)
 800176a:	4621      	mov	r1, r4

    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 800176c:	46ae      	mov	lr, r5
 800176e:	eb04 0209 	add.w	r2, r4, r9

    SPIx_CS_GPIO->BRR = SPIx_CS;

    for(i=0; i<headerLength; i++)
    {
    	SPIx->DR = headerBuffer[i];
 8001772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001776:	81ab      	strh	r3, [r5, #12]

    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 8001778:	892c      	ldrh	r4, [r5, #8]
 800177a:	07e4      	lsls	r4, r4, #31
 800177c:	d5fc      	bpl.n	8001778 <writetospi+0x2c>

    stat = decamutexon() ;

    SPIx_CS_GPIO->BRR = SPIx_CS;

    for(i=0; i<headerLength; i++)
 800177e:	428a      	cmp	r2, r1
    {
    	SPIx->DR = headerBuffer[i];

    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

    	SPIx->DR ;
 8001780:	f8be 300c 	ldrh.w	r3, [lr, #12]

    stat = decamutexon() ;

    SPIx_CS_GPIO->BRR = SPIx_CS;

    for(i=0; i<headerLength; i++)
 8001784:	d1f5      	bne.n	8001772 <writetospi+0x26>
    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

    	SPIx->DR ;
    }

    for(i=0; i<bodylength; i++)
 8001786:	f1b8 0f00 	cmp.w	r8, #0
 800178a:	d00d      	beq.n	80017a8 <writetospi+0x5c>
    {
     	SPIx->DR = bodyBuffer[i];
 800178c:	490b      	ldr	r1, [pc, #44]	; (80017bc <writetospi+0x70>)
 800178e:	4633      	mov	r3, r6

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 8001790:	460d      	mov	r5, r1
 8001792:	eb06 0408 	add.w	r4, r6, r8
    	SPIx->DR ;
    }

    for(i=0; i<bodylength; i++)
    {
     	SPIx->DR = bodyBuffer[i];
 8001796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800179a:	818a      	strh	r2, [r1, #12]

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 800179c:	890a      	ldrh	r2, [r1, #8]
 800179e:	07d2      	lsls	r2, r2, #31
 80017a0:	d5fc      	bpl.n	800179c <writetospi+0x50>
    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

    	SPIx->DR ;
    }

    for(i=0; i<bodylength; i++)
 80017a2:	42a3      	cmp	r3, r4
    {
     	SPIx->DR = bodyBuffer[i];

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

		SPIx->DR ;
 80017a4:	89aa      	ldrh	r2, [r5, #12]
    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

    	SPIx->DR ;
    }

    for(i=0; i<bodylength; i++)
 80017a6:	d1f6      	bne.n	8001796 <writetospi+0x4a>
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

		SPIx->DR ;
	}

    SPIx_CS_GPIO->BSRR = SPIx_CS;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <writetospi+0x6c>)
 80017aa:	2210      	movs	r2, #16
 80017ac:	611a      	str	r2, [r3, #16]

    decamutexoff(stat) ;
 80017ae:	f7ff ff9d 	bl	80016ec <decamutexoff>

    return 0;
} // end writetospi()
 80017b2:	2000      	movs	r0, #0
 80017b4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40013000 	.word	0x40013000

080017c0 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
 80017c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80017c4:	4681      	mov	r9, r0
 80017c6:	4690      	mov	r8, r2
 80017c8:	461e      	mov	r6, r3
 80017ca:	460c      	mov	r4, r1

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
 80017cc:	f7ff ff7a 	bl	80016c4 <decamutexon>

    /* Wait for SPIx Tx buffer empty */
    //while (port_SPIx_busy_sending());

    SPIx_CS_GPIO->BRR = SPIx_CS;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <readfromspi+0x70>)
 80017d2:	2210      	movs	r2, #16
 80017d4:	615a      	str	r2, [r3, #20]

    for(i=0; i<headerLength; i++)
 80017d6:	f1b9 0f00 	cmp.w	r9, #0
 80017da:	d00f      	beq.n	80017fc <readfromspi+0x3c>
    {
    	SPIx->DR = headerBuffer[i];
 80017dc:	4d15      	ldr	r5, [pc, #84]	; (8001834 <readfromspi+0x74>)
 80017de:	4621      	mov	r1, r4

     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 80017e0:	46ae      	mov	lr, r5
 80017e2:	eb04 0209 	add.w	r2, r4, r9

    SPIx_CS_GPIO->BRR = SPIx_CS;

    for(i=0; i<headerLength; i++)
    {
    	SPIx->DR = headerBuffer[i];
 80017e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017ea:	81ab      	strh	r3, [r5, #12]

     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 80017ec:	892c      	ldrh	r4, [r5, #8]
 80017ee:	07e4      	lsls	r4, r4, #31
 80017f0:	d5fc      	bpl.n	80017ec <readfromspi+0x2c>

     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
 80017f2:	f8be 300c 	ldrh.w	r3, [lr, #12]
    /* Wait for SPIx Tx buffer empty */
    //while (port_SPIx_busy_sending());

    SPIx_CS_GPIO->BRR = SPIx_CS;

    for(i=0; i<headerLength; i++)
 80017f6:	4291      	cmp	r1, r2
    {
    	SPIx->DR = headerBuffer[i];

     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
 80017f8:	7033      	strb	r3, [r6, #0]
    /* Wait for SPIx Tx buffer empty */
    //while (port_SPIx_busy_sending());

    SPIx_CS_GPIO->BRR = SPIx_CS;

    for(i=0; i<headerLength; i++)
 80017fa:	d1f4      	bne.n	80017e6 <readfromspi+0x26>
     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
    }

    for(i=0; i<readlength; i++)
 80017fc:	f1b8 0f00 	cmp.w	r8, #0
 8001800:	d00e      	beq.n	8001820 <readfromspi+0x60>
    {
    	SPIx->DR = 0;  // Dummy write as we read the message body
 8001802:	490c      	ldr	r1, [pc, #48]	; (8001834 <readfromspi+0x74>)
 8001804:	4633      	mov	r3, r6

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 8001806:	460c      	mov	r4, r1
     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
    }

    for(i=0; i<readlength; i++)
    {
    	SPIx->DR = 0;  // Dummy write as we read the message body
 8001808:	f04f 0500 	mov.w	r5, #0
 800180c:	44b0      	add	r8, r6
 800180e:	818d      	strh	r5, [r1, #12]

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 8001810:	890a      	ldrh	r2, [r1, #8]
 8001812:	07d2      	lsls	r2, r2, #31
 8001814:	d5fc      	bpl.n	8001810 <readfromspi+0x50>
 
	   	readBuffer[i] = SPIx->DR ;//port_SPIx_receive_data(); //this clears RXNE bit
 8001816:	89a2      	ldrh	r2, [r4, #12]
 8001818:	f803 2b01 	strb.w	r2, [r3], #1
     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);

     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
    }

    for(i=0; i<readlength; i++)
 800181c:	4598      	cmp	r8, r3
 800181e:	d1f6      	bne.n	800180e <readfromspi+0x4e>
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 
	   	readBuffer[i] = SPIx->DR ;//port_SPIx_receive_data(); //this clears RXNE bit
    }

    SPIx_CS_GPIO->BSRR = SPIx_CS;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <readfromspi+0x70>)
 8001822:	2210      	movs	r2, #16
 8001824:	611a      	str	r2, [r3, #16]

    decamutexoff(stat) ;
 8001826:	f7ff ff61 	bl	80016ec <decamutexoff>

    return 0;
} // end readfromspi()
 800182a:	2000      	movs	r0, #0
 800182c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8001830:	40010800 	.word	0x40010800
 8001834:	40013000 	.word	0x40013000

08001838 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	da0b      	bge.n	8001864 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800184c:	490d      	ldr	r1, [pc, #52]	; (8001884 <NVIC_SetPriority+0x4c>)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	3b04      	subs	r3, #4
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001862:	e009      	b.n	8001878 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <NVIC_SetPriority+0x50>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	e000e100 	.word	0xe000e100

0800188c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189a:	d301      	bcc.n	80018a0 <SysTick_Config+0x14>
 800189c:	2301      	movs	r3, #1
 800189e:	e011      	b.n	80018c4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018a8:	3b01      	subs	r3, #1
 80018aa:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80018ac:	210f      	movs	r1, #15
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295
 80018b2:	f7ff ffc1 	bl	8001838 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <SysTick_Config+0x40>)
 80018be:	2207      	movs	r2, #7
 80018c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <portGetTickCnt>:
{
	return -1;
}

unsigned long portGetTickCnt(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return time32_incr;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <portGetTickCnt+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000108 	.word	0x20000108

080018e4 <SysTick_Configuration>:

int SysTick_Configuration(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / CLOCKS_PER_SEC))
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <SysTick_Configuration+0x30>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Configuration+0x34>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffc9 	bl	800188c <SysTick_Config>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <SysTick_Configuration+0x1e>
	{
		/* Capture error */
		while (1);
 8001900:	e7fe      	b.n	8001900 <SysTick_Configuration+0x1c>
	}
	NVIC_SetPriority (SysTick_IRQn, 5);
 8001902:	2105      	movs	r1, #5
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff96 	bl	8001838 <NVIC_SetPriority>

	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000024 	.word	0x20000024
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t EXTI_Line)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <EXTI_GetITEnStatus+0x38>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4013      	ands	r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
  if (enablestatus != (uint32_t)RESET)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <EXTI_GetITEnStatus+0x26>
  {
    bitstatus = SET;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <EXTI_GetITEnStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40010400 	.word	0x40010400

08001958 <RCC_Configuration>:
        port_EnableEXT_IRQ();
    }
}

int RCC_Configuration(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
	ErrorStatus HSEStartUpStatus;
	RCC_ClocksTypeDef RCC_ClockFreq;

	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 800195e:	f7fe fd99 	bl	8000494 <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 8001962:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001966:	f7fe fdc3 	bl	80004f0 <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800196a:	f7fe fdef 	bl	800054c <RCC_WaitForHSEStartUp>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]

	if(HSEStartUpStatus != ERROR)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02c      	beq.n	80019d2 <RCC_Configuration+0x7a>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8001978:	2010      	movs	r0, #16
 800197a:	f7fe fc11 	bl	80001a0 <FLASH_PrefetchBufferCmd>
		/****************************************************************/
		/* HSE= up to 25MHz (on EVB1000 is 12MHz),
		 * HCLK=72MHz, PCLK2=72MHz, PCLK1=36MHz 						*/
		/****************************************************************/
		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 800197e:	2002      	movs	r0, #2
 8001980:	f7fe fbf2 	bl	8000168 <FLASH_SetLatency>
		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8001984:	2000      	movs	r0, #0
 8001986:	f7fe fe61 	bl	800064c <RCC_HCLKConfig>
		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 800198a:	2000      	movs	r0, #0
 800198c:	f7fe fe96 	bl	80006bc <RCC_PCLK2Config>
		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8001990:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001994:	f7fe fe76 	bl	8000684 <RCC_PCLK1Config>
		/*  ADCCLK = PCLK2/4 */
		RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8001998:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800199c:	f7fe feaa 	bl	80006f4 <RCC_ADCCLKConfig>
		/* PLL1 configuration: PLLCLK = (PLL2 / 3) * 9 = 72 MHz */
		//RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div3);

		//RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div3);

		RCC_PLLConfig(RCC_PLLSource_HSE_Div2, RCC_PLLMul_9);
 80019a0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80019a4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80019a8:	f7fe fdf8 	bl	800059c <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7fe fe13 	bl	80005d8 <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET){}
 80019b2:	bf00      	nop
 80019b4:	2039      	movs	r0, #57	; 0x39
 80019b6:	f7fe ffe1 	bl	800097c <RCC_GetFlagStatus>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f9      	beq.n	80019b4 <RCC_Configuration+0x5c>

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7fe fe19 	bl	80005f8 <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while (RCC_GetSYSCLKSource() != 0x08){}
 80019c6:	bf00      	nop
 80019c8:	f7fe fe32 	bl	8000630 <RCC_GetSYSCLKSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d1fa      	bne.n	80019c8 <RCC_Configuration+0x70>
	}

	RCC_GetClocksFreq(&RCC_ClockFreq);
 80019d2:	463b      	mov	r3, r7
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fea9 	bl	800072c <RCC_GetClocksFreq>

	/* Enable SPI1 clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80019da:	2101      	movs	r1, #1
 80019dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019e0:	f7fe ff54 	bl	800088c <RCC_APB2PeriphClockCmd>

	/* Enable SPI2 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80019e4:	2101      	movs	r1, #1
 80019e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019ea:	f7fe ff6d 	bl	80008c8 <RCC_APB1PeriphClockCmd>

	/* Enable GPIOs clocks */
	RCC_APB2PeriphClockCmd(
 80019ee:	2101      	movs	r1, #1
 80019f0:	207d      	movs	r0, #125	; 0x7d
 80019f2:	f7fe ff4b 	bl	800088c <RCC_APB2PeriphClockCmd>
						RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
						ENABLE);

	return 0;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <SPI_ChangeRate>:
#endif
    return 0;
}

void SPI_ChangeRate(uint16_t scalingfactor)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
	uint16_t tmpreg = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	81fb      	strh	r3, [r7, #14]

	/* Get the SPIx CR1 value */
	tmpreg = SPIx->CR1;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <SPI_ChangeRate+0x34>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	81fb      	strh	r3, [r7, #14]

	/*clear the scaling bits*/
	tmpreg &= 0xFFC7;
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001a1a:	81fb      	strh	r3, [r7, #14]

	/*set the scaling bits*/
	tmpreg |= scalingfactor;
 8001a1c:	89fa      	ldrh	r2, [r7, #14]
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	81fb      	strh	r3, [r7, #14]

	/* Write to SPIx CR1 */
	SPIx->CR1 = tmpreg;
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <SPI_ChangeRate+0x34>)
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	8013      	strh	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40013000 	.word	0x40013000

08001a38 <spi_set_rate_low>:
 * @param none
 *
 * @return none
 */
void spi_set_rate_low (void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    SPI_ChangeRate(SPI_BaudRatePrescaler_32);
 8001a3c:	2020      	movs	r0, #32
 8001a3e:	f7ff ffdf 	bl	8001a00 <SPI_ChangeRate>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop

08001a48 <spi_set_rate_high>:
 * @param none
 *
 * @return none
 */
void spi_set_rate_high (void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    SPI_ChangeRate(SPI_BaudRatePrescaler_4);
 8001a4c:	2008      	movs	r0, #8
 8001a4e:	f7ff ffd7 	bl	8001a00 <SPI_ChangeRate>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop

08001a58 <SPI_Configuration>:
	// Enable SPIx
	SPI_Cmd(SPIx, ENABLE);
}

int SPI_Configuration(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
	SPI_InitTypeDef SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	SPI_I2S_DeInit(SPIx);
 8001a5e:	4826      	ldr	r0, [pc, #152]	; (8001af8 <SPI_Configuration+0xa0>)
 8001a60:	f7fe ffc6 	bl	80009f0 <SPI_I2S_DeInit>

	// SPIx Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001a64:	2300      	movs	r3, #0
 8001a66:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001a68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a6c:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
 8001a72:	2300      	movs	r3, #0
 8001a74:	817b      	strh	r3, [r7, #10]
	//SPI_InitStructure.SPI_CPOL = SPI_CPOL_High; //
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001a76:	2300      	movs	r3, #0
 8001a78:	81bb      	strh	r3, [r7, #12]
	//SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge; //
	//SPI_InitStructure.SPI_NSS = SPI_NSS_Hard;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7e:	81fb      	strh	r3, [r7, #14]
	//SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; //sets BR[2:0] bits - baudrate in SPI_CR1 reg bits 4-6
	SPI_InitStructure.SPI_BaudRatePrescaler = SPIx_PRESCALER;
 8001a80:	2310      	movs	r3, #16
 8001a82:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001a84:	2300      	movs	r3, #0
 8001a86:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	82bb      	strh	r3, [r7, #20]

	SPI_Init(SPIx, &SPI_InitStructure);
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4819      	ldr	r0, [pc, #100]	; (8001af8 <SPI_Configuration+0xa0>)
 8001a92:	f7fe ffe7 	bl	8000a64 <SPI_Init>

	// SPIx SCK and MOSI pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_SCK | SPIx_MOSI;
 8001a96:	23a0      	movs	r3, #160	; 0xa0
 8001a98:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001a9a:	2318      	movs	r3, #24
 8001a9c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4815      	ldr	r0, [pc, #84]	; (8001afc <SPI_Configuration+0xa4>)
 8001aa8:	f7fe fb92 	bl	80001d0 <GPIO_Init>

	// SPIx MISO pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_MISO;
 8001aac:	2340      	movs	r3, #64	; 0x40
 8001aae:	803b      	strh	r3, [r7, #0]
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 8001ab0:	2348      	movs	r3, #72	; 0x48
 8001ab2:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4810      	ldr	r0, [pc, #64]	; (8001afc <SPI_Configuration+0xa4>)
 8001aba:	f7fe fb89 	bl	80001d0 <GPIO_Init>

	// SPIx CS pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_CS;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001ac2:	2310      	movs	r3, #16
 8001ac4:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIx_CS_GPIO, &GPIO_InitStructure);
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <SPI_Configuration+0xa4>)
 8001ad0:	f7fe fb7e 	bl	80001d0 <GPIO_Init>

	// Disable SPIx SS Output
	SPI_SSOutputCmd(SPIx, DISABLE);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <SPI_Configuration+0xa0>)
 8001ad8:	f7ff f828 	bl	8000b2c <SPI_SSOutputCmd>

	// Enable SPIx
	SPI_Cmd(SPIx, ENABLE);
 8001adc:	2101      	movs	r1, #1
 8001ade:	4806      	ldr	r0, [pc, #24]	; (8001af8 <SPI_Configuration+0xa0>)
 8001ae0:	f7ff f804 	bl	8000aec <SPI_Cmd>

	// Set CS high
	GPIO_SetBits(SPIx_CS_GPIO, SPIx_CS);
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <SPI_Configuration+0xa4>)
 8001ae8:	f7fe fc48 	bl	800037c <GPIO_SetBits>

    return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40013000 	.word	0x40013000
 8001afc:	40010800 	.word	0x40010800

08001b00 <GPIO_Configuration>:

    return 0;
}

int GPIO_Configuration(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	/* Configure all unused GPIO port pins in Analog Input mode (floating input
	* trigger OFF), this will reduce the power consumption and increase the device
	* immunity against EMI/EMC */

	// Enable GPIOs clocks
	RCC_APB2PeriphClockCmd(
 8001b06:	2101      	movs	r1, #1
 8001b08:	207d      	movs	r0, #125	; 0x7d
 8001b0a:	f7fe febf 	bl	800088c <RCC_APB2PeriphClockCmd>
						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
						ENABLE);

	// Set all GPIO pins as analog inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8001b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b12:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8001b14:	2300      	movs	r3, #0
 8001b16:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4815      	ldr	r0, [pc, #84]	; (8001b74 <GPIO_Configuration+0x74>)
 8001b1e:	f7fe fb57 	bl	80001d0 <GPIO_Init>
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4814      	ldr	r0, [pc, #80]	; (8001b78 <GPIO_Configuration+0x78>)
 8001b28:	f7fe fb52 	bl	80001d0 <GPIO_Init>
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4812      	ldr	r0, [pc, #72]	; (8001b7c <GPIO_Configuration+0x7c>)
 8001b32:	f7fe fb4d 	bl	80001d0 <GPIO_Init>
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4811      	ldr	r0, [pc, #68]	; (8001b80 <GPIO_Configuration+0x80>)
 8001b3c:	f7fe fb48 	bl	80001d0 <GPIO_Init>
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	480f      	ldr	r0, [pc, #60]	; (8001b84 <GPIO_Configuration+0x84>)
 8001b46:	f7fe fb43 	bl	80001d0 <GPIO_Init>
	//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_7;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_Init(GPIOC, &GPIO_InitStructure);
	//GPIO_PinRemapConfig(GPIO_Remap_SPI1, DISABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b50:	2310      	movs	r3, #16
 8001b52:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b54:	2303      	movs	r3, #3
 8001b56:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <GPIO_Configuration+0x7c>)
 8001b5e:	f7fe fb37 	bl	80001d0 <GPIO_Init>

	GPIO_PinRemapConfig(GPIO_Remap_SPI1, DISABLE);
 8001b62:	2100      	movs	r1, #0
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7fe fc25 	bl	80003b4 <GPIO_PinRemapConfig>

    return 0;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40011400 	.word	0x40011400
 8001b84:	40011800 	.word	0x40011800

08001b88 <reset_DW1000>:


void reset_DW1000(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO used for DW1000 reset
	GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b92:	2310      	movs	r3, #16
 8001b94:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b96:	2303      	movs	r3, #3
 8001b98:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <reset_DW1000+0x48>)
 8001ba0:	f7fe fb16 	bl	80001d0 <GPIO_Init>

	//drive the RSTn pin low
	GPIO_ResetBits(DW1000_RSTn_GPIO, DW1000_RSTn);
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <reset_DW1000+0x48>)
 8001ba8:	f7fe fbf6 	bl	8000398 <GPIO_ResetBits>

	//put the pin back to tri-state ... as input
	GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
 8001bac:	2301      	movs	r3, #1
 8001bae:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <reset_DW1000+0x48>)
 8001bbe:	f7fe fb07 	bl	80001d0 <GPIO_Init>

    sleep_ms(2);
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7ff fdac 	bl	8001720 <sleep_ms>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010800 	.word	0x40010800

08001bd4 <spi_peripheral_init>:
 * @param none
 *
 * @return none
 */
static void spi_peripheral_init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    spi_init();
 8001bd8:	f7ff ff3e 	bl	8001a58 <SPI_Configuration>
    //SPI2_Configuration();
    //port_LCD_RS_clear();
    //port_LCD_RW_clear();

    // Wait for LCD to power on.
    sleep_ms(10);
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f7ff fd9f 	bl	8001720 <sleep_ms>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop

08001be8 <peripherals_init>:
 * @param none
 *
 * @return none
 */
void peripherals_init (void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	rcc_init();
 8001bec:	f7ff feb4 	bl	8001958 <RCC_Configuration>
	gpio_init();
 8001bf0:	f7ff ff86 	bl	8001b00 <GPIO_Configuration>
	//interrupt_init();
	systick_init();
 8001bf4:	f7ff fe76 	bl	80018e4 <SysTick_Configuration>
	spi_peripheral_init();
 8001bf8:	f7ff ffec 	bl	8001bd4 <spi_peripheral_init>
	//lcd_init();
#ifdef USART_SUPPORT
    //usartinit();
#endif
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SysTick_Handler>:

/* Tick timer count. */
volatile unsigned long time32_incr;

void SysTick_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
    time32_incr++;
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Handler+0x18>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <SysTick_Handler+0x18>)
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000108 	.word	0x20000108

08001c1c <EXTI9_5_IRQHandler>:
 * @param none
 *
 * @return none
 */
void EXTI9_5_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    do
    {
        port_deca_isr();
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <EXTI9_5_IRQHandler+0x24>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4798      	blx	r3
    } while (port_CheckEXT_IRQ() == 1);
 8001c26:	2120      	movs	r1, #32
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <EXTI9_5_IRQHandler+0x28>)
 8001c2a:	f7fe fb8d 	bl	8000348 <GPIO_ReadInputDataBit>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d0f5      	beq.n	8001c20 <EXTI9_5_IRQHandler+0x4>
    /* Clear EXTI Line 5 Pending Bit */
    EXTI_ClearITPendingBit(DECAIRQ_EXTI);
 8001c34:	2020      	movs	r0, #32
 8001c36:	f7fe fa89 	bl	800014c <EXTI_ClearITPendingBit>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000007c 	.word	0x2000007c
 8001c44:	40010c00 	.word	0x40010c00

08001c48 <main>:
/**
 * Application entry point.
 */

int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	/* Start with board specific hardware init. */
	    peripherals_init();
 8001c4e:	f7ff ffcb 	bl	8001be8 <peripherals_init>

	    /* Reset and initialise DW1000. See NOTE 2 below.
	     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
	     * performance. */
	    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001c52:	f7ff ff99 	bl	8001b88 <reset_DW1000>
	    spi_set_rate_low();
 8001c56:	f7ff feef 	bl	8001a38 <spi_set_rate_low>
	    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7fe ff86 	bl	8000b6c <dwt_initialise>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c66:	d100      	bne.n	8001c6a <main+0x22>
	    {
	        while (1)
	        { };
 8001c68:	e7fe      	b.n	8001c68 <main+0x20>
	    }
	    spi_set_rate_high();
 8001c6a:	f7ff feed 	bl	8001a48 <spi_set_rate_high>

	    /* Configure DW1000. */
	    dwt_configure(&config);
 8001c6e:	4825      	ldr	r0, [pc, #148]	; (8001d04 <main+0xbc>)
 8001c70:	f7ff f840 	bl	8000cf4 <dwt_configure>

	        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
	         * the RX buffer.
	         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
	         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
	        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	e007      	b.n	8001c8a <main+0x42>
	        {
	            rx_buffer[i] = 0;
 8001c7a:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <main+0xc0>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]

	        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
	         * the RX buffer.
	         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
	         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
	        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3301      	adds	r3, #1
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b7e      	cmp	r3, #126	; 0x7e
 8001c8e:	ddf4      	ble.n	8001c7a <main+0x32>
	        {
	            rx_buffer[i] = 0;
	        }

	        /* Activate reception immediately. See NOTE 3 below. */
	        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fc65 	bl	8001560 <dwt_rxenable>

	        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
	         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
	         * function to access it. */
	        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001c96:	bf00      	nop
 8001c98:	2100      	movs	r1, #0
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f7ff fa5c 	bl	8001158 <dwt_read32bitoffsetreg>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <main+0xc4>)
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <main+0xc4>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <main+0xc8>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f2      	beq.n	8001c98 <main+0x50>
	        { };

	        if (status_reg & SYS_STATUS_RXFCG)
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <main+0xc4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01c      	beq.n	8001cf8 <main+0xb0>
	        {
	            /* A frame has been received, copy it to our local buffer. */
	            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f7ff fa49 	bl	8001158 <dwt_read32bitoffsetreg>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <main+0xcc>)
 8001cd2:	801a      	strh	r2, [r3, #0]
	            if (frame_len <= FRAME_LEN_MAX)
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <main+0xcc>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cda:	d806      	bhi.n	8001cea <main+0xa2>
	            {
	                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <main+0xcc>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <main+0xc0>)
 8001ce6:	f7ff f96f 	bl	8000fc8 <dwt_readrxdata>
	            }

	            /* Clear good RX frame event in the DW1000 status register. */
	            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cee:	2100      	movs	r1, #0
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f7ff fabb 	bl	800126c <dwt_write32bitoffsetreg>
 8001cf6:	e7bd      	b.n	8001c74 <main+0x2c>
	        }
	        else
	        {
	            /* Clear RX error events in the DW1000 status register. */
	            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <main+0xd0>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	200f      	movs	r0, #15
 8001cfe:	f7ff fab5 	bl	800126c <dwt_write32bitoffsetreg>
	        }
	    }
 8001d02:	e7b7      	b.n	8001c74 <main+0x2c>
 8001d04:	20000018 	.word	0x20000018
 8001d08:	20000080 	.word	0x20000080
 8001d0c:	20000100 	.word	0x20000100
 8001d10:	2405d000 	.word	0x2405d000
 8001d14:	20000104 	.word	0x20000104
 8001d18:	24059000 	.word	0x24059000

08001d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d22:	e003      	b.n	8001d2c <LoopCopyDataInit>

08001d24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001d26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d2a:	3104      	adds	r1, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001d30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d34:	d3f6      	bcc.n	8001d24 <CopyDataInit>
	ldr	r2, =_sbss
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001d38:	e002      	b.n	8001d40 <LoopFillZerobss>

08001d3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d3c:	f842 3b04 	str.w	r3, [r2], #4

08001d40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001d42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d44:	d3f9      	bcc.n	8001d3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d46:	f000 f83b 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f000 f8f3 	bl	8001f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4e:	f7ff ff7b 	bl	8001c48 <main>
	bx	lr
 8001d52:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d54:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8001d58:	08002054 	.word	0x08002054
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d60:	20000028 	.word	0x20000028
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8001d64:	20000028 	.word	0x20000028
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d68:	2000010c 	.word	0x2000010c

08001d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_2_IRQHandler>
	...

08001d70 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001d80:	e7fe      	b.n	8001d80 <HardFault_Handler+0x4>
 8001d82:	bf00      	nop

08001d84 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>
 8001d8a:	bf00      	nop

08001d8c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001d90:	e7fe      	b.n	8001d90 <BusFault_Handler+0x4>
 8001d92:	bf00      	nop

08001d94 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>
 8001d9a:	bf00      	nop

08001d9c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dc4:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <SystemInit+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <SystemInit+0x5c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001dd0:	4912      	ldr	r1, [pc, #72]	; (8001e1c <SystemInit+0x5c>)
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <SystemInit+0x5c>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <SystemInit+0x60>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ddc:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <SystemInit+0x5c>)
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <SystemInit+0x5c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <SystemInit+0x5c>)
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <SystemInit+0x5c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <SystemInit+0x5c>)
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <SystemInit+0x5c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SystemInit+0x5c>)
 8001e06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e0a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001e0c:	f000 f80c 	bl	8001e28 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SystemInit+0x64>)
 8001e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e16:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	f8ff0000 	.word	0xf8ff0000
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001e2c:	f000 f802 	bl	8001e34 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e42:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <SetSysClockTo72+0x38>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e6a:	d1f0      	bne.n	8001e4e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	e001      	b.n	8001e82 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d14b      	bne.n	8001f20 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <SetSysClockTo72+0xfc>)
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <SetSysClockTo72+0xfc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f043 0310 	orr.w	r3, r3, #16
 8001e92:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <SetSysClockTo72+0xfc>)
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <SetSysClockTo72+0xfc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <SetSysClockTo72+0xfc>)
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <SetSysClockTo72+0xfc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001ed2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001ede:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001eec:	bf00      	nop
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f9      	beq.n	8001eee <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001f12:	bf00      	nop
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SetSysClockTo72+0xf8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d1f9      	bne.n	8001f14 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40022000 	.word	0x40022000

08001f34 <__libc_init_array>:
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <__libc_init_array+0x3c>)
 8001f36:	b570      	push	{r4, r5, r6, lr}
 8001f38:	461e      	mov	r6, r3
 8001f3a:	4c0e      	ldr	r4, [pc, #56]	; (8001f74 <__libc_init_array+0x40>)
 8001f3c:	2500      	movs	r5, #0
 8001f3e:	1ae4      	subs	r4, r4, r3
 8001f40:	10a4      	asrs	r4, r4, #2
 8001f42:	42a5      	cmp	r5, r4
 8001f44:	d004      	beq.n	8001f50 <__libc_init_array+0x1c>
 8001f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f4a:	4798      	blx	r3
 8001f4c:	3501      	adds	r5, #1
 8001f4e:	e7f8      	b.n	8001f42 <__libc_init_array+0xe>
 8001f50:	f000 f816 	bl	8001f80 <_init>
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <__libc_init_array+0x44>)
 8001f56:	4c09      	ldr	r4, [pc, #36]	; (8001f7c <__libc_init_array+0x48>)
 8001f58:	461e      	mov	r6, r3
 8001f5a:	1ae4      	subs	r4, r4, r3
 8001f5c:	10a4      	asrs	r4, r4, #2
 8001f5e:	2500      	movs	r5, #0
 8001f60:	42a5      	cmp	r5, r4
 8001f62:	d004      	beq.n	8001f6e <__libc_init_array+0x3a>
 8001f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f68:	4798      	blx	r3
 8001f6a:	3501      	adds	r5, #1
 8001f6c:	e7f8      	b.n	8001f60 <__libc_init_array+0x2c>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	0800204c 	.word	0x0800204c
 8001f74:	0800204c 	.word	0x0800204c
 8001f78:	0800204c 	.word	0x0800204c
 8001f7c:	08002050 	.word	0x08002050

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
