
C:\Users\Hugo\Atollic\TrueSTUDIO\ARM_workspace_8.0\TX_Simple\Debug\TX_Simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000034  20000000  08002144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000034  08002178  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000090  08002178  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  9 .debug_info   000088a5  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a4a  00000000  00000000  00028902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009e8  00000000  00000000  0002a350  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003b8d  00000000  00000000  0002b610  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002dde  00000000  00000000  0002f19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031f7b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002654  00000000  00000000  00031ff8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002064 	.word	0x08002064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002064 	.word	0x08002064

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000164:	4a03      	ldr	r2, [pc, #12]	; (8000174 <EXTI_ClearITPendingBit+0x18>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6153      	str	r3, [r2, #20]
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	40010400 	.word	0x40010400

08000178 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 8000184:	4b09      	ldr	r3, [pc, #36]	; (80001ac <FLASH_SetLatency+0x34>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000190:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4313      	orrs	r3, r2
 8000198:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 800019a:	4a04      	ldr	r2, [pc, #16]	; (80001ac <FLASH_SetLatency+0x34>)
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	6013      	str	r3, [r2, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	40022000 	.word	0x40022000

080001b0 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80001b8:	4a08      	ldr	r2, [pc, #32]	; (80001dc <FLASH_PrefetchBufferCmd+0x2c>)
 80001ba:	4b08      	ldr	r3, [pc, #32]	; (80001dc <FLASH_PrefetchBufferCmd+0x2c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f023 0310 	bic.w	r3, r3, #16
 80001c2:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80001c4:	4905      	ldr	r1, [pc, #20]	; (80001dc <FLASH_PrefetchBufferCmd+0x2c>)
 80001c6:	4b05      	ldr	r3, [pc, #20]	; (80001dc <FLASH_PrefetchBufferCmd+0x2c>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4313      	orrs	r3, r2
 80001ce:	600b      	str	r3, [r1, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	40022000 	.word	0x40022000

080001e0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b089      	sub	sp, #36	; 0x24
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
 80001f2:	2300      	movs	r3, #0
 80001f4:	61bb      	str	r3, [r7, #24]
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	78db      	ldrb	r3, [r3, #3]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	78db      	ldrb	r3, [r3, #3]
 8000210:	f003 0310 	and.w	r3, r3, #16
 8000214:	2b00      	cmp	r3, #0
 8000216:	d005      	beq.n	8000224 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	789b      	ldrb	r3, [r3, #2]
 800021c:	461a      	mov	r2, r3
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	4313      	orrs	r3, r2
 8000222:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	d044      	beq.n	80002b8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
 8000238:	e038      	b.n	80002ac <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800023a:	2201      	movs	r2, #1
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d126      	bne.n	80002a6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000288:	2201      	movs	r2, #1
 800028a:	69bb      	ldr	r3, [r7, #24]
 800028c:	409a      	lsls	r2, r3
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	615a      	str	r2, [r3, #20]
 8000292:	e008      	b.n	80002a6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d104      	bne.n	80002a6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800029c:	2201      	movs	r2, #1
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	409a      	lsls	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	3301      	adds	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d9c3      	bls.n	800023a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	697a      	ldr	r2, [r7, #20]
 80002b6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	2bff      	cmp	r3, #255	; 0xff
 80002be:	d946      	bls.n	800034e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
 80002ca:	e03a      	b.n	8000342 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002cc:	69bb      	ldr	r3, [r7, #24]
 80002ce:	3308      	adds	r3, #8
 80002d0:	2201      	movs	r2, #1
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4013      	ands	r3, r2
 80002e2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80002e4:	693a      	ldr	r2, [r7, #16]
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d127      	bne.n	800033c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80002ec:	69bb      	ldr	r3, [r7, #24]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80002f2:	220f      	movs	r2, #15
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	43db      	mvns	r3, r3
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	4013      	ands	r3, r2
 8000304:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000306:	69fa      	ldr	r2, [r7, #28]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4313      	orrs	r3, r2
 8000312:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	78db      	ldrb	r3, [r3, #3]
 8000318:	2b28      	cmp	r3, #40	; 0x28
 800031a:	d105      	bne.n	8000328 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	3308      	adds	r3, #8
 8000320:	2201      	movs	r2, #1
 8000322:	409a      	lsls	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	78db      	ldrb	r3, [r3, #3]
 800032c:	2b48      	cmp	r3, #72	; 0x48
 800032e:	d105      	bne.n	800033c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	3308      	adds	r3, #8
 8000334:	2201      	movs	r2, #1
 8000336:	409a      	lsls	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	3301      	adds	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d9c1      	bls.n	80002cc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	605a      	str	r2, [r3, #4]
  }
}
 800034e:	bf00      	nop
 8000350:	3724      	adds	r7, #36	; 0x24
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689a      	ldr	r2, [r3, #8]
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	4013      	ands	r3, r2
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000374:	2301      	movs	r3, #1
 8000376:	73fb      	strb	r3, [r7, #15]
 8000378:	e001      	b.n	800037e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800037e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000380:	4618      	mov	r0, r3
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr

0800038a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	460b      	mov	r3, r1
 8000394:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000396:	887a      	ldrh	r2, [r7, #2]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	611a      	str	r2, [r3, #16]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	460b      	mov	r3, r1
 80003b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80003b2:	887a      	ldrh	r2, [r7, #2]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	615a      	str	r2, [r3, #20]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80003d0:	2300      	movs	r3, #0
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	da03      	bge.n	80003ee <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <GPIO_PinRemapConfig+0xdc>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e002      	b.n	80003f4 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80003ee:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <GPIO_PinRemapConfig+0xdc>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	f003 030f 	and.w	r3, r3, #15
 80003fc:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	b29b      	uxth	r3, r3
 8000402:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800040a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800040e:	d10a      	bne.n	8000426 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000416:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000418:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <GPIO_PinRemapConfig+0xdc>)
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <GPIO_PinRemapConfig+0xdc>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000422:	6053      	str	r3, [r2, #4]
 8000424:	e021      	b.n	800046a <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800042c:	2b00      	cmp	r3, #0
 800042e:	d00e      	beq.n	800044e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000430:	2203      	movs	r2, #3
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	43db      	mvns	r3, r3
 800043e:	697a      	ldr	r2, [r7, #20]
 8000440:	4013      	ands	r3, r2
 8000442:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e00d      	b.n	800046a <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	0d5b      	lsrs	r3, r3, #21
 8000452:	011b      	lsls	r3, r3, #4
 8000454:	693a      	ldr	r2, [r7, #16]
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	43db      	mvns	r3, r3
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	4013      	ands	r3, r2
 8000460:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000468:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d008      	beq.n	8000482 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	0d5b      	lsrs	r3, r3, #21
 8000474:	011b      	lsls	r3, r3, #4
 8000476:	693a      	ldr	r2, [r7, #16]
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	4313      	orrs	r3, r2
 8000480:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b00      	cmp	r3, #0
 8000486:	da03      	bge.n	8000490 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000488:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <GPIO_PinRemapConfig+0xdc>)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800048e:	e002      	b.n	8000496 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000490:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <GPIO_PinRemapConfig+0xdc>)
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	6053      	str	r3, [r2, #4]
}
 8000496:	bf00      	nop
 8000498:	371c      	adds	r7, #28
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40010000 	.word	0x40010000

080004a4 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004a8:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <RCC_DeInit+0x54>)
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <RCC_DeInit+0x54>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004b4:	4910      	ldr	r1, [pc, #64]	; (80004f8 <RCC_DeInit+0x54>)
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <RCC_DeInit+0x54>)
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <RCC_DeInit+0x58>)
 80004bc:	4013      	ands	r3, r2
 80004be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <RCC_DeInit+0x54>)
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <RCC_DeInit+0x54>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004d0:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <RCC_DeInit+0x54>)
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <RCC_DeInit+0x54>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <RCC_DeInit+0x54>)
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <RCC_DeInit+0x54>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <RCC_DeInit+0x54>)
 80004ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004ee:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	f8ff0000 	.word	0xf8ff0000

08000500 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <RCC_HSEConfig+0x58>)
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <RCC_HSEConfig+0x58>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000512:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <RCC_HSEConfig+0x58>)
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <RCC_HSEConfig+0x58>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051e:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000526:	d003      	beq.n	8000530 <RCC_HSEConfig+0x30>
 8000528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800052c:	d007      	beq.n	800053e <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 800052e:	e00d      	b.n	800054c <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <RCC_HSEConfig+0x58>)
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <RCC_HSEConfig+0x58>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800053a:	6013      	str	r3, [r2, #0]
      break;
 800053c:	e006      	b.n	800054c <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <RCC_HSEConfig+0x58>)
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <RCC_HSEConfig+0x58>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000548:	6013      	str	r3, [r2, #0]
      break;
 800054a:	bf00      	nop
  }
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000566:	2300      	movs	r3, #0
 8000568:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 800056a:	2300      	movs	r3, #0
 800056c:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800056e:	2031      	movs	r0, #49	; 0x31
 8000570:	f000 fa0c 	bl	800098c <RCC_GetFlagStatus>
 8000574:	4603      	mov	r3, r0
 8000576:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000584:	d002      	beq.n	800058c <RCC_WaitForHSEStartUp+0x30>
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f0      	beq.n	800056e <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800058c:	2031      	movs	r0, #49	; 0x31
 800058e:	f000 f9fd 	bl	800098c <RCC_GetFlagStatus>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000598:	2301      	movs	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	e001      	b.n	80005a2 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <RCC_PLLConfig+0x38>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80005c6:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <RCC_PLLConfig+0x38>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6053      	str	r3, [r2, #4]
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <RCC_PLLCmd+0x1c>)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	42420060 	.word	0x42420060

08000608 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <RCC_SYSCLKConfig+0x34>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f023 0303 	bic.w	r3, r3, #3
 8000620:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <RCC_SYSCLKConfig+0x34>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6053      	str	r3, [r2, #4]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <RCC_GetSYSCLKSource+0x18>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 030c 	and.w	r3, r3, #12
 800064e:	b2db      	uxtb	r3, r3
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000

0800065c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <RCC_HCLKConfig+0x34>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000674:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4313      	orrs	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <RCC_HCLKConfig+0x34>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6053      	str	r3, [r2, #4]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <RCC_PCLK1Config+0x34>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ac:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <RCC_PCLK1Config+0x34>)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6053      	str	r3, [r2, #4]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <RCC_PCLK2Config+0x34>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80006e4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <RCC_PCLK2Config+0x34>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000

08000704 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <RCC_ADCCLKConfig+0x34>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <RCC_ADCCLKConfig+0x34>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	6053      	str	r3, [r2, #4]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000754:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 030c 	and.w	r3, r3, #12
 800075c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d007      	beq.n	8000774 <RCC_GetClocksFreq+0x38>
 8000764:	2b08      	cmp	r3, #8
 8000766:	d009      	beq.n	800077c <RCC_GetClocksFreq+0x40>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d133      	bne.n	80007d4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a47      	ldr	r2, [pc, #284]	; (800088c <RCC_GetClocksFreq+0x150>)
 8000770:	601a      	str	r2, [r3, #0]
      break;
 8000772:	e033      	b.n	80007dc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a45      	ldr	r2, [pc, #276]	; (800088c <RCC_GetClocksFreq+0x150>)
 8000778:	601a      	str	r2, [r3, #0]
      break;
 800077a:	e02f      	b.n	80007dc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800077c:	4b42      	ldr	r3, [pc, #264]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000784:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000786:	4b40      	ldr	r3, [pc, #256]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	0c9b      	lsrs	r3, r3, #18
 8000794:	3302      	adds	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d106      	bne.n	80007ac <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	4a3b      	ldr	r2, [pc, #236]	; (8000890 <RCC_GetClocksFreq+0x154>)
 80007a2:	fb02 f203 	mul.w	r2, r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007aa:	e017      	b.n	80007dc <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d006      	beq.n	80007c6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <RCC_GetClocksFreq+0x154>)
 80007bc:	fb02 f203 	mul.w	r2, r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
      break;
 80007c4:	e00a      	b.n	80007dc <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	4a30      	ldr	r2, [pc, #192]	; (800088c <RCC_GetClocksFreq+0x150>)
 80007ca:	fb02 f203 	mul.w	r2, r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
      break;
 80007d2:	e003      	b.n	80007dc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a2d      	ldr	r2, [pc, #180]	; (800088c <RCC_GetClocksFreq+0x150>)
 80007d8:	601a      	str	r2, [r3, #0]
      break;
 80007da:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007e4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	091b      	lsrs	r3, r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80007ec:	4a29      	ldr	r2, [pc, #164]	; (8000894 <RCC_GetClocksFreq+0x158>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	40da      	lsrs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800080c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <RCC_GetClocksFreq+0x158>)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	40da      	lsrs	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000834:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	0adb      	lsrs	r3, r3, #11
 800083a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800083c:	4a15      	ldr	r2, [pc, #84]	; (8000894 <RCC_GetClocksFreq+0x158>)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	40da      	lsrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <RCC_GetClocksFreq+0x14c>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	0b9b      	lsrs	r3, r3, #14
 8000862:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <RCC_GetClocksFreq+0x15c>)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	fbb2 f2f3 	udiv	r2, r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	611a      	str	r2, [r3, #16]
}
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000
 800088c:	007a1200 	.word	0x007a1200
 8000890:	003d0900 	.word	0x003d0900
 8000894:	20000000 	.word	0x20000000
 8000898:	20000010 	.word	0x20000010

0800089c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008ae:	4909      	ldr	r1, [pc, #36]	; (80008d4 <RCC_APB2PeriphClockCmd+0x38>)
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <RCC_APB2PeriphClockCmd+0x38>)
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008ba:	e006      	b.n	80008ca <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008bc:	4905      	ldr	r1, [pc, #20]	; (80008d4 <RCC_APB2PeriphClockCmd+0x38>)
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <RCC_APB2PeriphClockCmd+0x38>)
 80008c0:	699a      	ldr	r2, [r3, #24]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4013      	ands	r3, r2
 80008c8:	618b      	str	r3, [r1, #24]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40021000 	.word	0x40021000

080008d8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008ea:	4909      	ldr	r1, [pc, #36]	; (8000910 <RCC_APB1PeriphClockCmd+0x38>)
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <RCC_APB1PeriphClockCmd+0x38>)
 80008ee:	69da      	ldr	r2, [r3, #28]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80008f6:	e006      	b.n	8000906 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008f8:	4905      	ldr	r1, [pc, #20]	; (8000910 <RCC_APB1PeriphClockCmd+0x38>)
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <RCC_APB1PeriphClockCmd+0x38>)
 80008fc:	69da      	ldr	r2, [r3, #28]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	43db      	mvns	r3, r3
 8000902:	4013      	ands	r3, r2
 8000904:	61cb      	str	r3, [r1, #28]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000

08000914 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000926:	4909      	ldr	r1, [pc, #36]	; (800094c <RCC_APB2PeriphResetCmd+0x38>)
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <RCC_APB2PeriphResetCmd+0x38>)
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4313      	orrs	r3, r2
 8000930:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000932:	e006      	b.n	8000942 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000934:	4905      	ldr	r1, [pc, #20]	; (800094c <RCC_APB2PeriphResetCmd+0x38>)
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <RCC_APB2PeriphResetCmd+0x38>)
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	43db      	mvns	r3, r3
 800093e:	4013      	ands	r3, r2
 8000940:	60cb      	str	r3, [r1, #12]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	40021000 	.word	0x40021000

08000950 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <RCC_APB1PeriphResetCmd+0x38>)
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <RCC_APB1PeriphResetCmd+0x38>)
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4313      	orrs	r3, r2
 800096c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800096e:	e006      	b.n	800097e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000970:	4905      	ldr	r1, [pc, #20]	; (8000988 <RCC_APB1PeriphResetCmd+0x38>)
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <RCC_APB1PeriphResetCmd+0x38>)
 8000974:	691a      	ldr	r2, [r3, #16]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	43db      	mvns	r3, r3
 800097a:	4013      	ands	r3, r2
 800097c:	610b      	str	r3, [r1, #16]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000

0800098c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	095b      	lsrs	r3, r3, #5
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d103      	bne.n	80009b8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <RCC_GetFlagStatus+0x70>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e009      	b.n	80009cc <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d103      	bne.n	80009c6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <RCC_GetFlagStatus+0x70>)
 80009c0:	6a1b      	ldr	r3, [r3, #32]
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e002      	b.n	80009cc <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <RCC_GetFlagStatus+0x70>)
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	fa22 f303 	lsr.w	r3, r2, r3
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80009e4:	2301      	movs	r3, #1
 80009e6:	74fb      	strb	r3, [r7, #19]
 80009e8:	e001      	b.n	80009ee <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <SPI_I2S_DeInit+0x68>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d10a      	bne.n	8000a26 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000a10:	2101      	movs	r1, #1
 8000a12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a16:	f7ff ff7d 	bl	8000914 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a20:	f7ff ff78 	bl	8000914 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000a24:	e01c      	b.n	8000a60 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <SPI_I2S_DeInit+0x6c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d10a      	bne.n	8000a44 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000a2e:	2101      	movs	r1, #1
 8000a30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a34:	f7ff ff8c 	bl	8000950 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a3e:	f7ff ff87 	bl	8000950 <RCC_APB1PeriphResetCmd>
}
 8000a42:	e00d      	b.n	8000a60 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SPI_I2S_DeInit+0x70>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d109      	bne.n	8000a60 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a52:	f7ff ff7d 	bl	8000950 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000a56:	2100      	movs	r1, #0
 8000a58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a5c:	f7ff ff78 	bl	8000950 <RCC_APB1PeriphResetCmd>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40003800 	.word	0x40003800
 8000a70:	40003c00 	.word	0x40003c00

08000a74 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000a8e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	881a      	ldrh	r2, [r3, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	885b      	ldrh	r3, [r3, #2]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	89fa      	ldrh	r2, [r7, #14]
 8000ad6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	8b9b      	ldrh	r3, [r3, #28]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	8a1a      	ldrh	r2, [r3, #16]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	821a      	strh	r2, [r3, #16]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000b1c:	e007      	b.n	8000b2e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	801a      	strh	r2, [r3, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	819a      	strh	r2, [r3, #12]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	899b      	ldrh	r3, [r3, #12]
 8000b60:	b29b      	uxth	r3, r3
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	889b      	ldrh	r3, [r3, #4]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000b8e:	e007      	b.n	8000ba0 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	889b      	ldrh	r3, [r3, #4]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f023 0304 	bic.w	r3, r3, #4
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	809a      	strh	r2, [r3, #4]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	891b      	ldrh	r3, [r3, #8]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e001      	b.n	8000bd4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
    uint16 otp_addr = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
 8000bf2:	4b56      	ldr	r3, [pc, #344]	; (8000d4c <dwt_initialise+0x16c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	745a      	strb	r2, [r3, #17]
    pdw1000local->wait4resp = 0;
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <dwt_initialise+0x16c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	769a      	strb	r2, [r3, #26]
    pdw1000local->sleep_mode = 0;
 8000c02:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <dwt_initialise+0x16c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	831a      	strh	r2, [r3, #24]

    pdw1000local->cbTxDone = NULL;
 8000c0a:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <dwt_initialise+0x16c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000c12:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <dwt_initialise+0x16c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000c1a:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <dwt_initialise+0x16c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000c22:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <dwt_initialise+0x16c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000c2a:	f000 f893 	bl	8000d54 <dwt_readdevid>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <dwt_initialise+0x170>)
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d002      	beq.n	8000c3c <dwt_initialise+0x5c>
    {
        return DWT_ERROR ;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e082      	b.n	8000d42 <dwt_initialise+0x162>
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
 8000c3c:	f000 fcec 	bl	8001618 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 fbe9 	bl	8001418 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000c46:	2204      	movs	r2, #4
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2024      	movs	r0, #36	; 0x24
 8000c4c:	f000 fb2d 	bl	80012aa <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000c50:	201e      	movs	r0, #30
 8000c52:	f000 fb80 	bl	8001356 <_dwt_otpread>
 8000c56:	4603      	mov	r3, r0
 8000c58:	82fb      	strh	r3, [r7, #22]
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
 8000c5a:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <dwt_initialise+0x16c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	8afa      	ldrh	r2, [r7, #22]
 8000c60:	0a12      	lsrs	r2, r2, #8
 8000c62:	b292      	uxth	r2, r2
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	725a      	strb	r2, [r3, #9]

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000c68:	2004      	movs	r0, #4
 8000c6a:	f000 fb74 	bl	8001356 <_dwt_otpread>
 8000c6e:	6138      	str	r0, [r7, #16]
    if((ldo_tune & 0xFF) != 0)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00d      	beq.n	8000c94 <dwt_initialise+0xb4>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
 8000c78:	2202      	movs	r2, #2
 8000c7a:	2112      	movs	r1, #18
 8000c7c:	202d      	movs	r0, #45	; 0x2d
 8000c7e:	f000 fb14 	bl	80012aa <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <dwt_initialise+0x16c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a31      	ldr	r2, [pc, #196]	; (8000d4c <dwt_initialise+0x16c>)
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	8b12      	ldrh	r2, [r2, #24]
 8000c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c90:	b292      	uxth	r2, r2
 8000c92:	831a      	strh	r2, [r3, #24]
    }

    // Load Part and Lot ID from OTP
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <dwt_initialise+0x16c>)
 8000c96:	681c      	ldr	r4, [r3, #0]
 8000c98:	2006      	movs	r0, #6
 8000c9a:	f000 fb5c 	bl	8001356 <_dwt_otpread>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6023      	str	r3, [r4, #0]
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <dwt_initialise+0x16c>)
 8000ca4:	681c      	ldr	r4, [r3, #0]
 8000ca6:	2007      	movs	r0, #7
 8000ca8:	f000 fb55 	bl	8001356 <_dwt_otpread>
 8000cac:	4603      	mov	r3, r0
 8000cae:	6063      	str	r3, [r4, #4]

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    pdw1000local->init_xtrim = otp_addr & 0x1F;
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <dwt_initialise+0x16c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	8afa      	ldrh	r2, [r7, #22]
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	f002 021f 	and.w	r2, r2, #31
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	741a      	strb	r2, [r3, #16]
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <dwt_initialise+0x16c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	7c1b      	ldrb	r3, [r3, #16]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <dwt_initialise+0xf2>
    {
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <dwt_initialise+0x16c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2210      	movs	r2, #16
 8000cd0:	741a      	strb	r2, [r3, #16]
    }
    // Configure XTAL trim
    dwt_setxtaltrim(pdw1000local->init_xtrim);
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <dwt_initialise+0x16c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	7c1b      	ldrb	r3, [r3, #16]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcc3 	bl	8001664 <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00b      	beq.n	8000d00 <dwt_initialise+0x120>
    {
        _dwt_loaducodefromrom();
 8000ce8:	f000 fb82 	bl	80013f0 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <dwt_initialise+0x16c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <dwt_initialise+0x16c>)
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	8b12      	ldrh	r2, [r2, #24]
 8000cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	831a      	strh	r2, [r3, #24]
 8000cfe:	e00f      	b.n	8000d20 <dwt_initialise+0x140>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000d00:	2105      	movs	r1, #5
 8000d02:	2036      	movs	r0, #54	; 0x36
 8000d04:	f000 fab4 	bl	8001270 <dwt_read16bitoffsetreg>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	81fb      	strh	r3, [r7, #14]
        rega &= 0xFDFF ; // Clear LDERUN bit
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d12:	81fb      	strh	r3, [r7, #14]
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	461a      	mov	r2, r3
 8000d18:	2105      	movs	r1, #5
 8000d1a:	2036      	movs	r0, #54	; 0x36
 8000d1c:	f000 fad8 	bl	80012d0 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fb79 	bl	8001418 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000d26:	2200      	movs	r2, #0
 8000d28:	210a      	movs	r1, #10
 8000d2a:	202c      	movs	r0, #44	; 0x2c
 8000d2c:	f000 fabd 	bl	80012aa <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <dwt_initialise+0x16c>)
 8000d32:	681c      	ldr	r4, [r3, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	2004      	movs	r0, #4
 8000d38:	f000 fa73 	bl	8001222 <dwt_read32bitoffsetreg>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	6163      	str	r3, [r4, #20]

    return DWT_SUCCESS ;
 8000d40:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000d42:	4618      	mov	r0, r3
 8000d44:	371c      	adds	r7, #28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000014 	.word	0x20000014
 8000d50:	deca0130 	.word	0xdeca0130

08000d54 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 fa61 	bl	8001222 <dwt_read32bitoffsetreg>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	795b      	ldrb	r3, [r3, #5]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4ba1      	ldr	r3, [pc, #644]	; (800100c <dwt_configure+0x2a4>)
 8000d86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d8a:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	785b      	ldrb	r3, [r3, #1]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000d94:	7cfb      	ldrb	r3, [r7, #19]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d002      	beq.n	8000da0 <dwt_configure+0x38>
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d101      	bne.n	8000da4 <dwt_configure+0x3c>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <dwt_configure+0x3e>
 8000da4:	2300      	movs	r3, #0
 8000da6:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	79db      	ldrb	r3, [r3, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d10b      	bne.n	8000dc8 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000db0:	4b97      	ldr	r3, [pc, #604]	; (8001010 <dwt_configure+0x2a8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a96      	ldr	r2, [pc, #600]	; (8001010 <dwt_configure+0x2a8>)
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	6952      	ldr	r2, [r2, #20]
 8000dba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000dbe:	615a      	str	r2, [r3, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000dc0:	8abb      	ldrh	r3, [r7, #20]
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	82bb      	strh	r3, [r7, #20]
 8000dc6:	e007      	b.n	8000dd8 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000dc8:	4b91      	ldr	r3, [pc, #580]	; (8001010 <dwt_configure+0x2a8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a90      	ldr	r2, [pc, #576]	; (8001010 <dwt_configure+0x2a8>)
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	6952      	ldr	r2, [r2, #20]
 8000dd2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000dd6:	615a      	str	r2, [r3, #20]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000dd8:	4b8d      	ldr	r3, [pc, #564]	; (8001010 <dwt_configure+0x2a8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7a12      	ldrb	r2, [r2, #8]
 8000de0:	721a      	strb	r2, [r3, #8]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000de2:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <dwt_configure+0x2a8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a8a      	ldr	r2, [pc, #552]	; (8001010 <dwt_configure+0x2a8>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	6952      	ldr	r2, [r2, #20]
 8000dec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000df0:	615a      	str	r2, [r3, #20]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000df2:	4b87      	ldr	r3, [pc, #540]	; (8001010 <dwt_configure+0x2a8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a86      	ldr	r2, [pc, #536]	; (8001010 <dwt_configure+0x2a8>)
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	6951      	ldr	r1, [r2, #20]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	7a12      	ldrb	r2, [r2, #8]
 8000e00:	0412      	lsls	r2, r2, #16
 8000e02:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000e06:	430a      	orrs	r2, r1
 8000e08:	615a      	str	r2, [r3, #20]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8000e0a:	4b81      	ldr	r3, [pc, #516]	; (8001010 <dwt_configure+0x2a8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	461a      	mov	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	2004      	movs	r0, #4
 8000e16:	f000 fa77 	bl	8001308 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8000e1a:	8abb      	ldrh	r3, [r7, #20]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f642 0104 	movw	r1, #10244	; 0x2804
 8000e22:	202e      	movs	r0, #46	; 0x2e
 8000e24:	f000 fa54 	bl	80012d0 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000e28:	7cbb      	ldrb	r3, [r7, #18]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fac0 	bl	80013b0 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000e30:	7cfb      	ldrb	r3, [r7, #19]
 8000e32:	4a78      	ldr	r2, [pc, #480]	; (8001014 <dwt_configure+0x2ac>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b77      	ldr	r3, [pc, #476]	; (8001018 <dwt_configure+0x2b0>)
 8000e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2107      	movs	r1, #7
 8000e42:	202b      	movs	r0, #43	; 0x2b
 8000e44:	f000 fa60 	bl	8001308 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000e48:	7cfb      	ldrb	r3, [r7, #19]
 8000e4a:	4a72      	ldr	r2, [pc, #456]	; (8001014 <dwt_configure+0x2ac>)
 8000e4c:	5cd3      	ldrb	r3, [r2, r3]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b72      	ldr	r3, [pc, #456]	; (800101c <dwt_configure+0x2b4>)
 8000e52:	5c9b      	ldrb	r3, [r3, r2]
 8000e54:	461a      	mov	r2, r3
 8000e56:	210b      	movs	r1, #11
 8000e58:	202b      	movs	r0, #43	; 0x2b
 8000e5a:	f000 fa26 	bl	80012aa <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000e5e:	7c7b      	ldrb	r3, [r7, #17]
 8000e60:	4a6f      	ldr	r2, [pc, #444]	; (8001020 <dwt_configure+0x2b8>)
 8000e62:	5cd3      	ldrb	r3, [r2, r3]
 8000e64:	461a      	mov	r2, r3
 8000e66:	210b      	movs	r1, #11
 8000e68:	2028      	movs	r0, #40	; 0x28
 8000e6a:	f000 fa1e 	bl	80012aa <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000e6e:	7cfb      	ldrb	r3, [r7, #19]
 8000e70:	4a68      	ldr	r2, [pc, #416]	; (8001014 <dwt_configure+0x2ac>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b6b      	ldr	r3, [pc, #428]	; (8001024 <dwt_configure+0x2bc>)
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	210c      	movs	r1, #12
 8000e80:	2028      	movs	r0, #40	; 0x28
 8000e82:	f000 fa41 	bl	8001308 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	79db      	ldrb	r3, [r3, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	799b      	ldrb	r3, [r3, #6]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4a65      	ldr	r2, [pc, #404]	; (8001028 <dwt_configure+0x2c0>)
 8000e94:	0043      	lsls	r3, r0, #1
 8000e96:	440b      	add	r3, r1
 8000e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	2027      	movs	r0, #39	; 0x27
 8000ea2:	f000 fa15 	bl	80012d0 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000ea6:	7cbb      	ldrb	r3, [r7, #18]
 8000ea8:	4a60      	ldr	r2, [pc, #384]	; (800102c <dwt_configure+0x2c4>)
 8000eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	2027      	movs	r0, #39	; 0x27
 8000eb4:	f000 fa0c 	bl	80012d0 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	79db      	ldrb	r3, [r3, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000ec0:	2264      	movs	r2, #100	; 0x64
 8000ec2:	2106      	movs	r1, #6
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 fa03 	bl	80012d0 <dwt_write16bitoffsetreg>
 8000eca:	e018      	b.n	8000efe <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d10a      	bne.n	8000eea <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	2106      	movs	r1, #6
 8000ed8:	2027      	movs	r0, #39	; 0x27
 8000eda:	f000 f9f9 	bl	80012d0 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000ede:	2210      	movs	r2, #16
 8000ee0:	2126      	movs	r1, #38	; 0x26
 8000ee2:	2027      	movs	r0, #39	; 0x27
 8000ee4:	f000 f9e1 	bl	80012aa <dwt_write8bitoffsetreg>
 8000ee8:	e009      	b.n	8000efe <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000eea:	2220      	movs	r2, #32
 8000eec:	2106      	movs	r1, #6
 8000eee:	2027      	movs	r0, #39	; 0x27
 8000ef0:	f000 f9ee 	bl	80012d0 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000ef4:	2228      	movs	r2, #40	; 0x28
 8000ef6:	2126      	movs	r1, #38	; 0x26
 8000ef8:	2027      	movs	r0, #39	; 0x27
 8000efa:	f000 f9d6 	bl	80012aa <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000efe:	7cbb      	ldrb	r3, [r7, #18]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	78d2      	ldrb	r2, [r2, #3]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <dwt_configure+0x2c8>)
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	461a      	mov	r2, r3
 8000f12:	2108      	movs	r1, #8
 8000f14:	2027      	movs	r0, #39	; 0x27
 8000f16:	f000 f9f7 	bl	8001308 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	895b      	ldrh	r3, [r3, #10]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f241 0241 	movw	r2, #4161	; 0x1041
 8000f28:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	895b      	ldrh	r3, [r3, #10]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2120      	movs	r1, #32
 8000f32:	2027      	movs	r0, #39	; 0x27
 8000f34:	f000 f9cc 	bl	80012d0 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <dwt_configure+0x2cc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	210c      	movs	r1, #12
 8000f40:	2023      	movs	r0, #35	; 0x23
 8000f42:	f000 f9e1 	bl	8001308 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000f46:	7cbb      	ldrb	r3, [r7, #18]
 8000f48:	4a3a      	ldr	r2, [pc, #232]	; (8001034 <dwt_configure+0x2cc>)
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	889b      	ldrh	r3, [r3, #4]
 8000f50:	461a      	mov	r2, r3
 8000f52:	2104      	movs	r1, #4
 8000f54:	2023      	movs	r0, #35	; 0x23
 8000f56:	f000 f9bb 	bl	80012d0 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	799b      	ldrb	r3, [r3, #6]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00d      	beq.n	8000f7e <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	79db      	ldrb	r3, [r3, #7]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <dwt_configure+0x2d0>)
 8000f6a:	5c9b      	ldrb	r3, [r3, r2]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2021      	movs	r0, #33	; 0x21
 8000f72:	f000 f99a 	bl	80012aa <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000f76:	2303      	movs	r3, #3
 8000f78:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000f8a:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	049b      	lsls	r3, r3, #18
 8000f92:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000f96:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	051b      	lsls	r3, r3, #20
 8000f9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000fa0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000fa2:	7dbb      	ldrb	r3, [r7, #22]
 8000fa4:	045b      	lsls	r3, r3, #17
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000faa:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	059b      	lsls	r3, r3, #22
 8000fb2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000fb6:	4313      	orrs	r3, r2
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	7952      	ldrb	r2, [r2, #5]
 8000fbc:	06d2      	lsls	r2, r2, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	201f      	movs	r0, #31
 8000fc8:	f000 f99e 	bl	8001308 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <dwt_configure+0x2a8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	7891      	ldrb	r1, [r2, #2]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	7852      	ldrb	r2, [r2, #1]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	0411      	lsls	r1, r2, #16
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	79d2      	ldrb	r2, [r2, #7]
 8000fe2:	0352      	lsls	r2, r2, #13
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <dwt_configure+0x2a8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f000 f988 	bl	8001308 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ff8:	2242      	movs	r2, #66	; 0x42
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	200d      	movs	r0, #13
 8000ffe:	f000 f954 	bl	80012aa <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	08002108 	.word	0x08002108
 8001010:	20000014 	.word	0x20000014
 8001014:	08002088 	.word	0x08002088
 8001018:	080020a8 	.word	0x080020a8
 800101c:	080020c0 	.word	0x080020c0
 8001020:	080020c8 	.word	0x080020c8
 8001024:	08002090 	.word	0x08002090
 8001028:	080020d8 	.word	0x080020d8
 800102c:	080020e4 	.word	0x080020e4
 8001030:	080020e8 	.word	0x080020e8
 8001034:	080020cc 	.word	0x080020cc
 8001038:	080020d4 	.word	0x080020d4

0800103c <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	80fb      	strh	r3, [r7, #6]
 8001048:	4613      	mov	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800104c:	88ba      	ldrh	r2, [r7, #4]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	4413      	add	r3, r2
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	dc09      	bgt.n	800106c <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	3b02      	subs	r3, #2
 800105c:	461a      	mov	r2, r3
 800105e:	88b9      	ldrh	r1, [r7, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2009      	movs	r0, #9
 8001064:	f000 f828 	bl	80010b8 <dwt_writetodevice>
        return DWT_SUCCESS;
 8001068:	2300      	movs	r3, #0
 800106a:	e001      	b.n	8001070 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	603a      	str	r2, [r7, #0]
 8001082:	80fb      	strh	r3, [r7, #6]
 8001084:	460b      	mov	r3, r1
 8001086:	80bb      	strh	r3, [r7, #4]
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | (txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | (ranging << TX_FCTRL_TR_SHFT);
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <dwt_writetxfctrl+0x3c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	4313      	orrs	r3, r2
 8001092:	88ba      	ldrh	r2, [r7, #4]
 8001094:	0592      	lsls	r2, r2, #22
 8001096:	4313      	orrs	r3, r2
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	03d2      	lsls	r2, r2, #15
 800109c:	4313      	orrs	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	2100      	movs	r1, #0
 80010a4:	2008      	movs	r0, #8
 80010a6:	f000 f92f 	bl	8001308 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000014 	.word	0x20000014

080010b8 <dwt_writetodevice>:
    uint16      recordNumber,
    uint16      index,
    uint32      length,
    const uint8 *buffer
)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4603      	mov	r3, r0
 80010c4:	81fb      	strh	r3, [r7, #14]
 80010c6:	460b      	mov	r3, r1
 80010c8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80010ce:	89bb      	ldrh	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10d      	bne.n	80010f0 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	617a      	str	r2, [r7, #20]
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f107 0118 	add.w	r1, r7, #24
 80010e8:	440b      	add	r3, r1
 80010ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80010ee:	e033      	b.n	8001158 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	617a      	str	r2, [r7, #20]
 80010f6:	89fa      	ldrh	r2, [r7, #14]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f107 0118 	add.w	r1, r7, #24
 8001104:	440b      	add	r3, r1
 8001106:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	2b7f      	cmp	r3, #127	; 0x7f
 800110e:	d80a      	bhi.n	8001126 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	617a      	str	r2, [r7, #20]
 8001116:	89ba      	ldrh	r2, [r7, #12]
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f107 0118 	add.w	r1, r7, #24
 800111e:	440b      	add	r3, r1
 8001120:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001124:	e018      	b.n	8001158 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	617a      	str	r2, [r7, #20]
 800112c:	89ba      	ldrh	r2, [r7, #12]
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f107 0118 	add.w	r1, r7, #24
 800113a:	440b      	add	r3, r1
 800113c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	617a      	str	r2, [r7, #20]
 8001146:	89ba      	ldrh	r2, [r7, #12]
 8001148:	09d2      	lsrs	r2, r2, #7
 800114a:	b292      	uxth	r2, r2
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	f107 0118 	add.w	r1, r7, #24
 8001152:	440b      	add	r3, r1
 8001154:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	b298      	uxth	r0, r3
 800115c:	f107 0110 	add.w	r1, r7, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f000 fb0a 	bl	800177c <writetospi>
} // end dwt_writetodevice()
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32  length,
    uint8   *buffer
)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60ba      	str	r2, [r7, #8]
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4603      	mov	r3, r0
 800117c:	81fb      	strh	r3, [r7, #14]
 800117e:	460b      	mov	r3, r1
 8001180:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10a      	bne.n	80011a2 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	617a      	str	r2, [r7, #20]
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	f107 0118 	add.w	r1, r7, #24
 800119a:	440b      	add	r3, r1
 800119c:	f803 2c08 	strb.w	r2, [r3, #-8]
 80011a0:	e033      	b.n	800120a <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	617a      	str	r2, [r7, #20]
 80011a8:	89fa      	ldrh	r2, [r7, #14]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f107 0118 	add.w	r1, r7, #24
 80011b6:	440b      	add	r3, r1
 80011b8:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80011bc:	89bb      	ldrh	r3, [r7, #12]
 80011be:	2b7f      	cmp	r3, #127	; 0x7f
 80011c0:	d80a      	bhi.n	80011d8 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	617a      	str	r2, [r7, #20]
 80011c8:	89ba      	ldrh	r2, [r7, #12]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f107 0118 	add.w	r1, r7, #24
 80011d0:	440b      	add	r3, r1
 80011d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80011d6:	e018      	b.n	800120a <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	617a      	str	r2, [r7, #20]
 80011de:	89ba      	ldrh	r2, [r7, #12]
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f107 0118 	add.w	r1, r7, #24
 80011ec:	440b      	add	r3, r1
 80011ee:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	617a      	str	r2, [r7, #20]
 80011f8:	89ba      	ldrh	r2, [r7, #12]
 80011fa:	09d2      	lsrs	r2, r2, #7
 80011fc:	b292      	uxth	r2, r2
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	f107 0118 	add.w	r1, r7, #24
 8001204:	440b      	add	r3, r1
 8001206:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	b298      	uxth	r0, r3
 800120e:	f107 0110 	add.w	r1, r7, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	f000 fae9 	bl	80017ec <readfromspi>
} // end dwt_readfromdevice()
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID,int regOffset)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b298      	uxth	r0, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b299      	uxth	r1, r3
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2204      	movs	r2, #4
 800123e:	f7ff ff97 	bl	8001170 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001242:	2303      	movs	r3, #3
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	e00b      	b.n	8001260 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	f107 010c 	add.w	r1, r7, #12
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	440a      	add	r2, r1
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	3b01      	subs	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	daf0      	bge.n	8001248 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8001266:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800127a:	2300      	movs	r3, #0
 800127c:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	b298      	uxth	r0, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b299      	uxth	r1, r3
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2202      	movs	r2, #2
 800128c:	f7ff ff70 	bl	8001170 <dwt_readfromdevice>

    regval = (buffer[1] << 8) + buffer[0] ;
 8001290:	7b7b      	ldrb	r3, [r7, #13]
 8001292:	b29b      	uxth	r3, r3
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b29a      	uxth	r2, r3
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80012a0:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	b298      	uxth	r0, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	b299      	uxth	r1, r3
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	2201      	movs	r2, #1
 80012c4:	f7ff fef8 	bl	80010b8 <dwt_writetodevice>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16 regval)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	4613      	mov	r3, r2
 80012dc:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	b298      	uxth	r0, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	b299      	uxth	r1, r3
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2202      	movs	r2, #2
 80012fc:	f7ff fedc 	bl	80010b8 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32 regval)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00d      	b.n	8001336 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4413      	add	r3, r2
 8001326:	460a      	mov	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b03      	cmp	r3, #3
 800133a:	ddee      	ble.n	800131a <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	b298      	uxth	r0, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	b299      	uxth	r1, r3
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2204      	movs	r2, #4
 800134a:	f7ff feb5 	bl	80010b8 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint32 address)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	2104      	movs	r1, #4
 8001366:	202d      	movs	r0, #45	; 0x2d
 8001368:	f7ff ffb2 	bl	80012d0 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800136c:	2203      	movs	r2, #3
 800136e:	2106      	movs	r1, #6
 8001370:	202d      	movs	r0, #45	; 0x2d
 8001372:	f7ff ff9a 	bl	80012aa <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8001376:	2200      	movs	r2, #0
 8001378:	2106      	movs	r1, #6
 800137a:	202d      	movs	r0, #45	; 0x2d
 800137c:	f7ff ff95 	bl	80012aa <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8001380:	210a      	movs	r1, #10
 8001382:	202d      	movs	r0, #45	; 0x2d
 8001384:	f7ff ff4d 	bl	8001222 <dwt_read32bitoffsetreg>
 8001388:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001398:	2200      	movs	r2, #0
 800139a:	2102      	movs	r1, #2
 800139c:	202c      	movs	r0, #44	; 0x2c
 800139e:	f7ff ff84 	bl	80012aa <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80013a2:	2202      	movs	r2, #2
 80013a4:	2102      	movs	r1, #2
 80013a6:	202c      	movs	r0, #44	; 0x2c
 80013a8:	f7ff ff7f 	bl	80012aa <dwt_write8bitoffsetreg>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80013b8:	226d      	movs	r2, #109	; 0x6d
 80013ba:	f640 0106 	movw	r1, #2054	; 0x806
 80013be:	202e      	movs	r0, #46	; 0x2e
 80013c0:	f7ff ff73 	bl	80012aa <dwt_write8bitoffsetreg>

    if(prfIndex)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80013ca:	f240 6207 	movw	r2, #1543	; 0x607
 80013ce:	f641 0106 	movw	r1, #6150	; 0x1806
 80013d2:	202e      	movs	r0, #46	; 0x2e
 80013d4:	f7ff ff7c 	bl	80012d0 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80013d8:	e006      	b.n	80013e8 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80013da:	f241 6207 	movw	r2, #5639	; 0x1607
 80013de:	f641 0106 	movw	r1, #6150	; 0x1806
 80013e2:	202e      	movs	r0, #46	; 0x2e
 80013e4:	f7ff ff74 	bl	80012d0 <dwt_write16bitoffsetreg>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80013f4:	200e      	movs	r0, #14
 80013f6:	f000 f80f 	bl	8001418 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80013fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013fe:	2106      	movs	r1, #6
 8001400:	202d      	movs	r0, #45	; 0x2d
 8001402:	f7ff ff65 	bl	80012d0 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001406:	2001      	movs	r0, #1
 8001408:	f000 f997 	bl	800173a <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800140c:	2001      	movs	r0, #1
 800140e:	f000 f803 	bl	8001418 <_dwt_enableclocks>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2202      	movs	r2, #2
 8001426:	2100      	movs	r1, #0
 8001428:	2036      	movs	r0, #54	; 0x36
 800142a:	f7ff fea1 	bl	8001170 <dwt_readfromdevice>
    switch(clocks)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0e      	cmp	r3, #14
 8001432:	d876      	bhi.n	8001522 <_dwt_enableclocks+0x10a>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <_dwt_enableclocks+0x24>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	08001489 	.word	0x08001489
 8001440:	08001479 	.word	0x08001479
 8001444:	0800149f 	.word	0x0800149f
 8001448:	08001523 	.word	0x08001523
 800144c:	08001523 	.word	0x08001523
 8001450:	08001523 	.word	0x08001523
 8001454:	08001523 	.word	0x08001523
 8001458:	080014b5 	.word	0x080014b5
 800145c:	080014d5 	.word	0x080014d5
 8001460:	08001523 	.word	0x08001523
 8001464:	08001523 	.word	0x08001523
 8001468:	080014eb 	.word	0x080014eb
 800146c:	080014f7 	.word	0x080014f7
 8001470:	08001503 	.word	0x08001503
 8001474:	08001519 	.word	0x08001519
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001478:	2300      	movs	r3, #0
 800147a:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001486:	e04d      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	f023 0303 	bic.w	r3, r3, #3
 8001490:	b25b      	sxtb	r3, r3
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	b25b      	sxtb	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	733b      	strb	r3, [r7, #12]
        }
        break;
 800149c:	e042      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800149e:	7b3b      	ldrb	r3, [r7, #12]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	733b      	strb	r3, [r7, #12]
        }
        break;
 80014b2:	e037      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80014b4:	7b3b      	ldrb	r3, [r7, #12]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	737b      	strb	r3, [r7, #13]
        }
        break;
 80014d2:	e027      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	737b      	strb	r3, [r7, #13]
        }
        break;
 80014e8:	e01c      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	737b      	strb	r3, [r7, #13]
        }
        break;
 80014f4:	e016      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 80014f6:	7b7b      	ldrb	r3, [r7, #13]
 80014f8:	f023 0302 	bic.w	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001500:	e010      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001502:	7b3b      	ldrb	r3, [r7, #12]
 8001504:	b25b      	sxtb	r3, r3
 8001506:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001516:	e005      	b.n	8001524 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001518:	2301      	movs	r3, #1
 800151a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 800151c:	2303      	movs	r3, #3
 800151e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001520:	e000      	b.n	8001524 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001522:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2201      	movs	r2, #1
 800152a:	2100      	movs	r1, #0
 800152c:	2036      	movs	r0, #54	; 0x36
 800152e:	f7ff fdc3 	bl	80010b8 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	3301      	adds	r3, #1
 8001538:	2201      	movs	r2, #1
 800153a:	2101      	movs	r1, #1
 800153c:	2036      	movs	r0, #54	; 0x36
 800153e:	f7ff fdbb 	bl	80010b8 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop

0800154c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff61 	bl	8001418 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001556:	2200      	movs	r2, #0
 8001558:	2104      	movs	r1, #4
 800155a:	2036      	movs	r0, #54	; 0x36
 800155c:	f7ff feb8 	bl	80012d0 <dwt_write16bitoffsetreg>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <dwt_starttx>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will fail if the delayed time has passed)
 */
int dwt_starttx(uint8 mode)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001576:	2300      	movs	r3, #0
 8001578:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00b      	beq.n	800159c <dwt_starttx+0x38>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	461a      	mov	r2, r3
 800158c:	2100      	movs	r1, #0
 800158e:	200d      	movs	r0, #13
 8001590:	f7ff fe8b 	bl	80012aa <dwt_write8bitoffsetreg>
        pdw1000local->wait4resp = 1;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <dwt_starttx+0xb0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	769a      	strb	r2, [r3, #26]
    }

    if (mode & DWT_START_TX_DELAYED)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d027      	beq.n	80015f6 <dwt_starttx+0x92>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	f043 0306 	orr.w	r3, r3, #6
 80015ac:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	461a      	mov	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	200d      	movs	r0, #13
 80015b6:	f7ff fe78 	bl	80012aa <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80015ba:	2103      	movs	r1, #3
 80015bc:	200f      	movs	r0, #15
 80015be:	f7ff fe57 	bl	8001270 <dwt_read16bitoffsetreg>
 80015c2:	4603      	mov	r3, r0
 80015c4:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80015c6:	893b      	ldrh	r3, [r7, #8]
 80015c8:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <dwt_starttx+0x72>
        {
            retval = DWT_SUCCESS ; // All okay
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e019      	b.n	800160a <dwt_starttx+0xa6>
        }
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	72fb      	strb	r3, [r7, #11]
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	461a      	mov	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	200d      	movs	r0, #13
 80015e2:	f7ff fe62 	bl	80012aa <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            pdw1000local->wait4resp = 0;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <dwt_starttx+0xb0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	769a      	strb	r2, [r3, #26]
            retval = DWT_ERROR ; // Failed !
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e009      	b.n	800160a <dwt_starttx+0xa6>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	461a      	mov	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	200d      	movs	r0, #13
 8001606:	f7ff fe50 	bl	80012aa <dwt_write8bitoffsetreg>
    }

    return retval;
 800160a:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000014 	.word	0x20000014

08001618 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800161c:	f7ff ff96 	bl	800154c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	202c      	movs	r0, #44	; 0x2c
 8001626:	f7ff fe53 	bl	80012d0 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800162a:	2200      	movs	r2, #0
 800162c:	2106      	movs	r1, #6
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	f7ff fe3b 	bl	80012aa <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001634:	f7ff feae 	bl	8001394 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001638:	2200      	movs	r2, #0
 800163a:	2103      	movs	r1, #3
 800163c:	2036      	movs	r0, #54	; 0x36
 800163e:	f7ff fe34 	bl	80012aa <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001642:	2001      	movs	r0, #1
 8001644:	f000 f879 	bl	800173a <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001648:	22f0      	movs	r2, #240	; 0xf0
 800164a:	2103      	movs	r1, #3
 800164c:	2036      	movs	r0, #54	; 0x36
 800164e:	f7ff fe2c 	bl	80012aa <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001652:	4b03      	ldr	r3, [pc, #12]	; (8001660 <dwt_softreset+0x48>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	769a      	strb	r2, [r3, #26]
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000014 	.word	0x20000014

08001664 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800167c:	b25b      	sxtb	r3, r3
 800167e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	461a      	mov	r2, r3
 8001684:	210e      	movs	r1, #14
 8001686:	202b      	movs	r0, #43	; 0x2b
 8001688:	f7ff fe0f 	bl	80012aa <dwt_write8bitoffsetreg>
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <NVIC_EnableIRQ+0x2c>)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80016ce:	4909      	ldr	r1, [pc, #36]	; (80016f4 <NVIC_DisableIRQ+0x30>)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	095b      	lsrs	r3, r3, #5
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	3320      	adds	r3, #32
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80016fe:	2017      	movs	r0, #23
 8001700:	f000 f9a4 	bl	8001a4c <EXTI_GetITEnStatus>
 8001704:	4603      	mov	r3, r0
 8001706:	607b      	str	r3, [r7, #4]

	if(s) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <decamutexon+0x1c>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800170e:	2017      	movs	r0, #23
 8001710:	f7ff ffd8 	bl	80016c4 <NVIC_DisableIRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <decamutexoff+0x14>
		port_EnableEXT_IRQ();
 800172c:	2017      	movs	r0, #23
 800172e:	f7ff ffb1 	bl	8001694 <NVIC_EnableIRQ>
	}
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    sleep_ms(time_ms);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f804 	bl	8001750 <sleep_ms>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <sleep_ms>:

void sleep_ms(unsigned int time_ms)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = portGetTickCount() + time_ms;
 8001758:	f000 f952 	bl	8001a00 <portGetTickCnt>
 800175c:	4602      	mov	r2, r0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    while ((signed long)(portGetTickCount() - end) <= 0)
 8001764:	bf00      	nop
 8001766:	f000 f94b 	bl	8001a00 <portGetTickCnt>
 800176a:	4602      	mov	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	ddf8      	ble.n	8001766 <sleep_ms+0x16>
        ;
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <writetospi>:
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
#pragma GCC optimize ("O3")
int writetospi(uint16 headerLength, const uint8 *headerBuffer, uint32 bodylength, const uint8 *bodyBuffer)
{
 800177c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001780:	4690      	mov	r8, r2
 8001782:	461e      	mov	r6, r3
 8001784:	4681      	mov	r9, r0
 8001786:	460c      	mov	r4, r1

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
 8001788:	f7ff ffb6 	bl	80016f8 <decamutexon>

    SPIx_CS_GPIO->BRR = SPIx_CS;
 800178c:	2210      	movs	r2, #16
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <writetospi+0x68>)
 8001790:	615a      	str	r2, [r3, #20]

    for(i=0; i<headerLength; i++)
 8001792:	f1b9 0f00 	cmp.w	r9, #0
 8001796:	d00c      	beq.n	80017b2 <writetospi+0x36>
 8001798:	4621      	mov	r1, r4
    {
    	SPIx->DR = headerBuffer[i];
 800179a:	4d13      	ldr	r5, [pc, #76]	; (80017e8 <writetospi+0x6c>)
 800179c:	eb04 0209 	add.w	r2, r4, r9
 80017a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017a4:	81ab      	strh	r3, [r5, #12]

    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 80017a6:	892c      	ldrh	r4, [r5, #8]
 80017a8:	07e4      	lsls	r4, r4, #31
 80017aa:	d5fc      	bpl.n	80017a6 <writetospi+0x2a>
    for(i=0; i<headerLength; i++)
 80017ac:	428a      	cmp	r2, r1

    	SPIx->DR ;
 80017ae:	89ab      	ldrh	r3, [r5, #12]
    for(i=0; i<headerLength; i++)
 80017b0:	d1f6      	bne.n	80017a0 <writetospi+0x24>
    }

    for(i=0; i<bodylength; i++)
 80017b2:	f1b8 0f00 	cmp.w	r8, #0
 80017b6:	d00c      	beq.n	80017d2 <writetospi+0x56>
 80017b8:	4633      	mov	r3, r6
    {
     	SPIx->DR = bodyBuffer[i];
 80017ba:	490b      	ldr	r1, [pc, #44]	; (80017e8 <writetospi+0x6c>)
 80017bc:	eb06 0408 	add.w	r4, r6, r8
 80017c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017c4:	818a      	strh	r2, [r1, #12]

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 80017c6:	890a      	ldrh	r2, [r1, #8]
 80017c8:	07d2      	lsls	r2, r2, #31
 80017ca:	d5fc      	bpl.n	80017c6 <writetospi+0x4a>
    for(i=0; i<bodylength; i++)
 80017cc:	42a3      	cmp	r3, r4

		SPIx->DR ;
 80017ce:	898a      	ldrh	r2, [r1, #12]
    for(i=0; i<bodylength; i++)
 80017d0:	d1f6      	bne.n	80017c0 <writetospi+0x44>
	}

    SPIx_CS_GPIO->BSRR = SPIx_CS;
 80017d2:	2210      	movs	r2, #16
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <writetospi+0x68>)
 80017d6:	611a      	str	r2, [r3, #16]

    decamutexoff(stat) ;
 80017d8:	f7ff ffa1 	bl	800171e <decamutexoff>

    return 0;
} // end writetospi()
 80017dc:	2000      	movs	r0, #0
 80017de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80017e2:	bf00      	nop
 80017e4:	40010800 	.word	0x40010800
 80017e8:	40013000 	.word	0x40013000

080017ec <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
#pragma GCC optimize ("O3")
int readfromspi(uint16 headerLength, const uint8 *headerBuffer, uint32 readlength, uint8 *readBuffer)
{
 80017ec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80017f0:	4690      	mov	r8, r2
 80017f2:	461e      	mov	r6, r3
 80017f4:	4681      	mov	r9, r0
 80017f6:	460c      	mov	r4, r1

	int i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
 80017f8:	f7ff ff7e 	bl	80016f8 <decamutexon>

    /* Wait for SPIx Tx buffer empty */
    //while (port_SPIx_busy_sending());

    SPIx_CS_GPIO->BRR = SPIx_CS;
 80017fc:	2210      	movs	r2, #16
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <readfromspi+0x6c>)
 8001800:	615a      	str	r2, [r3, #20]

    for(i=0; i<headerLength; i++)
 8001802:	f1b9 0f00 	cmp.w	r9, #0
 8001806:	d00d      	beq.n	8001824 <readfromspi+0x38>
 8001808:	4621      	mov	r1, r4
    {
    	SPIx->DR = headerBuffer[i];
 800180a:	4d14      	ldr	r5, [pc, #80]	; (800185c <readfromspi+0x70>)
 800180c:	eb04 0209 	add.w	r2, r4, r9
 8001810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001814:	81ab      	strh	r3, [r5, #12]

     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 8001816:	892c      	ldrh	r4, [r5, #8]
 8001818:	07e4      	lsls	r4, r4, #31
 800181a:	d5fc      	bpl.n	8001816 <readfromspi+0x2a>

     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
 800181c:	89ab      	ldrh	r3, [r5, #12]
    for(i=0; i<headerLength; i++)
 800181e:	428a      	cmp	r2, r1
     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
 8001820:	7033      	strb	r3, [r6, #0]
    for(i=0; i<headerLength; i++)
 8001822:	d1f5      	bne.n	8001810 <readfromspi+0x24>
    }

    for(i=0; i<readlength; i++)
 8001824:	f1b8 0f00 	cmp.w	r8, #0
 8001828:	d00d      	beq.n	8001846 <readfromspi+0x5a>
 800182a:	4633      	mov	r3, r6
    {
    	SPIx->DR = 0;  // Dummy write as we read the message body
 800182c:	f04f 0400 	mov.w	r4, #0
 8001830:	490a      	ldr	r1, [pc, #40]	; (800185c <readfromspi+0x70>)
 8001832:	44b0      	add	r8, r6
 8001834:	818c      	strh	r4, [r1, #12]

    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET);
 8001836:	890a      	ldrh	r2, [r1, #8]
 8001838:	07d2      	lsls	r2, r2, #31
 800183a:	d5fc      	bpl.n	8001836 <readfromspi+0x4a>
 
	   	readBuffer[i] = SPIx->DR ;//port_SPIx_receive_data(); //this clears RXNE bit
 800183c:	898a      	ldrh	r2, [r1, #12]
 800183e:	f803 2b01 	strb.w	r2, [r3], #1
    for(i=0; i<readlength; i++)
 8001842:	4543      	cmp	r3, r8
 8001844:	d1f6      	bne.n	8001834 <readfromspi+0x48>
    }

    SPIx_CS_GPIO->BSRR = SPIx_CS;
 8001846:	2210      	movs	r2, #16
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <readfromspi+0x6c>)
 800184a:	611a      	str	r2, [r3, #16]

    decamutexoff(stat) ;
 800184c:	f7ff ff67 	bl	800171e <decamutexoff>

    return 0;
} // end readfromspi()
 8001850:	2000      	movs	r0, #0
 8001852:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8001856:	bf00      	nop
 8001858:	40010800 	.word	0x40010800
 800185c:	40013000 	.word	0x40013000

08001860 <writetoLCD>:
(
    uint32       bodylength,
    uint8        rs_enable,
    const uint8 *bodyBuffer
)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	460b      	mov	r3, r1
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	72fb      	strb	r3, [r7, #11]

    int i = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
    int sleep = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
    //int j = 10000;

    if(rs_enable)
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <writetoLCD+0x28>
    {
        port_LCD_RS_set();
 800187c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001880:	4825      	ldr	r0, [pc, #148]	; (8001918 <writetoLCD+0xb8>)
 8001882:	f7fe fd82 	bl	800038a <GPIO_SetBits>
 8001886:	e00f      	b.n	80018a8 <writetoLCD+0x48>
    }
    else
    {
        if(bodylength == 1)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <writetoLCD+0x3e>
        {
            if(bodyBuffer[0] & 0x3) //if this is command = 1 or 2 - exsecution time is > 1ms
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <writetoLCD+0x3e>
                sleep = 1 ;
 800189a:	2301      	movs	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
        }
        port_LCD_RS_clear();
 800189e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a2:	481d      	ldr	r0, [pc, #116]	; (8001918 <writetoLCD+0xb8>)
 80018a4:	f7fe fd7f 	bl	80003a6 <GPIO_ResetBits>
    }

    port_SPIy_clear_chip_select();  //CS low
 80018a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ac:	481a      	ldr	r0, [pc, #104]	; (8001918 <writetoLCD+0xb8>)
 80018ae:	f7fe fd7a 	bl	80003a6 <GPIO_ResetBits>


    //while(j--); //delay

    for(i=0; i<bodylength; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e016      	b.n	80018e6 <writetoLCD+0x86>
    {
        port_SPIy_send_data(bodyBuffer[i]); //send data on the SPI
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	4815      	ldr	r0, [pc, #84]	; (800191c <writetoLCD+0xbc>)
 80018c6:	f7ff f937 	bl	8000b38 <SPI_I2S_SendData>

        while (port_SPIy_no_data()); //wait for rx buffer to fill
 80018ca:	bf00      	nop
 80018cc:	2101      	movs	r1, #1
 80018ce:	4813      	ldr	r0, [pc, #76]	; (800191c <writetoLCD+0xbc>)
 80018d0:	f7ff f96b 	bl	8000baa <SPI_I2S_GetFlagStatus>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f8      	beq.n	80018cc <writetoLCD+0x6c>

        port_SPIy_receive_data(); //this clears RXNE bit
 80018da:	4810      	ldr	r0, [pc, #64]	; (800191c <writetoLCD+0xbc>)
 80018dc:	f7ff f93a 	bl	8000b54 <SPI_I2S_ReceiveData>
    for(i=0; i<bodylength; i++)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3e4      	bcc.n	80018b8 <writetoLCD+0x58>
    }

    //j = 10000;

    port_LCD_RS_clear();
 80018ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <writetoLCD+0xb8>)
 80018f4:	f7fe fd57 	bl	80003a6 <GPIO_ResetBits>

    //while(j--); //delay

    port_SPIy_set_chip_select();  //CS high
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <writetoLCD+0xb8>)
 80018fe:	f7fe fd44 	bl	800038a <GPIO_SetBits>

    if(sleep)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <writetoLCD+0xae>
        sleep_ms(2);
 8001908:	2002      	movs	r0, #2
 800190a:	f7ff ff21 	bl	8001750 <sleep_ms>
} // end writetoLCD()
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40003800 	.word	0x40003800

08001920 <lcd_display_str>:
 * @param  string  the string to display
 *
 * @return none
 */
void lcd_display_str(const char *string)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    uint8 command;
    /* Return cursor home and clear screen. */
    command = 0x2;
 8001928:	2302      	movs	r3, #2
 800192a:	73fb      	strb	r3, [r7, #15]
    writetoLCD(1, 0, &command);
 800192c:	f107 030f 	add.w	r3, r7, #15
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff ff93 	bl	8001860 <writetoLCD>
    command = 0x1;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
    writetoLCD(1, 0, &command);
 800193e:	f107 030f 	add.w	r3, r7, #15
 8001942:	461a      	mov	r2, r3
 8001944:	2100      	movs	r1, #0
 8001946:	2001      	movs	r0, #1
 8001948:	f7ff ff8a 	bl	8001860 <writetoLCD>
    /* Write the string to display. */
    writetoLCD(strlen(string), 1, (const uint8 *)string);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7fe fbfd 	bl	800014c <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff81 	bl	8001860 <writetoLCD>
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da0b      	bge.n	8001994 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800197c:	490d      	ldr	r1, [pc, #52]	; (80019b4 <NVIC_SetPriority+0x4c>)
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	3b04      	subs	r3, #4
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001992:	e009      	b.n	80019a8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001994:	4908      	ldr	r1, [pc, #32]	; (80019b8 <NVIC_SetPriority+0x50>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	e000e100 	.word	0xe000e100

080019bc <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ca:	d301      	bcc.n	80019d0 <SysTick_Config+0x14>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e011      	b.n	80019f4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019d8:	3b01      	subs	r3, #1
 80019da:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80019dc:	210f      	movs	r1, #15
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	f7ff ffc1 	bl	8001968 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <SysTick_Config+0x40>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <portGetTickCnt>:
{
	return -1;
}

unsigned long portGetTickCnt(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	return time32_incr;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <portGetTickCnt+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	2000008c 	.word	0x2000008c

08001a14 <SysTick_Configuration>:

int SysTick_Configuration(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / CLOCKS_PER_SEC))
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <SysTick_Configuration+0x30>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <SysTick_Configuration+0x34>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffc9 	bl	80019bc <SysTick_Config>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <SysTick_Configuration+0x1e>
	{
		/* Capture error */
		while (1);
 8001a30:	e7fe      	b.n	8001a30 <SysTick_Configuration+0x1c>
	}
	NVIC_SetPriority (SysTick_IRQn, 5);
 8001a32:	2105      	movs	r1, #5
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff96 	bl	8001968 <NVIC_SetPriority>

	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000030 	.word	0x20000030
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t EXTI_Line)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <EXTI_GetITEnStatus+0x38>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4013      	ands	r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]
  if (enablestatus != (uint32_t)RESET)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <EXTI_GetITEnStatus+0x26>
  {
    bitstatus = SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <EXTI_GetITEnStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40010400 	.word	0x40010400

08001a88 <RCC_Configuration>:
        port_EnableEXT_IRQ();
    }
}

int RCC_Configuration(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
	ErrorStatus HSEStartUpStatus;
	RCC_ClocksTypeDef RCC_ClockFreq;

	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 8001a8e:	f7fe fd09 	bl	80004a4 <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 8001a92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a96:	f7fe fd33 	bl	8000500 <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8001a9a:	f7fe fd5f 	bl	800055c <RCC_WaitForHSEStartUp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	75fb      	strb	r3, [r7, #23]

	if(HSEStartUpStatus != ERROR)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02c      	beq.n	8001b02 <RCC_Configuration+0x7a>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8001aa8:	2010      	movs	r0, #16
 8001aaa:	f7fe fb81 	bl	80001b0 <FLASH_PrefetchBufferCmd>
		/****************************************************************/
		/* HSE= up to 25MHz (on EVB1000 is 12MHz),
		 * HCLK=72MHz, PCLK2=72MHz, PCLK1=36MHz 						*/
		/****************************************************************/
		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f7fe fb62 	bl	8000178 <FLASH_SetLatency>
		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7fe fdd1 	bl	800065c <RCC_HCLKConfig>
		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7fe fe06 	bl	80006cc <RCC_PCLK2Config>
		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8001ac0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ac4:	f7fe fde6 	bl	8000694 <RCC_PCLK1Config>
		/*  ADCCLK = PCLK2/4 */
		RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8001ac8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001acc:	f7fe fe1a 	bl	8000704 <RCC_ADCCLKConfig>
		/* PLL1 configuration: PLLCLK = (PLL2 / 3) * 9 = 72 MHz */
		//RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div3);

		//RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div3);

		RCC_PLLConfig(RCC_PLLSource_HSE_Div2, RCC_PLLMul_9);
 8001ad0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001ad4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001ad8:	f7fe fd68 	bl	80005ac <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7fe fd83 	bl	80005e8 <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET){}
 8001ae2:	bf00      	nop
 8001ae4:	2039      	movs	r0, #57	; 0x39
 8001ae6:	f7fe ff51 	bl	800098c <RCC_GetFlagStatus>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f9      	beq.n	8001ae4 <RCC_Configuration+0x5c>

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7fe fd89 	bl	8000608 <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while (RCC_GetSYSCLKSource() != 0x08){}
 8001af6:	bf00      	nop
 8001af8:	f7fe fda2 	bl	8000640 <RCC_GetSYSCLKSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d1fa      	bne.n	8001af8 <RCC_Configuration+0x70>
	}

	RCC_GetClocksFreq(&RCC_ClockFreq);
 8001b02:	463b      	mov	r3, r7
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fe19 	bl	800073c <RCC_GetClocksFreq>

	/* Enable SPI1 clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b10:	f7fe fec4 	bl	800089c <RCC_APB2PeriphClockCmd>

	/* Enable SPI2 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001b14:	2101      	movs	r1, #1
 8001b16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b1a:	f7fe fedd 	bl	80008d8 <RCC_APB1PeriphClockCmd>

	/* Enable GPIOs clocks */
	RCC_APB2PeriphClockCmd(
 8001b1e:	2101      	movs	r1, #1
 8001b20:	207d      	movs	r0, #125	; 0x7d
 8001b22:	f7fe febb 	bl	800089c <RCC_APB2PeriphClockCmd>
						RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
						ENABLE);

	return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <SPI_ChangeRate>:
#endif
    return 0;
}

void SPI_ChangeRate(uint16_t scalingfactor)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
	uint16_t tmpreg = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	81fb      	strh	r3, [r7, #14]

	/* Get the SPIx CR1 value */
	tmpreg = SPIx->CR1;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <SPI_ChangeRate+0x34>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	81fb      	strh	r3, [r7, #14]

	/*clear the scaling bits*/
	tmpreg &= 0xFFC7;
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001b4a:	81fb      	strh	r3, [r7, #14]

	/*set the scaling bits*/
	tmpreg |= scalingfactor;
 8001b4c:	89fa      	ldrh	r2, [r7, #14]
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	81fb      	strh	r3, [r7, #14]

	/* Write to SPIx CR1 */
	SPIx->CR1 = tmpreg;
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <SPI_ChangeRate+0x34>)
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	8013      	strh	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40013000 	.word	0x40013000

08001b68 <spi_set_rate_low>:
 * @param none
 *
 * @return none
 */
void spi_set_rate_low (void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    SPI_ChangeRate(SPI_BaudRatePrescaler_32);
 8001b6c:	2020      	movs	r0, #32
 8001b6e:	f7ff ffdf 	bl	8001b30 <SPI_ChangeRate>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <spi_set_rate_high>:
 * @param none
 *
 * @return none
 */
void spi_set_rate_high (void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
    SPI_ChangeRate(SPI_BaudRatePrescaler_4);
 8001b7a:	2008      	movs	r0, #8
 8001b7c:	f7ff ffd8 	bl	8001b30 <SPI_ChangeRate>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <SPI_Configuration>:
	// Enable SPIx
	SPI_Cmd(SPIx, ENABLE);
}

int SPI_Configuration(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
	SPI_InitTypeDef SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	SPI_I2S_DeInit(SPIx);
 8001b8a:	4826      	ldr	r0, [pc, #152]	; (8001c24 <SPI_Configuration+0xa0>)
 8001b8c:	f7fe ff38 	bl	8000a00 <SPI_I2S_DeInit>

	// SPIx Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001b90:	2300      	movs	r3, #0
 8001b92:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001b94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b98:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;	 //
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	817b      	strh	r3, [r7, #10]
	//SPI_InitStructure.SPI_CPOL = SPI_CPOL_High; //
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	81bb      	strh	r3, [r7, #12]
	//SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge; //
	//SPI_InitStructure.SPI_NSS = SPI_NSS_Hard;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001baa:	81fb      	strh	r3, [r7, #14]
	//SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; //sets BR[2:0] bits - baudrate in SPI_CR1 reg bits 4-6
	SPI_InitStructure.SPI_BaudRatePrescaler = SPIx_PRESCALER;
 8001bac:	2310      	movs	r3, #16
 8001bae:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	82bb      	strh	r3, [r7, #20]

	SPI_Init(SPIx, &SPI_InitStructure);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4819      	ldr	r0, [pc, #100]	; (8001c24 <SPI_Configuration+0xa0>)
 8001bbe:	f7fe ff59 	bl	8000a74 <SPI_Init>

	// SPIx SCK and MOSI pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_SCK | SPIx_MOSI;
 8001bc2:	23a0      	movs	r3, #160	; 0xa0
 8001bc4:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001bc6:	2318      	movs	r3, #24
 8001bc8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4815      	ldr	r0, [pc, #84]	; (8001c28 <SPI_Configuration+0xa4>)
 8001bd4:	f7fe fb04 	bl	80001e0 <GPIO_Init>

	// SPIx MISO pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_MISO;
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	803b      	strh	r3, [r7, #0]
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 8001bdc:	2348      	movs	r3, #72	; 0x48
 8001bde:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	4810      	ldr	r0, [pc, #64]	; (8001c28 <SPI_Configuration+0xa4>)
 8001be6:	f7fe fafb 	bl	80001e0 <GPIO_Init>

	// SPIx CS pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_CS;
 8001bea:	2310      	movs	r3, #16
 8001bec:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIx_CS_GPIO, &GPIO_InitStructure);
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480b      	ldr	r0, [pc, #44]	; (8001c28 <SPI_Configuration+0xa4>)
 8001bfc:	f7fe faf0 	bl	80001e0 <GPIO_Init>

	// Disable SPIx SS Output
	SPI_SSOutputCmd(SPIx, DISABLE);
 8001c00:	2100      	movs	r1, #0
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <SPI_Configuration+0xa0>)
 8001c04:	f7fe ffb2 	bl	8000b6c <SPI_SSOutputCmd>

	// Enable SPIx
	SPI_Cmd(SPIx, ENABLE);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <SPI_Configuration+0xa0>)
 8001c0c:	f7fe ff75 	bl	8000afa <SPI_Cmd>

	// Set CS high
	GPIO_SetBits(SPIx_CS_GPIO, SPIx_CS);
 8001c10:	2110      	movs	r1, #16
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <SPI_Configuration+0xa4>)
 8001c14:	f7fe fbb9 	bl	800038a <GPIO_SetBits>

    return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40013000 	.word	0x40013000
 8001c28:	40010800 	.word	0x40010800

08001c2c <GPIO_Configuration>:

    return 0;
}

int GPIO_Configuration(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
	/* Configure all unused GPIO port pins in Analog Input mode (floating input
	* trigger OFF), this will reduce the power consumption and increase the device
	* immunity against EMI/EMC */

	// Enable GPIOs clocks
	RCC_APB2PeriphClockCmd(
 8001c32:	2101      	movs	r1, #1
 8001c34:	207d      	movs	r0, #125	; 0x7d
 8001c36:	f7fe fe31 	bl	800089c <RCC_APB2PeriphClockCmd>
						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
						ENABLE);

	// Set all GPIO pins as analog inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8001c40:	2300      	movs	r3, #0
 8001c42:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <GPIO_Configuration+0x74>)
 8001c4a:	f7fe fac9 	bl	80001e0 <GPIO_Init>
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <GPIO_Configuration+0x78>)
 8001c54:	f7fe fac4 	bl	80001e0 <GPIO_Init>
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <GPIO_Configuration+0x7c>)
 8001c5e:	f7fe fabf 	bl	80001e0 <GPIO_Init>
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4811      	ldr	r0, [pc, #68]	; (8001cac <GPIO_Configuration+0x80>)
 8001c68:	f7fe faba 	bl	80001e0 <GPIO_Init>
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <GPIO_Configuration+0x84>)
 8001c72:	f7fe fab5 	bl	80001e0 <GPIO_Init>
	//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_7;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_Init(GPIOC, &GPIO_InitStructure);
	//GPIO_PinRemapConfig(GPIO_Remap_SPI1, DISABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c80:	2303      	movs	r3, #3
 8001c82:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <GPIO_Configuration+0x7c>)
 8001c8a:	f7fe faa9 	bl	80001e0 <GPIO_Init>

	GPIO_PinRemapConfig(GPIO_Remap_SPI1, DISABLE);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7fe fb97 	bl	80003c4 <GPIO_PinRemapConfig>

    return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40011400 	.word	0x40011400
 8001cb0:	40011800 	.word	0x40011800

08001cb4 <reset_DW1000>:


void reset_DW1000(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO used for DW1000 reset
	GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <reset_DW1000+0x48>)
 8001ccc:	f7fe fa88 	bl	80001e0 <GPIO_Init>

	//drive the RSTn pin low
	GPIO_ResetBits(DW1000_RSTn_GPIO, DW1000_RSTn);
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	480a      	ldr	r0, [pc, #40]	; (8001cfc <reset_DW1000+0x48>)
 8001cd4:	f7fe fb67 	bl	80003a6 <GPIO_ResetBits>

	//put the pin back to tri-state ... as input
	GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <reset_DW1000+0x48>)
 8001cea:	f7fe fa79 	bl	80001e0 <GPIO_Init>

    sleep_ms(2);
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f7ff fd2e 	bl	8001750 <sleep_ms>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010800 	.word	0x40010800

08001d00 <spi_peripheral_init>:
 * @param none
 *
 * @return none
 */
static void spi_peripheral_init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
    spi_init();
 8001d04:	f7ff ff3e 	bl	8001b84 <SPI_Configuration>
    //SPI2_Configuration();
    //port_LCD_RS_clear();
    //port_LCD_RW_clear();

    // Wait for LCD to power on.
    sleep_ms(10);
 8001d08:	200a      	movs	r0, #10
 8001d0a:	f7ff fd21 	bl	8001750 <sleep_ms>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <peripherals_init>:
 * @param none
 *
 * @return none
 */
void peripherals_init (void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
	rcc_init();
 8001d16:	f7ff feb7 	bl	8001a88 <RCC_Configuration>
	gpio_init();
 8001d1a:	f7ff ff87 	bl	8001c2c <GPIO_Configuration>
	//interrupt_init();
	systick_init();
 8001d1e:	f7ff fe79 	bl	8001a14 <SysTick_Configuration>
	spi_peripheral_init();
 8001d22:	f7ff ffed 	bl	8001d00 <spi_peripheral_init>
	//lcd_init();
#ifdef USART_SUPPORT
    //usartinit();
#endif
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <SysTick_Handler>:

/* Tick timer count. */
volatile unsigned long time32_incr;

void SysTick_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    time32_incr++;
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Handler+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <SysTick_Handler+0x18>)
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000008c 	.word	0x2000008c

08001d48 <EXTI9_5_IRQHandler>:
 * @param none
 *
 * @return none
 */
void EXTI9_5_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    do
    {
        port_deca_isr();
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <EXTI9_5_IRQHandler+0x24>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4798      	blx	r3
    } while (port_CheckEXT_IRQ() == 1);
 8001d52:	2120      	movs	r1, #32
 8001d54:	4806      	ldr	r0, [pc, #24]	; (8001d70 <EXTI9_5_IRQHandler+0x28>)
 8001d56:	f7fe faff 	bl	8000358 <GPIO_ReadInputDataBit>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d0f5      	beq.n	8001d4c <EXTI9_5_IRQHandler+0x4>
    /* Clear EXTI Line 5 Pending Bit */
    EXTI_ClearITPendingBit(DECAIRQ_EXTI);
 8001d60:	2020      	movs	r0, #32
 8001d62:	f7fe f9fb 	bl	800015c <EXTI_ClearITPendingBit>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000088 	.word	0x20000088
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <main>:
    DWT_PHRMODE_STD, /* PHY header mode. */
    (1025 + 64 - 32) /* SFD timeout (preamble length + 1 + SFD length - PAC size). Used in RX only. */
};

int main(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  int i = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]

  /* Start with board specific hardware init. */
     peripherals_init();
 8001d7e:	f7ff ffc8 	bl	8001d12 <peripherals_init>

     /* Reset and initialise DW1000. See NOTE 2 below.
      * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
      * performance. */
     reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001d82:	f7ff ff97 	bl	8001cb4 <reset_DW1000>
     spi_set_rate_low();
 8001d86:	f7ff feef 	bl	8001b68 <spi_set_rate_low>
     uint32_t deviceID = dwt_readdevid();
 8001d8a:	f7fe ffe3 	bl	8000d54 <dwt_readdevid>
 8001d8e:	6038      	str	r0, [r7, #0]

     if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7fe ff25 	bl	8000be0 <dwt_initialise>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d103      	bne.n	8001da6 <main+0x32>
     {
    	 lcd_display_str("INIT FAILED");
 8001d9e:	4818      	ldr	r0, [pc, #96]	; (8001e00 <main+0x8c>)
 8001da0:	f7ff fdbe 	bl	8001920 <lcd_display_str>
         while (1)
 8001da4:	e7fe      	b.n	8001da4 <main+0x30>
         	 { };
     }
     spi_set_rate_high();
 8001da6:	f7ff fee6 	bl	8001b76 <spi_set_rate_high>

     /* Configure DW1000. See NOTE 3 below. */
     dwt_configure(&config);
 8001daa:	4816      	ldr	r0, [pc, #88]	; (8001e04 <main+0x90>)
 8001dac:	f7fe ffdc 	bl	8000d68 <dwt_configure>

     while(1)
     {
    	 /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
    	         dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001db0:	2200      	movs	r2, #0
 8001db2:	4915      	ldr	r1, [pc, #84]	; (8001e08 <main+0x94>)
 8001db4:	200c      	movs	r0, #12
 8001db6:	f7ff f941 	bl	800103c <dwt_writetxdata>
    	         dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	200c      	movs	r0, #12
 8001dc0:	f7ff f95a 	bl	8001078 <dwt_writetxfctrl>

    	         /* Start transmission. */
    	         dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fbcd 	bl	8001564 <dwt_starttx>

    	         /* Poll DW1000 until TX frame sent event set. See NOTE 5 below.
    	          * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
    	          * function to access it.*/
    	         while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8001dca:	bf00      	nop
 8001dcc:	2100      	movs	r1, #0
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f7ff fa27 	bl	8001222 <dwt_read32bitoffsetreg>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f6      	beq.n	8001dcc <main+0x58>
    	         { };

    	         /* Clear TX frame sent event. */
    	         dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	2100      	movs	r1, #0
 8001de2:	200f      	movs	r0, #15
 8001de4:	f7ff fa90 	bl	8001308 <dwt_write32bitoffsetreg>

    	         /* Execute a delay between transmissions. */
    	         sleep_ms(TX_DELAY_MS);
 8001de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dec:	f7ff fcb0 	bl	8001750 <sleep_ms>

    	         /* Increment the blink frame sequence number (modulo 256). */
    	         tx_msg[BLINK_FRAME_SN_IDX]++;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <main+0x94>)
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <main+0x94>)
 8001dfa:	705a      	strb	r2, [r3, #1]
    	         dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001dfc:	e7d8      	b.n	8001db0 <main+0x3c>
 8001dfe:	bf00      	nop
 8001e00:	0800207c 	.word	0x0800207c
 8001e04:	20000024 	.word	0x20000024
 8001e08:	20000018 	.word	0x20000018

08001e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e12:	e003      	b.n	8001e1c <LoopCopyDataInit>

08001e14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001e16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e1a:	3104      	adds	r1, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e1c:	480b      	ldr	r0, [pc, #44]	; (8001e4c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001e20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e24:	d3f6      	bcc.n	8001e14 <CopyDataInit>
	ldr	r2, =_sbss
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001e28:	e002      	b.n	8001e30 <LoopFillZerobss>

08001e2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e2c:	f842 3b04 	str.w	r3, [r2], #4

08001e30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001e32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e34:	d3f9      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e36:	f000 f837 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f000 f8ef 	bl	800201c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e3e:	f7ff ff99 	bl	8001d74 <main>
	bx	lr
 8001e42:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e44:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001e48:	08002144 	.word	0x08002144
	ldr	r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e50:	20000034 	.word	0x20000034
	ldr	r2, =_sbss
 8001e54:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8001e58:	20000090 	.word	0x20000090

08001e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_2_IRQHandler>

08001e5e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <SystemInit+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <SystemInit+0x5c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001eb8:	4912      	ldr	r1, [pc, #72]	; (8001f04 <SystemInit+0x5c>)
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <SystemInit+0x5c>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <SystemInit+0x60>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <SystemInit+0x5c>)
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <SystemInit+0x5c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <SystemInit+0x5c>)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <SystemInit+0x5c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <SystemInit+0x5c>)
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <SystemInit+0x5c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001eea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SystemInit+0x5c>)
 8001eee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ef2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001ef4:	f000 f80c 	bl	8001f10 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SystemInit+0x64>)
 8001efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efe:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	f8ff0000 	.word	0xf8ff0000
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001f14:	f000 f802 	bl	8001f1c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f2c:	4b39      	ldr	r3, [pc, #228]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3301      	adds	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <SetSysClockTo72+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f52:	d1f0      	bne.n	8001f36 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001f54:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001f60:	2301      	movs	r3, #1
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	e001      	b.n	8001f6a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d14b      	bne.n	8002008 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <SetSysClockTo72+0xfc>)
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <SetSysClockTo72+0xfc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <SetSysClockTo72+0xfc>)
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <SetSysClockTo72+0xfc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <SetSysClockTo72+0xfc>)
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <SetSysClockTo72+0xfc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <SetSysClockTo72+0xf8>)
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001fba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001fbc:	4a15      	ldr	r2, [pc, #84]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001fc6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001fd4:	bf00      	nop
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f9      	beq.n	8001fd6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <SetSysClockTo72+0xf8>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 0303 	bic.w	r3, r3, #3
 8001fec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <SetSysClockTo72+0xf8>)
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <SetSysClockTo72+0xf8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001ffa:	bf00      	nop
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SetSysClockTo72+0xf8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d1f9      	bne.n	8001ffc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <__libc_init_array>:
 800201c:	b570      	push	{r4, r5, r6, lr}
 800201e:	2500      	movs	r5, #0
 8002020:	4e0c      	ldr	r6, [pc, #48]	; (8002054 <__libc_init_array+0x38>)
 8002022:	4c0d      	ldr	r4, [pc, #52]	; (8002058 <__libc_init_array+0x3c>)
 8002024:	1ba4      	subs	r4, r4, r6
 8002026:	10a4      	asrs	r4, r4, #2
 8002028:	42a5      	cmp	r5, r4
 800202a:	d109      	bne.n	8002040 <__libc_init_array+0x24>
 800202c:	f000 f81a 	bl	8002064 <_init>
 8002030:	2500      	movs	r5, #0
 8002032:	4e0a      	ldr	r6, [pc, #40]	; (800205c <__libc_init_array+0x40>)
 8002034:	4c0a      	ldr	r4, [pc, #40]	; (8002060 <__libc_init_array+0x44>)
 8002036:	1ba4      	subs	r4, r4, r6
 8002038:	10a4      	asrs	r4, r4, #2
 800203a:	42a5      	cmp	r5, r4
 800203c:	d105      	bne.n	800204a <__libc_init_array+0x2e>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002044:	4798      	blx	r3
 8002046:	3501      	adds	r5, #1
 8002048:	e7ee      	b.n	8002028 <__libc_init_array+0xc>
 800204a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800204e:	4798      	blx	r3
 8002050:	3501      	adds	r5, #1
 8002052:	e7f2      	b.n	800203a <__libc_init_array+0x1e>
 8002054:	0800213c 	.word	0x0800213c
 8002058:	0800213c 	.word	0x0800213c
 800205c:	0800213c 	.word	0x0800213c
 8002060:	08002140 	.word	0x08002140

08002064 <_init>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr

08002070 <_fini>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr
