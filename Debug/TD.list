
C:\Users\Gustavo\Documents\TD_EfisioHugo\TD_SimpleTX\Debug\TD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000000  08003ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001b80  20000188  08003f60  00020188  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001d08  08003f60  00021d08  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   000229b7  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004a12  00000000  00000000  00042b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d9b  00000000  00000000  00047576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e88  00000000  00000000  0004f318  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001218  00000000  00000000  000501a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000081d3  00000000  00000000  000513b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004311  00000000  00000000  0005958b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005d89c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000268c  00000000  00000000  0005d918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c84 	.word	0x08003c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08003c84 	.word	0x08003c84

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f89a 	bl	8000294 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f846 	bl	80001f8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	2000013c 	.word	0x2000013c

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f827 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2005      	movs	r0, #5
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f003 faa0 	bl	80036d0 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000428 	.word	0x20000428

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000428 	.word	0x20000428

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d4:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e2:	041b      	lsls	r3, r3, #16
 80001e4:	0c1b      	lsrs	r3, r3, #16
 80001e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f0:	60d3      	str	r3, [r2, #12]
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001fa:	b530      	push	{r4, r5, lr}
 80001fc:	68dc      	ldr	r4, [r3, #12]
 80001fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000202:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	2b04      	cmp	r3, #4
 800020a:	bf28      	it	cs
 800020c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000210:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	bf98      	it	ls
 8000216:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	fa05 f303 	lsl.w	r3, r5, r3
 800021c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000220:	bf88      	it	hi
 8000222:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000224:	4019      	ands	r1, r3
 8000226:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000228:	fa05 f404 	lsl.w	r4, r5, r4
 800022c:	3c01      	subs	r4, #1
 800022e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000230:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	ea42 0201 	orr.w	r2, r2, r1
 8000236:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	bfaf      	iteee	ge
 800023c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	4b06      	ldrlt	r3, [pc, #24]	; (800025c <HAL_NVIC_SetPriority+0x64>)
 8000242:	f000 000f 	andlt.w	r0, r0, #15
 8000246:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	bfa5      	ittet	ge
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000ed14 	.word	0xe000ed14

08000260 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000260:	2301      	movs	r3, #1
 8000262:	0942      	lsrs	r2, r0, #5
 8000264:	f000 001f 	and.w	r0, r0, #31
 8000268:	fa03 f000 	lsl.w	r0, r3, r0
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <HAL_NVIC_EnableIRQ+0x14>)
 800026e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100

08000278 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000278:	2201      	movs	r2, #1
 800027a:	0943      	lsrs	r3, r0, #5
 800027c:	f000 001f 	and.w	r0, r0, #31
 8000280:	fa02 f000 	lsl.w	r0, r2, r0
 8000284:	4a02      	ldr	r2, [pc, #8]	; (8000290 <HAL_NVIC_DisableIRQ+0x18>)
 8000286:	3320      	adds	r3, #32
 8000288:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000e100 	.word	0xe000e100

08000294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000294:	3801      	subs	r0, #1
 8000296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029a:	d20a      	bcs.n	80002b2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002aa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002c2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	bf0c      	ite	eq
 80002c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002cc:	f022 0204 	bicne.w	r2, r2, #4
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	4770      	bx	lr
 80002d4:	e000e010 	.word	0xe000e010

080002d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d8:	4770      	bx	lr

080002da <HAL_SYSTICK_IRQHandler>:
{
 80002da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002dc:	f7ff fffc 	bl	80002d8 <HAL_SYSTICK_Callback>
 80002e0:	bd08      	pop	{r3, pc}
	...

080002e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ea:	4616      	mov	r6, r2
 80002ec:	4b65      	ldr	r3, [pc, #404]	; (8000484 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ee:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000494 <HAL_GPIO_Init+0x1b0>
 80002f2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000498 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002f6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002fc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000300:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000304:	45a0      	cmp	r8, r4
 8000306:	d17f      	bne.n	8000408 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000308:	684d      	ldr	r5, [r1, #4]
 800030a:	2d12      	cmp	r5, #18
 800030c:	f000 80af 	beq.w	800046e <HAL_GPIO_Init+0x18a>
 8000310:	f200 8088 	bhi.w	8000424 <HAL_GPIO_Init+0x140>
 8000314:	2d02      	cmp	r5, #2
 8000316:	f000 80a7 	beq.w	8000468 <HAL_GPIO_Init+0x184>
 800031a:	d87c      	bhi.n	8000416 <HAL_GPIO_Init+0x132>
 800031c:	2d00      	cmp	r5, #0
 800031e:	f000 808e 	beq.w	800043e <HAL_GPIO_Init+0x15a>
 8000322:	2d01      	cmp	r5, #1
 8000324:	f000 809e 	beq.w	8000464 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000328:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800032c:	2cff      	cmp	r4, #255	; 0xff
 800032e:	bf93      	iteet	ls
 8000330:	4682      	movls	sl, r0
 8000332:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000336:	3d08      	subhi	r5, #8
 8000338:	f8d0 b000 	ldrls.w	fp, [r0]
 800033c:	bf92      	itee	ls
 800033e:	00b5      	lslls	r5, r6, #2
 8000340:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000344:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000346:	fa09 f805 	lsl.w	r8, r9, r5
 800034a:	ea2b 0808 	bic.w	r8, fp, r8
 800034e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000352:	bf88      	it	hi
 8000354:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000358:	ea48 0505 	orr.w	r5, r8, r5
 800035c:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000360:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000364:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000368:	d04e      	beq.n	8000408 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4d47      	ldr	r5, [pc, #284]	; (8000488 <HAL_GPIO_Init+0x1a4>)
 800036c:	4f46      	ldr	r7, [pc, #280]	; (8000488 <HAL_GPIO_Init+0x1a4>)
 800036e:	69ad      	ldr	r5, [r5, #24]
 8000370:	f026 0803 	bic.w	r8, r6, #3
 8000374:	f045 0501 	orr.w	r5, r5, #1
 8000378:	61bd      	str	r5, [r7, #24]
 800037a:	69bd      	ldr	r5, [r7, #24]
 800037c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000380:	f005 0501 	and.w	r5, r5, #1
 8000384:	9501      	str	r5, [sp, #4]
 8000386:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800038a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000390:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000394:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000398:	fa09 f90b 	lsl.w	r9, r9, fp
 800039c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a0:	4d3a      	ldr	r5, [pc, #232]	; (800048c <HAL_GPIO_Init+0x1a8>)
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d068      	beq.n	8000478 <HAL_GPIO_Init+0x194>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d066      	beq.n	800047c <HAL_GPIO_Init+0x198>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d064      	beq.n	8000480 <HAL_GPIO_Init+0x19c>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	bf0c      	ite	eq
 80003be:	2503      	moveq	r5, #3
 80003c0:	2504      	movne	r5, #4
 80003c2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003ca:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003ce:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003d0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80003d4:	bf14      	ite	ne
 80003d6:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80003d8:	43a5      	biceq	r5, r4
 80003da:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003dc:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003de:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80003e2:	bf14      	ite	ne
 80003e4:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80003e6:	43a5      	biceq	r5, r4
 80003e8:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003ea:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ec:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003f0:	bf14      	ite	ne
 80003f2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003f4:	43a5      	biceq	r5, r4
 80003f6:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003f8:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003fa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003fe:	bf14      	ite	ne
 8000400:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000402:	ea25 0404 	biceq.w	r4, r5, r4
 8000406:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000408:	3601      	adds	r6, #1
 800040a:	2e10      	cmp	r6, #16
 800040c:	f47f af73 	bne.w	80002f6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000410:	b003      	add	sp, #12
 8000412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000416:	2d03      	cmp	r5, #3
 8000418:	d022      	beq.n	8000460 <HAL_GPIO_Init+0x17c>
 800041a:	2d11      	cmp	r5, #17
 800041c:	d184      	bne.n	8000328 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800041e:	68ca      	ldr	r2, [r1, #12]
 8000420:	3204      	adds	r2, #4
          break;
 8000422:	e781      	b.n	8000328 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000424:	4f1a      	ldr	r7, [pc, #104]	; (8000490 <HAL_GPIO_Init+0x1ac>)
 8000426:	42bd      	cmp	r5, r7
 8000428:	d009      	beq.n	800043e <HAL_GPIO_Init+0x15a>
 800042a:	d812      	bhi.n	8000452 <HAL_GPIO_Init+0x16e>
 800042c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800049c <HAL_GPIO_Init+0x1b8>
 8000430:	454d      	cmp	r5, r9
 8000432:	d004      	beq.n	800043e <HAL_GPIO_Init+0x15a>
 8000434:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000438:	454d      	cmp	r5, r9
 800043a:	f47f af75 	bne.w	8000328 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800043e:	688a      	ldr	r2, [r1, #8]
 8000440:	b1c2      	cbz	r2, 8000474 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000442:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000444:	bf0c      	ite	eq
 8000446:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800044a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044e:	2208      	movs	r2, #8
 8000450:	e76a      	b.n	8000328 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000452:	4575      	cmp	r5, lr
 8000454:	d0f3      	beq.n	800043e <HAL_GPIO_Init+0x15a>
 8000456:	4565      	cmp	r5, ip
 8000458:	d0f1      	beq.n	800043e <HAL_GPIO_Init+0x15a>
 800045a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a0 <HAL_GPIO_Init+0x1bc>
 800045e:	e7eb      	b.n	8000438 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000460:	2200      	movs	r2, #0
 8000462:	e761      	b.n	8000328 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000464:	68ca      	ldr	r2, [r1, #12]
          break;
 8000466:	e75f      	b.n	8000328 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000468:	68ca      	ldr	r2, [r1, #12]
 800046a:	3208      	adds	r2, #8
          break;
 800046c:	e75c      	b.n	8000328 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800046e:	68ca      	ldr	r2, [r1, #12]
 8000470:	320c      	adds	r2, #12
          break;
 8000472:	e759      	b.n	8000328 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000474:	2204      	movs	r2, #4
 8000476:	e757      	b.n	8000328 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000478:	2500      	movs	r5, #0
 800047a:	e7a2      	b.n	80003c2 <HAL_GPIO_Init+0xde>
 800047c:	2501      	movs	r5, #1
 800047e:	e7a0      	b.n	80003c2 <HAL_GPIO_Init+0xde>
 8000480:	2502      	movs	r5, #2
 8000482:	e79e      	b.n	80003c2 <HAL_GPIO_Init+0xde>
 8000484:	40010400 	.word	0x40010400
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800
 8000490:	10210000 	.word	0x10210000
 8000494:	10310000 	.word	0x10310000
 8000498:	10320000 	.word	0x10320000
 800049c:	10110000 	.word	0x10110000
 80004a0:	10220000 	.word	0x10220000

080004a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004a4:	6883      	ldr	r3, [r0, #8]
 80004a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004a8:	bf14      	ite	ne
 80004aa:	2001      	movne	r0, #1
 80004ac:	2000      	moveq	r0, #0
 80004ae:	4770      	bx	lr

080004b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004b0:	b10a      	cbz	r2, 80004b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004b2:	6101      	str	r1, [r0, #16]
 80004b4:	4770      	bx	lr
 80004b6:	0409      	lsls	r1, r1, #16
 80004b8:	e7fb      	b.n	80004b2 <HAL_GPIO_WritePin+0x2>
	...

080004bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80004bc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004c0:	6959      	ldr	r1, [r3, #20]
 80004c2:	4201      	tst	r1, r0
 80004c4:	d002      	beq.n	80004cc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004c8:	f003 f8bc 	bl	8003644 <HAL_GPIO_EXTI_Callback>
 80004cc:	bd08      	pop	{r3, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400

080004d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80004d8:	4604      	mov	r4, r0
{
 80004da:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80004dc:	2800      	cmp	r0, #0
 80004de:	d060      	beq.n	80005a2 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80004e0:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80004e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004e8:	b91b      	cbnz	r3, 80004f2 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004ea:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004ee:	f003 f9e5 	bl	80038bc <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004f2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004f4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004f6:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004f8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004fc:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000500:	f001 f909 	bl	8001716 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000508:	682b      	ldr	r3, [r5, #0]
 800050a:	f104 0804 	add.w	r8, r4, #4
 800050e:	6033      	str	r3, [r6, #0]
 8000510:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000514:	6820      	ldr	r0, [r4, #0]
 8000516:	f001 f8ee 	bl	80016f6 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800051a:	2100      	movs	r1, #0
 800051c:	6820      	ldr	r0, [r4, #0]
 800051e:	f001 f904 	bl	800172a <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000522:	2100      	movs	r1, #0
 8000524:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000526:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000528:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800052a:	4608      	mov	r0, r1
 800052c:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000530:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000534:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000536:	3101      	adds	r1, #1
 8000538:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 800053a:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800053e:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000542:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000544:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000546:	6410      	str	r0, [r2, #64]	; 0x40
 8000548:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 800054c:	d1f0      	bne.n	8000530 <HAL_PCD_Init+0x5c>
 800054e:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000550:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000552:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000556:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000558:	3201      	adds	r2, #1
 800055a:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 800055c:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000560:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000564:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000568:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 800056c:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000570:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000574:	d1ed      	bne.n	8000552 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000576:	466e      	mov	r6, sp
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800057c:	682b      	ldr	r3, [r5, #0]
 800057e:	6033      	str	r3, [r6, #0]
 8000580:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000584:	6820      	ldr	r0, [r4, #0]
 8000586:	f001 f8d2 	bl	800172e <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 800058a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800058c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000590:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000592:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000596:	f001 fba1 	bl	8001cdc <USB_DevDisconnect>
  return HAL_OK;
 800059a:	2000      	movs	r0, #0
}
 800059c:	b006      	add	sp, #24
 800059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80005a2:	2001      	movs	r0, #1
 80005a4:	e7fa      	b.n	800059c <HAL_PCD_Init+0xc8>

080005a6 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80005a6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80005aa:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005ac:	2b01      	cmp	r3, #1
{
 80005ae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005b0:	d00e      	beq.n	80005d0 <HAL_PCD_Start+0x2a>
 80005b2:	2101      	movs	r1, #1
 80005b4:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80005b8:	f003 faad 	bl	8003b16 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80005bc:	6820      	ldr	r0, [r4, #0]
 80005be:	f001 fb8b 	bl	8001cd8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005c2:	6820      	ldr	r0, [r4, #0]
 80005c4:	f001 f89e 	bl	8001704 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80005ce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005d0:	2002      	movs	r0, #2
}
 80005d2:	bd10      	pop	{r4, pc}

080005d4 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005d4:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80005d8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005da:	2a01      	cmp	r2, #1
{
 80005dc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005de:	d00b      	beq.n	80005f8 <HAL_PCD_SetAddress+0x24>
 80005e0:	2201      	movs	r2, #1
 80005e2:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80005e6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005ea:	6800      	ldr	r0, [r0, #0]
 80005ec:	f001 fb6e 	bl	8001ccc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80005f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005f8:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005fa:	bd10      	pop	{r4, pc}

080005fc <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000600:	b248      	sxtb	r0, r1
 8000602:	2800      	cmp	r0, #0
 8000604:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000608:	bfb5      	itete	lt
 800060a:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800060e:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000612:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000614:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000618:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 800061a:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 800061c:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 800061e:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000620:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000624:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000626:	2b01      	cmp	r3, #1
 8000628:	d009      	beq.n	800063e <HAL_PCD_EP_Open+0x42>
 800062a:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800062c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800062e:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000632:	f001 f897 	bl	8001764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000636:	2000      	movs	r0, #0
 8000638:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 800063c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800063e:	2002      	movs	r0, #2
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}

08000642 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000642:	b24b      	sxtb	r3, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800064a:	bfb5      	itete	lt
 800064c:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000650:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000654:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000656:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800065a:	0fdb      	lsrs	r3, r3, #31
{  
 800065c:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 800065e:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000660:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000662:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000666:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000668:	2b01      	cmp	r3, #1
 800066a:	d009      	beq.n	8000680 <HAL_PCD_EP_Close+0x3e>
 800066c:	2301      	movs	r3, #1
 800066e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000672:	6800      	ldr	r0, [r0, #0]
 8000674:	f001 f9e8 	bl	8001a48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000678:	2000      	movs	r0, #0
 800067a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 800067e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000680:	2002      	movs	r0, #2
}
 8000682:	bd10      	pop	{r4, pc}

08000684 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000684:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000686:	2600      	movs	r6, #0
 8000688:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800068c:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 800068e:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000690:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000694:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000698:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800069a:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 800069e:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 80006a2:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 80006a6:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 80006aa:	6800      	ldr	r0, [r0, #0]
 80006ac:	f001 fb30 	bl	8001d10 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006b0:	4630      	mov	r0, r6
 80006b2:	bd70      	pop	{r4, r5, r6, pc}

080006b4 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80006b4:	f001 010f 	and.w	r1, r1, #15
 80006b8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80006bc:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80006c0:	4770      	bx	lr

080006c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80006c6:	b570      	push	{r4, r5, r6, lr}
 80006c8:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80006ca:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006cc:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006ce:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006d0:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80006d2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006d6:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80006da:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80006dc:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80006de:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80006e0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80006e4:	6800      	ldr	r0, [r0, #0]
 80006e6:	f001 fb13 	bl	8001d10 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006ea:	4630      	mov	r0, r6
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080006f0 <HAL_PCD_IRQHandler>:
{ 
 80006f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006f4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	f001 faf2 	bl	8001ce0 <USB_ReadInterrupts>
 80006fc:	0400      	lsls	r0, r0, #16
 80006fe:	f100 8098 	bmi.w	8000832 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000702:	6820      	ldr	r0, [r4, #0]
 8000704:	f001 faec 	bl	8001ce0 <USB_ReadInterrupts>
 8000708:	0541      	lsls	r1, r0, #21
 800070a:	d50f      	bpl.n	800072c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800070c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800070e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000710:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000718:	041b      	lsls	r3, r3, #16
 800071a:	0c1b      	lsrs	r3, r3, #16
 800071c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000720:	f003 f903 	bl	800392a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000724:	2100      	movs	r1, #0
 8000726:	4620      	mov	r0, r4
 8000728:	f7ff ff54 	bl	80005d4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800072c:	6820      	ldr	r0, [r4, #0]
 800072e:	f001 fad7 	bl	8001ce0 <USB_ReadInterrupts>
 8000732:	0447      	lsls	r7, r0, #17
 8000734:	d508      	bpl.n	8000748 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000736:	6822      	ldr	r2, [r4, #0]
 8000738:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800073c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000740:	041b      	lsls	r3, r3, #16
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000748:	6820      	ldr	r0, [r4, #0]
 800074a:	f001 fac9 	bl	8001ce0 <USB_ReadInterrupts>
 800074e:	0486      	lsls	r6, r0, #18
 8000750:	d508      	bpl.n	8000764 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000752:	6822      	ldr	r2, [r4, #0]
 8000754:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800075c:	041b      	lsls	r3, r3, #16
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000764:	6820      	ldr	r0, [r4, #0]
 8000766:	f001 fabb 	bl	8001ce0 <USB_ReadInterrupts>
 800076a:	04c5      	lsls	r5, r0, #19
 800076c:	d51c      	bpl.n	80007a8 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800076e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000770:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000772:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000776:	f023 0304 	bic.w	r3, r3, #4
 800077a:	041b      	lsls	r3, r3, #16
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000782:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000786:	f023 0308 	bic.w	r3, r3, #8
 800078a:	041b      	lsls	r3, r3, #16
 800078c:	0c1b      	lsrs	r3, r3, #16
 800078e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000792:	f003 f8e7 	bl	8003964 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800079c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007a0:	041b      	lsls	r3, r3, #16
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80007a8:	6820      	ldr	r0, [r4, #0]
 80007aa:	f001 fa99 	bl	8001ce0 <USB_ReadInterrupts>
 80007ae:	0500      	lsls	r0, r0, #20
 80007b0:	d51d      	bpl.n	80007ee <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80007b2:	6820      	ldr	r0, [r4, #0]
 80007b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80007c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007d2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80007e0:	f001 fa7e 	bl	8001ce0 <USB_ReadInterrupts>
 80007e4:	04c1      	lsls	r1, r0, #19
 80007e6:	d402      	bmi.n	80007ee <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80007e8:	4620      	mov	r0, r4
 80007ea:	f003 f8ab 	bl	8003944 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80007ee:	6820      	ldr	r0, [r4, #0]
 80007f0:	f001 fa76 	bl	8001ce0 <USB_ReadInterrupts>
 80007f4:	0582      	lsls	r2, r0, #22
 80007f6:	d50b      	bpl.n	8000810 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007f8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80007fa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000804:	041b      	lsls	r3, r3, #16
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800080c:	f003 f889 	bl	8003922 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000810:	6820      	ldr	r0, [r4, #0]
 8000812:	f001 fa65 	bl	8001ce0 <USB_ReadInterrupts>
 8000816:	05c3      	lsls	r3, r0, #23
 8000818:	d508      	bpl.n	800082c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800082c:	b002      	add	sp, #8
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000832:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000834:	4fc8      	ldr	r7, [pc, #800]	; (8000b58 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000836:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b5c <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800083a:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000b60 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 800083e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000842:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000846:	6820      	ldr	r0, [r4, #0]
 8000848:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800084c:	b29b      	uxth	r3, r3
 800084e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000852:	041b      	lsls	r3, r3, #16
 8000854:	f57f af55 	bpl.w	8000702 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000858:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 800085c:	f015 050f 	ands.w	r5, r5, #15
 8000860:	f040 80ab 	bne.w	80009ba <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000864:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000868:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800086a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800086e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000870:	d126      	bne.n	80008c0 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000872:	403b      	ands	r3, r7
 8000874:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000876:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800087a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800087e:	b29b      	uxth	r3, r3
 8000880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000884:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000888:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800088c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800088e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000892:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000894:	4413      	add	r3, r2
 8000896:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000898:	4620      	mov	r0, r4
 800089a:	f003 f83b 	bl	8003914 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800089e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0cf      	beq.n	8000846 <HAL_PCD_IRQHandler+0x156>
 80008a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	d1cc      	bne.n	8000846 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80008ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008b0:	6821      	ldr	r1, [r4, #0]
 80008b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b6:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80008ba:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80008be:	e7c2      	b.n	8000846 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80008c0:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008c8:	051a      	lsls	r2, r3, #20
 80008ca:	d51f      	bpl.n	800090c <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008d0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008e2:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ea:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008ee:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80008f2:	f001 fb0d 	bl	8001f10 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008f6:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008f8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008fa:	8813      	ldrh	r3, [r2, #0]
 80008fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000900:	051b      	lsls	r3, r3, #20
 8000902:	0d1b      	lsrs	r3, r3, #20
 8000904:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000906:	f002 fff7 	bl	80038f8 <HAL_PCD_SetupStageCallback>
 800090a:	e79c      	b.n	8000846 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800090c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	d598      	bpl.n	8000846 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000914:	8803      	ldrh	r3, [r0, #0]
 8000916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800091a:	051b      	lsls	r3, r3, #20
 800091c:	0d1b      	lsrs	r3, r3, #20
 800091e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000920:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000924:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000928:	b29b      	uxth	r3, r3
 800092a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800092e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000932:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800093a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 800093e:	b163      	cbz	r3, 800095a <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000940:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000944:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000948:	f001 fae2 	bl	8001f10 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800094c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000950:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000954:	4413      	add	r3, r2
 8000956:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800095a:	2100      	movs	r1, #0
 800095c:	4620      	mov	r0, r4
 800095e:	f002 ffd1 	bl	8003904 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000962:	6822      	ldr	r2, [r4, #0]
 8000964:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000968:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800096c:	2d3e      	cmp	r5, #62	; 0x3e
 800096e:	b289      	uxth	r1, r1
 8000970:	f101 0106 	add.w	r1, r1, #6
 8000974:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000978:	d917      	bls.n	80009aa <HAL_PCD_IRQHandler+0x2ba>
 800097a:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800097e:	06ee      	lsls	r6, r5, #27
 8000980:	bf04      	itt	eq
 8000982:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000986:	b29b      	uxtheq	r3, r3
 8000988:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 800098c:	b29b      	uxth	r3, r3
 800098e:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000992:	8813      	ldrh	r3, [r2, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	ea03 0308 	and.w	r3, r3, r8
 800099a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800099e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a6:	8013      	strh	r3, [r2, #0]
 80009a8:	e74d      	b.n	8000846 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009aa:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80009ae:	07ed      	lsls	r5, r5, #31
 80009b0:	bf44      	itt	mi
 80009b2:	3301      	addmi	r3, #1
 80009b4:	b29b      	uxthmi	r3, r3
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	e7e8      	b.n	800098c <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80009ba:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80009c8:	0419      	lsls	r1, r3, #16
 80009ca:	d53f      	bpl.n	8000a4c <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009cc:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009d0:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d8:	051b      	lsls	r3, r3, #20
 80009da:	0d1b      	lsrs	r3, r3, #20
 80009dc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80009e0:	eb04 010a 	add.w	r1, r4, sl
 80009e4:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d174      	bne.n	8000ad6 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009ec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009f0:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3306      	adds	r3, #6
 80009f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a00:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000a04:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000a08:	b136      	cbz	r6, 8000a18 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a0a:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000a0e:	4633      	mov	r3, r6
 8000a10:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000a14:	f001 fa7c 	bl	8001f10 <USB_ReadPMA>
 8000a18:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000a1c:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000a20:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000a24:	4433      	add	r3, r6
 8000a26:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a2a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000a2e:	4432      	add	r2, r6
 8000a30:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a34:	b123      	cbz	r3, 8000a40 <HAL_PCD_IRQHandler+0x350>
 8000a36:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000a3a:	4286      	cmp	r6, r0
 8000a3c:	f080 8086 	bcs.w	8000b4c <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a40:	44a2      	add	sl, r4
 8000a42:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000a46:	4620      	mov	r0, r4
 8000a48:	f002 ff5c 	bl	8003904 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a50:	061a      	lsls	r2, r3, #24
 8000a52:	f57f aef8 	bpl.w	8000846 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a56:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a58:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a5a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a5e:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	403b      	ands	r3, r7
 8000a64:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a68:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a6c:	3502      	adds	r5, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d178      	bne.n	8000b64 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a72:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a76:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a8a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a92:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000a94:	b11b      	cbz	r3, 8000a9e <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a96:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a98:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a9a:	f001 f927 	bl	8001cec <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a9e:	6822      	ldr	r2, [r4, #0]
 8000aa0:	4426      	add	r6, r4
 8000aa2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000aa6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	3302      	adds	r3, #2
 8000aae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ab2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ab6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000aba:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000abc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000ac0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000ac2:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000ac4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000ac6:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ac8:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 8085 	bne.w	8000bda <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ad0:	f002 ff20 	bl	8003914 <HAL_PCD_DataInStageCallback>
 8000ad4:	e6b7      	b.n	8000846 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000ad6:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000ada:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ae4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ae8:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000aea:	d021      	beq.n	8000b30 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000aec:	3202      	adds	r2, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000af4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000af8:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000afc:	b136      	cbz	r6, 8000b0c <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000afe:	4633      	mov	r3, r6
 8000b00:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b04:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000b08:	f001 fa02 	bl	8001f10 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000b0c:	eb04 030a 	add.w	r3, r4, sl
 8000b10:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000b14:	6822      	ldr	r2, [r4, #0]
 8000b16:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b1e:	051b      	lsls	r3, r3, #20
 8000b20:	0d1b      	lsrs	r3, r3, #20
 8000b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b2a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b2e:	e773      	b.n	8000a18 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b30:	3206      	adds	r2, #6
 8000b32:	4413      	add	r3, r2
 8000b34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b38:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000b3c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d0e3      	beq.n	8000b0c <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b44:	4633      	mov	r3, r6
 8000b46:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000b4a:	e7db      	b.n	8000b04 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b4c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b50:	4620      	mov	r0, r4
 8000b52:	f7ff fd97 	bl	8000684 <HAL_PCD_EP_Receive>
 8000b56:	e779      	b.n	8000a4c <HAL_PCD_IRQHandler+0x35c>
 8000b58:	ffff8f0f 	.word	0xffff8f0f
 8000b5c:	ffffbf8f 	.word	0xffffbf8f
 8000b60:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b64:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b72:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b76:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b78:	d020      	beq.n	8000bbc <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b7a:	3202      	adds	r2, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b86:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b8e:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b90:	b11b      	cbz	r3, 8000b9a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b92:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b94:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b96:	f001 f8a9 	bl	8001cec <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b9a:	19a3      	adds	r3, r4, r6
 8000b9c:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000ba0:	6822      	ldr	r2, [r4, #0]
 8000ba2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000baa:	051b      	lsls	r3, r3, #20
 8000bac:	0d1b      	lsrs	r3, r3, #20
 8000bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000bba:	e770      	b.n	8000a9e <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000bbc:	3206      	adds	r2, #6
 8000bbe:	4413      	add	r3, r2
 8000bc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bc4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000bc8:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bd0:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0e1      	beq.n	8000b9a <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000bd6:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000bd8:	e7dc      	b.n	8000b94 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000bda:	f7ff fd72 	bl	80006c2 <HAL_PCD_EP_Transmit>
 8000bde:	e632      	b.n	8000846 <HAL_PCD_IRQHandler+0x156>

08000be0 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000be0:	2201      	movs	r2, #1
{
 8000be2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000be4:	b24b      	sxtb	r3, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bec:	bfb5      	itete	lt
 8000bee:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bf2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bf6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bf8:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bfc:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000bfe:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000c00:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c02:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c04:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000c06:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c0a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d00e      	beq.n	8000c2e <HAL_PCD_EP_SetStall+0x4e>
 8000c10:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000c14:	6800      	ldr	r0, [r0, #0]
 8000c16:	f000 ffe5 	bl	8001be4 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000c1a:	b925      	cbnz	r5, 8000c26 <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c1c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	f001 f861 	bl	8001ce8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000c26:	2000      	movs	r0, #0
 8000c28:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000c2c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c2e:	2002      	movs	r0, #2
}
 8000c30:	bd38      	pop	{r3, r4, r5, pc}

08000c32 <HAL_PCD_EP_ClrStall>:
{
 8000c32:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000c34:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000c36:	b24b      	sxtb	r3, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c3e:	bfb5      	itete	lt
 8000c40:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c44:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c48:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c4a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c4e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c50:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c52:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c54:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000c56:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c5a:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d009      	beq.n	8000c74 <HAL_PCD_EP_ClrStall+0x42>
 8000c60:	2301      	movs	r3, #1
 8000c62:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c66:	6800      	ldr	r0, [r0, #0]
 8000c68:	f000 ffee 	bl	8001c48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c6c:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000c70:	4620      	mov	r0, r4
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c74:	2002      	movs	r0, #2
}
 8000c76:	bd38      	pop	{r3, r4, r5, pc}

08000c78 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000c78:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c7c:	bf1b      	ittet	ne
 8000c7e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c82:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c86:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c8a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c8c:	bf08      	it	eq
 8000c8e:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c92:	b91a      	cbnz	r2, 8000c9c <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000c94:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c96:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000c98:	2000      	movs	r0, #0
 8000c9a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c9c:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000c9e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000ca0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000ca2:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000ca4:	8103      	strh	r3, [r0, #8]
 8000ca6:	e7f7      	b.n	8000c98 <HAL_PCDEx_PMAConfig+0x20>

08000ca8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca8:	6803      	ldr	r3, [r0, #0]
{
 8000caa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cae:	07db      	lsls	r3, r3, #31
{
 8000cb0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb2:	d410      	bmi.n	8000cd6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	079f      	lsls	r7, r3, #30
 8000cb8:	d45e      	bmi.n	8000d78 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cba:	682b      	ldr	r3, [r5, #0]
 8000cbc:	0719      	lsls	r1, r3, #28
 8000cbe:	f100 8095 	bmi.w	8000dec <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	075a      	lsls	r2, r3, #29
 8000cc6:	f100 80bf 	bmi.w	8000e48 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cca:	69ea      	ldr	r2, [r5, #28]
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 812d 	bne.w	8000f2c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	e014      	b.n	8000d00 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd6:	4c90      	ldr	r4, [pc, #576]	; (8000f18 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d007      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce2:	6863      	ldr	r3, [r4, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d10c      	bne.n	8000d06 <HAL_RCC_OscConfig+0x5e>
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	03de      	lsls	r6, r3, #15
 8000cf0:	d509      	bpl.n	8000d06 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	039c      	lsls	r4, r3, #14
 8000cf6:	d5dd      	bpl.n	8000cb4 <HAL_RCC_OscConfig+0xc>
 8000cf8:	686b      	ldr	r3, [r5, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1da      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
}
 8000d00:	b002      	add	sp, #8
 8000d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d06:	686b      	ldr	r3, [r5, #4]
 8000d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0c:	d110      	bne.n	8000d30 <HAL_RCC_OscConfig+0x88>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d16:	f7ff fa47 	bl	80001a8 <HAL_GetTick>
 8000d1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	0398      	lsls	r0, r3, #14
 8000d20:	d4c8      	bmi.n	8000cb4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fa41 	bl	80001a8 <HAL_GetTick>
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	2864      	cmp	r0, #100	; 0x64
 8000d2a:	d9f7      	bls.n	8000d1c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	e7e7      	b.n	8000d00 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	b99b      	cbnz	r3, 8000d5a <HAL_RCC_OscConfig+0xb2>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d38:	6023      	str	r3, [r4, #0]
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d42:	f7ff fa31 	bl	80001a8 <HAL_GetTick>
 8000d46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	0399      	lsls	r1, r3, #14
 8000d4c:	d5b2      	bpl.n	8000cb4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fa2b 	bl	80001a8 <HAL_GetTick>
 8000d52:	1b80      	subs	r0, r0, r6
 8000d54:	2864      	cmp	r0, #100	; 0x64
 8000d56:	d9f7      	bls.n	8000d48 <HAL_RCC_OscConfig+0xa0>
 8000d58:	e7e8      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	d103      	bne.n	8000d6a <HAL_RCC_OscConfig+0xc2>
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	6023      	str	r3, [r4, #0]
 8000d68:	e7d1      	b.n	8000d0e <HAL_RCC_OscConfig+0x66>
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	6023      	str	r3, [r4, #0]
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d76:	e7cd      	b.n	8000d14 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d78:	4c67      	ldr	r4, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x270>)
 8000d7a:	6863      	ldr	r3, [r4, #4]
 8000d7c:	f013 0f0c 	tst.w	r3, #12
 8000d80:	d007      	beq.n	8000d92 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d110      	bne.n	8000dae <HAL_RCC_OscConfig+0x106>
 8000d8c:	6863      	ldr	r3, [r4, #4]
 8000d8e:	03da      	lsls	r2, r3, #15
 8000d90:	d40d      	bmi.n	8000dae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	079b      	lsls	r3, r3, #30
 8000d96:	d502      	bpl.n	8000d9e <HAL_RCC_OscConfig+0xf6>
 8000d98:	692b      	ldr	r3, [r5, #16]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d1af      	bne.n	8000cfe <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	696a      	ldr	r2, [r5, #20]
 8000da2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000da6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000daa:	6023      	str	r3, [r4, #0]
 8000dac:	e785      	b.n	8000cba <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dae:	692a      	ldr	r2, [r5, #16]
 8000db0:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <HAL_RCC_OscConfig+0x274>)
 8000db2:	b16a      	cbz	r2, 8000dd0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db8:	f7ff f9f6 	bl	80001a8 <HAL_GetTick>
 8000dbc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	079f      	lsls	r7, r3, #30
 8000dc2:	d4ec      	bmi.n	8000d9e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc4:	f7ff f9f0 	bl	80001a8 <HAL_GetTick>
 8000dc8:	1b80      	subs	r0, r0, r6
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9f7      	bls.n	8000dbe <HAL_RCC_OscConfig+0x116>
 8000dce:	e7ad      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000dd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd2:	f7ff f9e9 	bl	80001a8 <HAL_GetTick>
 8000dd6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	0798      	lsls	r0, r3, #30
 8000ddc:	f57f af6d 	bpl.w	8000cba <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de0:	f7ff f9e2 	bl	80001a8 <HAL_GetTick>
 8000de4:	1b80      	subs	r0, r0, r6
 8000de6:	2802      	cmp	r0, #2
 8000de8:	d9f6      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x130>
 8000dea:	e79f      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dec:	69aa      	ldr	r2, [r5, #24]
 8000dee:	4c4a      	ldr	r4, [pc, #296]	; (8000f18 <HAL_RCC_OscConfig+0x270>)
 8000df0:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <HAL_RCC_OscConfig+0x278>)
 8000df2:	b1da      	cbz	r2, 8000e2c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000df8:	f7ff f9d6 	bl	80001a8 <HAL_GetTick>
 8000dfc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e00:	079b      	lsls	r3, r3, #30
 8000e02:	d50d      	bpl.n	8000e20 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e08:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <HAL_RCC_OscConfig+0x27c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e10:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000e12:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000e14:	9b01      	ldr	r3, [sp, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	9201      	str	r2, [sp, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f9      	bne.n	8000e12 <HAL_RCC_OscConfig+0x16a>
 8000e1e:	e750      	b.n	8000cc2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff f9c2 	bl	80001a8 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9e9      	bls.n	8000dfe <HAL_RCC_OscConfig+0x156>
 8000e2a:	e77f      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e2e:	f7ff f9bb 	bl	80001a8 <HAL_GetTick>
 8000e32:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e36:	079f      	lsls	r7, r3, #30
 8000e38:	f57f af43 	bpl.w	8000cc2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff f9b4 	bl	80001a8 <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9f6      	bls.n	8000e34 <HAL_RCC_OscConfig+0x18c>
 8000e46:	e771      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e48:	4c33      	ldr	r4, [pc, #204]	; (8000f18 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	69e3      	ldr	r3, [r4, #28]
 8000e4c:	00d8      	lsls	r0, r3, #3
 8000e4e:	d424      	bmi.n	8000e9a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e50:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	69e3      	ldr	r3, [r4, #28]
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	61e3      	str	r3, [r4, #28]
 8000e5a:	69e3      	ldr	r3, [r4, #28]
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e64:	4e30      	ldr	r6, [pc, #192]	; (8000f28 <HAL_RCC_OscConfig+0x280>)
 8000e66:	6833      	ldr	r3, [r6, #0]
 8000e68:	05d9      	lsls	r1, r3, #23
 8000e6a:	d518      	bpl.n	8000e9e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6c:	68eb      	ldr	r3, [r5, #12]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d126      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x218>
 8000e72:	6a23      	ldr	r3, [r4, #32]
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e7a:	f7ff f995 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e82:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e84:	6a23      	ldr	r3, [r4, #32]
 8000e86:	079b      	lsls	r3, r3, #30
 8000e88:	d53f      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e8a:	2f00      	cmp	r7, #0
 8000e8c:	f43f af1d 	beq.w	8000cca <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e90:	69e3      	ldr	r3, [r4, #28]
 8000e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e96:	61e3      	str	r3, [r4, #28]
 8000e98:	e717      	b.n	8000cca <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e9a:	2700      	movs	r7, #0
 8000e9c:	e7e2      	b.n	8000e64 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9e:	6833      	ldr	r3, [r6, #0]
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ea6:	f7ff f97f 	bl	80001a8 <HAL_GetTick>
 8000eaa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	6833      	ldr	r3, [r6, #0]
 8000eae:	05da      	lsls	r2, r3, #23
 8000eb0:	d4dc      	bmi.n	8000e6c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb2:	f7ff f979 	bl	80001a8 <HAL_GetTick>
 8000eb6:	eba0 0008 	sub.w	r0, r0, r8
 8000eba:	2864      	cmp	r0, #100	; 0x64
 8000ebc:	d9f6      	bls.n	8000eac <HAL_RCC_OscConfig+0x204>
 8000ebe:	e735      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	b9ab      	cbnz	r3, 8000eee <HAL_RCC_OscConfig+0x246>
 8000ec2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6223      	str	r3, [r4, #32]
 8000ece:	6a23      	ldr	r3, [r4, #32]
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ed6:	f7ff f967 	bl	80001a8 <HAL_GetTick>
 8000eda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000edc:	6a23      	ldr	r3, [r4, #32]
 8000ede:	0798      	lsls	r0, r3, #30
 8000ee0:	d5d3      	bpl.n	8000e8a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee2:	f7ff f961 	bl	80001a8 <HAL_GetTick>
 8000ee6:	1b80      	subs	r0, r0, r6
 8000ee8:	4540      	cmp	r0, r8
 8000eea:	d9f7      	bls.n	8000edc <HAL_RCC_OscConfig+0x234>
 8000eec:	e71e      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	6a23      	ldr	r3, [r4, #32]
 8000ef2:	d103      	bne.n	8000efc <HAL_RCC_OscConfig+0x254>
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6223      	str	r3, [r4, #32]
 8000efa:	e7ba      	b.n	8000e72 <HAL_RCC_OscConfig+0x1ca>
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6223      	str	r3, [r4, #32]
 8000f02:	6a23      	ldr	r3, [r4, #32]
 8000f04:	f023 0304 	bic.w	r3, r3, #4
 8000f08:	e7b6      	b.n	8000e78 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff f94d 	bl	80001a8 <HAL_GetTick>
 8000f0e:	eba0 0008 	sub.w	r0, r0, r8
 8000f12:	42b0      	cmp	r0, r6
 8000f14:	d9b6      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1dc>
 8000f16:	e709      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	42420000 	.word	0x42420000
 8000f20:	42420480 	.word	0x42420480
 8000f24:	2000013c 	.word	0x2000013c
 8000f28:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	4c22      	ldr	r4, [pc, #136]	; (8000fb8 <HAL_RCC_OscConfig+0x310>)
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	f43f aee2 	beq.w	8000cfe <HAL_RCC_OscConfig+0x56>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4e1f      	ldr	r6, [pc, #124]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f3e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f40:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f42:	d12b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000f44:	f7ff f930 	bl	80001a8 <HAL_GetTick>
 8000f48:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	0199      	lsls	r1, r3, #6
 8000f4e:	d41f      	bmi.n	8000f90 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f50:	6a2b      	ldr	r3, [r5, #32]
 8000f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f56:	d105      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f58:	6862      	ldr	r2, [r4, #4]
 8000f5a:	68a9      	ldr	r1, [r5, #8]
 8000f5c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f60:	430a      	orrs	r2, r1
 8000f62:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f64:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f66:	6862      	ldr	r2, [r4, #4]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f72:	2301      	movs	r3, #1
 8000f74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f76:	f7ff f917 	bl	80001a8 <HAL_GetTick>
 8000f7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	019a      	lsls	r2, r3, #6
 8000f80:	f53f aea7 	bmi.w	8000cd2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f84:	f7ff f910 	bl	80001a8 <HAL_GetTick>
 8000f88:	1b40      	subs	r0, r0, r5
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d9f6      	bls.n	8000f7c <HAL_RCC_OscConfig+0x2d4>
 8000f8e:	e6cd      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f90:	f7ff f90a 	bl	80001a8 <HAL_GetTick>
 8000f94:	1bc0      	subs	r0, r0, r7
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9d7      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2a2>
 8000f9a:	e6c7      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f9c:	f7ff f904 	bl	80001a8 <HAL_GetTick>
 8000fa0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	f57f ae94 	bpl.w	8000cd2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff f8fd 	bl	80001a8 <HAL_GetTick>
 8000fae:	1b40      	subs	r0, r0, r5
 8000fb0:	2802      	cmp	r0, #2
 8000fb2:	d9f6      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x2fa>
 8000fb4:	e6ba      	b.n	8000d2c <HAL_RCC_OscConfig+0x84>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	42420060 	.word	0x42420060

08000fc0 <HAL_RCC_GetSysClockFreq>:
{
 8000fc0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000fc4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fc6:	ac02      	add	r4, sp, #8
 8000fc8:	f103 0510 	add.w	r5, r3, #16
 8000fcc:	4622      	mov	r2, r4
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	c203      	stmia	r2!, {r0, r1}
 8000fd6:	42ab      	cmp	r3, r5
 8000fd8:	4614      	mov	r4, r2
 8000fda:	d1f7      	bne.n	8000fcc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fe2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fe4:	4912      	ldr	r1, [pc, #72]	; (8001030 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fe6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fea:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fec:	f003 020c 	and.w	r2, r3, #12
 8000ff0:	2a08      	cmp	r2, #8
 8000ff2:	d118      	bne.n	8001026 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ff4:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ff8:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ffa:	bf48      	it	mi
 8000ffc:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ffe:	a806      	add	r0, sp, #24
 8001000:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001002:	bf48      	it	mi
 8001004:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001008:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800100c:	bf41      	itttt	mi
 800100e:	aa06      	addmi	r2, sp, #24
 8001010:	189b      	addmi	r3, r3, r2
 8001012:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001016:	4b07      	ldrmi	r3, [pc, #28]	; (8001034 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001018:	bf54      	ite	pl
 800101a:	4b07      	ldrpl	r3, [pc, #28]	; (8001038 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800101c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001020:	4358      	muls	r0, r3
}
 8001022:	b007      	add	sp, #28
 8001024:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001028:	e7fb      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0x62>
 800102a:	bf00      	nop
 800102c:	08003c9c 	.word	0x08003c9c
 8001030:	40021000 	.word	0x40021000
 8001034:	007a1200 	.word	0x007a1200
 8001038:	003d0900 	.word	0x003d0900

0800103c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800103c:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <HAL_RCC_ClockConfig+0x138>)
{
 800103e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001042:	6813      	ldr	r3, [r2, #0]
{
 8001044:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	428b      	cmp	r3, r1
{
 800104c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800104e:	d328      	bcc.n	80010a2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	682a      	ldr	r2, [r5, #0]
 8001052:	0791      	lsls	r1, r2, #30
 8001054:	d432      	bmi.n	80010bc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	07d2      	lsls	r2, r2, #31
 8001058:	d438      	bmi.n	80010cc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800105a:	4a46      	ldr	r2, [pc, #280]	; (8001174 <HAL_RCC_ClockConfig+0x138>)
 800105c:	6813      	ldr	r3, [r2, #0]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	429e      	cmp	r6, r3
 8001064:	d373      	bcc.n	800114e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001066:	682a      	ldr	r2, [r5, #0]
 8001068:	4c43      	ldr	r4, [pc, #268]	; (8001178 <HAL_RCC_ClockConfig+0x13c>)
 800106a:	f012 0f04 	tst.w	r2, #4
 800106e:	d179      	bne.n	8001164 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	0713      	lsls	r3, r2, #28
 8001072:	d506      	bpl.n	8001082 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	692a      	ldr	r2, [r5, #16]
 8001078:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800107c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001080:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001082:	f7ff ff9d 	bl	8000fc0 <HAL_RCC_GetSysClockFreq>
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	4a3c      	ldr	r2, [pc, #240]	; (800117c <HAL_RCC_ClockConfig+0x140>)
 800108a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	40d8      	lsrs	r0, r3
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_RCC_ClockConfig+0x144>)
 8001094:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001096:	2005      	movs	r0, #5
 8001098:	f7ff f858 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800109c:	2000      	movs	r0, #0
}
 800109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	f023 0307 	bic.w	r3, r3, #7
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d0cc      	beq.n	8001050 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010bc:	492e      	ldr	r1, [pc, #184]	; (8001178 <HAL_RCC_ClockConfig+0x13c>)
 80010be:	68a8      	ldr	r0, [r5, #8]
 80010c0:	684b      	ldr	r3, [r1, #4]
 80010c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010c6:	4303      	orrs	r3, r0
 80010c8:	604b      	str	r3, [r1, #4]
 80010ca:	e7c4      	b.n	8001056 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010cc:	686a      	ldr	r2, [r5, #4]
 80010ce:	4c2a      	ldr	r4, [pc, #168]	; (8001178 <HAL_RCC_ClockConfig+0x13c>)
 80010d0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d4:	d11c      	bne.n	8001110 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	d0ec      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010dc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010de:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010ea:	f7ff f85d 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010f0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d114      	bne.n	8001120 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f6:	6863      	ldr	r3, [r4, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d0ac      	beq.n	800105a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff f852 	bl	80001a8 <HAL_GetTick>
 8001104:	1bc0      	subs	r0, r0, r7
 8001106:	4540      	cmp	r0, r8
 8001108:	d9f5      	bls.n	80010f6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800110a:	2003      	movs	r0, #3
 800110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001110:	2a02      	cmp	r2, #2
 8001112:	d102      	bne.n	800111a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001114:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001118:	e7df      	b.n	80010da <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	f013 0f02 	tst.w	r3, #2
 800111e:	e7dc      	b.n	80010da <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001120:	2b02      	cmp	r3, #2
 8001122:	d10f      	bne.n	8001144 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b08      	cmp	r3, #8
 800112c:	d095      	beq.n	800105a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112e:	f7ff f83b 	bl	80001a8 <HAL_GetTick>
 8001132:	1bc0      	subs	r0, r0, r7
 8001134:	4540      	cmp	r0, r8
 8001136:	d9f5      	bls.n	8001124 <HAL_RCC_ClockConfig+0xe8>
 8001138:	e7e7      	b.n	800110a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113a:	f7ff f835 	bl	80001a8 <HAL_GetTick>
 800113e:	1bc0      	subs	r0, r0, r7
 8001140:	4540      	cmp	r0, r8
 8001142:	d8e2      	bhi.n	800110a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	f013 0f0c 	tst.w	r3, #12
 800114a:	d1f6      	bne.n	800113a <HAL_RCC_ClockConfig+0xfe>
 800114c:	e785      	b.n	800105a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f023 0307 	bic.w	r3, r3, #7
 8001154:	4333      	orrs	r3, r6
 8001156:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	429e      	cmp	r6, r3
 8001160:	d1a9      	bne.n	80010b6 <HAL_RCC_ClockConfig+0x7a>
 8001162:	e780      	b.n	8001066 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	6863      	ldr	r3, [r4, #4]
 8001166:	68e9      	ldr	r1, [r5, #12]
 8001168:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800116c:	430b      	orrs	r3, r1
 800116e:	6063      	str	r3, [r4, #4]
 8001170:	e77e      	b.n	8001070 <HAL_RCC_ClockConfig+0x34>
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000
 8001178:	40021000 	.word	0x40021000
 800117c:	08003d5c 	.word	0x08003d5c
 8001180:	2000013c 	.word	0x2000013c

08001184 <HAL_RCC_GetHCLKFreq>:
}
 8001184:	4b01      	ldr	r3, [pc, #4]	; (800118c <HAL_RCC_GetHCLKFreq+0x8>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000013c 	.word	0x2000013c

08001190 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001190:	6803      	ldr	r3, [r0, #0]
{
 8001192:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001196:	07d9      	lsls	r1, r3, #31
{
 8001198:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800119a:	d520      	bpl.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119c:	4c35      	ldr	r4, [pc, #212]	; (8001274 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800119e:	69e3      	ldr	r3, [r4, #28]
 80011a0:	00da      	lsls	r2, r3, #3
 80011a2:	d432      	bmi.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011a4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	69e3      	ldr	r3, [r4, #28]
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	61e3      	str	r3, [r4, #28]
 80011ae:	69e3      	ldr	r3, [r4, #28]
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4e2f      	ldr	r6, [pc, #188]	; (8001278 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011ba:	6833      	ldr	r3, [r6, #0]
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	d526      	bpl.n	800120e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011c0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011c2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011c6:	d136      	bne.n	8001236 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011c8:	6a23      	ldr	r3, [r4, #32]
 80011ca:	686a      	ldr	r2, [r5, #4]
 80011cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d0:	4313      	orrs	r3, r2
 80011d2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011d4:	b11f      	cbz	r7, 80011de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d6:	69e3      	ldr	r3, [r4, #28]
 80011d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011de:	6828      	ldr	r0, [r5, #0]
 80011e0:	0783      	lsls	r3, r0, #30
 80011e2:	d506      	bpl.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011e4:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011e6:	68a9      	ldr	r1, [r5, #8]
 80011e8:	6853      	ldr	r3, [r2, #4]
 80011ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011f2:	f010 0010 	ands.w	r0, r0, #16
 80011f6:	d01b      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011fa:	68e9      	ldr	r1, [r5, #12]
 80011fc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80011fe:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001200:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001204:	430b      	orrs	r3, r1
 8001206:	6053      	str	r3, [r2, #4]
 8001208:	e012      	b.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2700      	movs	r7, #0
 800120c:	e7d4      	b.n	80011b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001216:	f7fe ffc7 	bl	80001a8 <HAL_GetTick>
 800121a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	6833      	ldr	r3, [r6, #0]
 800121e:	05d8      	lsls	r0, r3, #23
 8001220:	d4ce      	bmi.n	80011c0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001222:	f7fe ffc1 	bl	80001a8 <HAL_GetTick>
 8001226:	eba0 0008 	sub.w	r0, r0, r8
 800122a:	2864      	cmp	r0, #100	; 0x64
 800122c:	d9f6      	bls.n	800121c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800122e:	2003      	movs	r0, #3
}
 8001230:	b002      	add	sp, #8
 8001232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001236:	686a      	ldr	r2, [r5, #4]
 8001238:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800123c:	4293      	cmp	r3, r2
 800123e:	d0c3      	beq.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001240:	2001      	movs	r0, #1
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001244:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001246:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001248:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800124a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800124e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001250:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001252:	07d9      	lsls	r1, r3, #31
 8001254:	d5b8      	bpl.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001256:	f7fe ffa7 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800125e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	6a23      	ldr	r3, [r4, #32]
 8001262:	079a      	lsls	r2, r3, #30
 8001264:	d4b0      	bmi.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7fe ff9f 	bl	80001a8 <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	4540      	cmp	r0, r8
 800126e:	d9f7      	bls.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001270:	e7dd      	b.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	40007000 	.word	0x40007000
 800127c:	42420440 	.word	0x42420440

08001280 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	4604      	mov	r4, r0
 8001286:	4688      	mov	r8, r1
 8001288:	4617      	mov	r7, r2
 800128a:	461d      	mov	r5, r3
 800128c:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	6893      	ldr	r3, [r2, #8]
 8001292:	ea38 0303 	bics.w	r3, r8, r3
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	429f      	cmp	r7, r3
 800129e:	d102      	bne.n	80012a6 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012a0:	2000      	movs	r0, #0
}
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a6:	1c6b      	adds	r3, r5, #1
 80012a8:	d0f2      	beq.n	8001290 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80012aa:	bb55      	cbnz	r5, 8001302 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012b4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012b6:	6862      	ldr	r2, [r4, #4]
 80012b8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012bc:	d10a      	bne.n	80012d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80012be:	68a2      	ldr	r2, [r4, #8]
 80012c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012c4:	d002      	beq.n	80012cc <SPI_WaitFlagStateUntilTimeout+0x4c>
 80012c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012ca:	d103      	bne.n	80012d4 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d2:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012d6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012da:	d109      	bne.n	80012f0 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012e2:	0412      	lsls	r2, r2, #16
 80012e4:	0c12      	lsrs	r2, r2, #16
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ee:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80012f6:	2300      	movs	r3, #0
 80012f8:	2003      	movs	r0, #3
 80012fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80012fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001302:	f7fe ff51 	bl	80001a8 <HAL_GetTick>
 8001306:	1b80      	subs	r0, r0, r6
 8001308:	4285      	cmp	r5, r0
 800130a:	d8c0      	bhi.n	800128e <SPI_WaitFlagStateUntilTimeout+0xe>
 800130c:	e7ce      	b.n	80012ac <SPI_WaitFlagStateUntilTimeout+0x2c>

0800130e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800130e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001310:	460b      	mov	r3, r1
 8001312:	9200      	str	r2, [sp, #0]
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	2200      	movs	r2, #0
{
 8001318:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800131a:	f7ff ffb1 	bl	8001280 <SPI_WaitFlagStateUntilTimeout>
 800131e:	b120      	cbz	r0, 800132a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001320:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001322:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800132a:	b002      	add	sp, #8
 800132c:	bd10      	pop	{r4, pc}

0800132e <HAL_SPI_Transmit>:
{
 800132e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001332:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001334:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001338:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800133a:	2b01      	cmp	r3, #1
{
 800133c:	460d      	mov	r5, r1
 800133e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001340:	f000 809c 	beq.w	800147c <HAL_SPI_Transmit+0x14e>
 8001344:	2301      	movs	r3, #1
 8001346:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800134a:	f7fe ff2d 	bl	80001a8 <HAL_GetTick>
 800134e:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001350:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001354:	b2c0      	uxtb	r0, r0
 8001356:	2801      	cmp	r0, #1
 8001358:	f040 808e 	bne.w	8001478 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 800135c:	2d00      	cmp	r5, #0
 800135e:	d04e      	beq.n	80013fe <HAL_SPI_Transmit+0xd0>
 8001360:	f1b8 0f00 	cmp.w	r8, #0
 8001364:	d04b      	beq.n	80013fe <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001366:	2303      	movs	r3, #3
 8001368:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001370:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001372:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001376:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001378:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800137a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800137c:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800137e:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001380:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001386:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001388:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800138c:	bf02      	ittt	eq
 800138e:	681a      	ldreq	r2, [r3, #0]
 8001390:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001394:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800139a:	bf5e      	ittt	pl
 800139c:	681a      	ldrpl	r2, [r3, #0]
 800139e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80013a2:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013a4:	68e2      	ldr	r2, [r4, #12]
 80013a6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80013aa:	6862      	ldr	r2, [r4, #4]
 80013ac:	d138      	bne.n	8001420 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80013ae:	b11a      	cbz	r2, 80013b8 <HAL_SPI_Transmit+0x8a>
 80013b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013b2:	b292      	uxth	r2, r2
 80013b4:	2a01      	cmp	r2, #1
 80013b6:	d106      	bne.n	80013c6 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 80013b8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80013bc:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80013be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80013c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b993      	cbnz	r3, 80013f2 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80013cc:	9700      	str	r7, [sp, #0]
 80013ce:	4633      	mov	r3, r6
 80013d0:	2201      	movs	r2, #1
 80013d2:	2102      	movs	r1, #2
 80013d4:	4620      	mov	r0, r4
 80013d6:	f7ff ff53 	bl	8001280 <SPI_WaitFlagStateUntilTimeout>
 80013da:	b978      	cbnz	r0, 80013fc <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80013dc:	463a      	mov	r2, r7
 80013de:	4631      	mov	r1, r6
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ff94 	bl	800130e <SPI_CheckFlag_BSY>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d038      	beq.n	800145c <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013ea:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80013ec:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013ee:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 80013f0:	e005      	b.n	80013fe <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	0790      	lsls	r0, r2, #30
 80013f8:	d4de      	bmi.n	80013b8 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80013fa:	b94e      	cbnz	r6, 8001410 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80013fe:	2301      	movs	r3, #1
 8001400:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001404:	2300      	movs	r3, #0
 8001406:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800140a:	b004      	add	sp, #16
 800140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001410:	1c71      	adds	r1, r6, #1
 8001412:	d0d8      	beq.n	80013c6 <HAL_SPI_Transmit+0x98>
 8001414:	f7fe fec8 	bl	80001a8 <HAL_GetTick>
 8001418:	1bc0      	subs	r0, r0, r7
 800141a:	4286      	cmp	r6, r0
 800141c:	d8d3      	bhi.n	80013c6 <HAL_SPI_Transmit+0x98>
 800141e:	e7ed      	b.n	80013fc <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001420:	b11a      	cbz	r2, 800142a <HAL_SPI_Transmit+0xfc>
 8001422:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001424:	b292      	uxth	r2, r2
 8001426:	2a01      	cmp	r2, #1
 8001428:	d106      	bne.n	8001438 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800142a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800142e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001430:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001432:	3b01      	subs	r3, #1
 8001434:	b29b      	uxth	r3, r3
 8001436:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001438:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800143a:	b29b      	uxth	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0c5      	beq.n	80013cc <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	0792      	lsls	r2, r2, #30
 8001446:	d4f0      	bmi.n	800142a <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001448:	2e00      	cmp	r6, #0
 800144a:	d0d7      	beq.n	80013fc <HAL_SPI_Transmit+0xce>
 800144c:	1c73      	adds	r3, r6, #1
 800144e:	d0f3      	beq.n	8001438 <HAL_SPI_Transmit+0x10a>
 8001450:	f7fe feaa 	bl	80001a8 <HAL_GetTick>
 8001454:	1bc0      	subs	r0, r0, r7
 8001456:	4286      	cmp	r6, r0
 8001458:	d8ee      	bhi.n	8001438 <HAL_SPI_Transmit+0x10a>
 800145a:	e7cf      	b.n	80013fc <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800145c:	68a3      	ldr	r3, [r4, #8]
 800145e:	b933      	cbnz	r3, 800146e <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001460:	9303      	str	r3, [sp, #12]
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	9203      	str	r2, [sp, #12]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	9303      	str	r3, [sp, #12]
 800146c:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800146e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001470:	3000      	adds	r0, #0
 8001472:	bf18      	it	ne
 8001474:	2001      	movne	r0, #1
 8001476:	e7c2      	b.n	80013fe <HAL_SPI_Transmit+0xd0>
 8001478:	2002      	movs	r0, #2
 800147a:	e7c0      	b.n	80013fe <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 800147c:	2002      	movs	r0, #2
 800147e:	e7c4      	b.n	800140a <HAL_SPI_Transmit+0xdc>

08001480 <HAL_SPI_TransmitReceive>:
{
 8001480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001484:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001486:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800148a:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800148c:	2b01      	cmp	r3, #1
{
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	4616      	mov	r6, r2
 8001494:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001496:	f000 80ee 	beq.w	8001676 <HAL_SPI_TransmitReceive+0x1f6>
 800149a:	2301      	movs	r3, #1
 800149c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80014a0:	f7fe fe82 	bl	80001a8 <HAL_GetTick>
  tmp  = hspi->State;
 80014a4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80014a8:	4680      	mov	r8, r0
  tmp  = hspi->State;
 80014aa:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80014ac:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 80014ae:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80014b0:	d00a      	beq.n	80014c8 <HAL_SPI_TransmitReceive+0x48>
 80014b2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80014b6:	f040 80dc 	bne.w	8001672 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80014ba:	68a2      	ldr	r2, [r4, #8]
 80014bc:	2a00      	cmp	r2, #0
 80014be:	f040 80d8 	bne.w	8001672 <HAL_SPI_TransmitReceive+0x1f2>
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	f040 80d5 	bne.w	8001672 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d04e      	beq.n	800156a <HAL_SPI_TransmitReceive+0xea>
 80014cc:	2e00      	cmp	r6, #0
 80014ce:	d04c      	beq.n	800156a <HAL_SPI_TransmitReceive+0xea>
 80014d0:	f1b9 0f00 	cmp.w	r9, #0
 80014d4:	d049      	beq.n	800156a <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 80014d6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80014da:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 80014dc:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80014de:	bf04      	itt	eq
 80014e0:	2305      	moveq	r3, #5
 80014e2:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80014ea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80014ec:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014ee:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80014f0:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80014f4:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014f8:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80014fa:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80014fe:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001500:	bf58      	it	pl
 8001502:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001504:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001506:	bf58      	it	pl
 8001508:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800150c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001510:	bf58      	it	pl
 8001512:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001514:	68e2      	ldr	r2, [r4, #12]
 8001516:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800151a:	d15d      	bne.n	80015d8 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800151c:	b119      	cbz	r1, 8001526 <HAL_SPI_TransmitReceive+0xa6>
 800151e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001520:	b292      	uxth	r2, r2
 8001522:	2a01      	cmp	r2, #1
 8001524:	d106      	bne.n	8001534 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001526:	f835 2b02 	ldrh.w	r2, [r5], #2
 800152a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800152c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800152e:	3b01      	subs	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001534:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001538:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800153a:	b29b      	uxth	r3, r3
 800153c:	b9bb      	cbnz	r3, 800156e <HAL_SPI_TransmitReceive+0xee>
 800153e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001540:	b29b      	uxth	r3, r3
 8001542:	b9a3      	cbnz	r3, 800156e <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001544:	f8cd 8000 	str.w	r8, [sp]
 8001548:	463b      	mov	r3, r7
 800154a:	2201      	movs	r2, #1
 800154c:	2102      	movs	r1, #2
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff fe96 	bl	8001280 <SPI_WaitFlagStateUntilTimeout>
 8001554:	2800      	cmp	r0, #0
 8001556:	d135      	bne.n	80015c4 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001558:	4642      	mov	r2, r8
 800155a:	4639      	mov	r1, r7
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff fed6 	bl	800130e <SPI_CheckFlag_BSY>
 8001562:	2800      	cmp	r0, #0
 8001564:	d07a      	beq.n	800165c <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001566:	2320      	movs	r3, #32
 8001568:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800156a:	2001      	movs	r0, #1
 800156c:	e02b      	b.n	80015c6 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800156e:	f1b9 0f00 	cmp.w	r9, #0
 8001572:	d00f      	beq.n	8001594 <HAL_SPI_TransmitReceive+0x114>
 8001574:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001576:	b29b      	uxth	r3, r3
 8001578:	b163      	cbz	r3, 8001594 <HAL_SPI_TransmitReceive+0x114>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	0791      	lsls	r1, r2, #30
 8001580:	d508      	bpl.n	8001594 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8001582:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001586:	f835 2b02 	ldrh.w	r2, [r5], #2
 800158a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800158c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001594:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001596:	b29b      	uxth	r3, r3
 8001598:	b163      	cbz	r3, 80015b4 <HAL_SPI_TransmitReceive+0x134>
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	07d2      	lsls	r2, r2, #31
 80015a0:	d508      	bpl.n	80015b4 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 80015a2:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80015ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80015b4:	1c78      	adds	r0, r7, #1
 80015b6:	d0bf      	beq.n	8001538 <HAL_SPI_TransmitReceive+0xb8>
 80015b8:	f7fe fdf6 	bl	80001a8 <HAL_GetTick>
 80015bc:	eba0 0008 	sub.w	r0, r0, r8
 80015c0:	4287      	cmp	r7, r0
 80015c2:	d8b9      	bhi.n	8001538 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015cc:	2300      	movs	r3, #0
 80015ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80015d2:	b005      	add	sp, #20
 80015d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80015d8:	b119      	cbz	r1, 80015e2 <HAL_SPI_TransmitReceive+0x162>
 80015da:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80015dc:	b292      	uxth	r2, r2
 80015de:	2a01      	cmp	r2, #1
 80015e0:	d106      	bne.n	80015f0 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80015e2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80015e6:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80015e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80015f0:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b91b      	cbnz	r3, 8001602 <HAL_SPI_TransmitReceive+0x182>
 80015fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0a0      	beq.n	8001544 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001602:	f1b9 0f00 	cmp.w	r9, #0
 8001606:	d00f      	beq.n	8001628 <HAL_SPI_TransmitReceive+0x1a8>
 8001608:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800160a:	b29b      	uxth	r3, r3
 800160c:	b163      	cbz	r3, 8001628 <HAL_SPI_TransmitReceive+0x1a8>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	0791      	lsls	r1, r2, #30
 8001614:	d508      	bpl.n	8001628 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001616:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800161a:	782a      	ldrb	r2, [r5, #0]
 800161c:	3501      	adds	r5, #1
 800161e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001620:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001622:	3b01      	subs	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001628:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800162a:	b29b      	uxth	r3, r3
 800162c:	b16b      	cbz	r3, 800164a <HAL_SPI_TransmitReceive+0x1ca>
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	07d2      	lsls	r2, r2, #31
 8001634:	d509      	bpl.n	800164a <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001636:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	3601      	adds	r6, #1
 800163e:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8001642:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001644:	3b01      	subs	r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800164a:	1c7b      	adds	r3, r7, #1
 800164c:	d0d2      	beq.n	80015f4 <HAL_SPI_TransmitReceive+0x174>
 800164e:	f7fe fdab 	bl	80001a8 <HAL_GetTick>
 8001652:	eba0 0008 	sub.w	r0, r0, r8
 8001656:	4287      	cmp	r7, r0
 8001658:	d8cc      	bhi.n	80015f4 <HAL_SPI_TransmitReceive+0x174>
 800165a:	e7b3      	b.n	80015c4 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800165c:	68a3      	ldr	r3, [r4, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1b1      	bne.n	80015c6 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	9003      	str	r0, [sp, #12]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	9203      	str	r2, [sp, #12]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	9b03      	ldr	r3, [sp, #12]
 8001670:	e7a9      	b.n	80015c6 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001672:	2002      	movs	r0, #2
 8001674:	e7a7      	b.n	80015c6 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001676:	2002      	movs	r0, #2
 8001678:	e7ab      	b.n	80015d2 <HAL_SPI_TransmitReceive+0x152>

0800167a <HAL_SPI_GetState>:
  return hspi->State;
 800167a:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800167e:	4770      	bx	lr

08001680 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001680:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001682:	4604      	mov	r4, r0
 8001684:	2800      	cmp	r0, #0
 8001686:	d034      	beq.n	80016f2 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800168c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001690:	b90b      	cbnz	r3, 8001696 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001692:	f002 f865 	bl	8003760 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001696:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001698:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800169a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800169e:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016a0:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80016a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016a6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	69a2      	ldr	r2, [r4, #24]
 80016ac:	4303      	orrs	r3, r0
 80016ae:	68e0      	ldr	r0, [r4, #12]
 80016b0:	4303      	orrs	r3, r0
 80016b2:	6920      	ldr	r0, [r4, #16]
 80016b4:	4303      	orrs	r3, r0
 80016b6:	6960      	ldr	r0, [r4, #20]
 80016b8:	4303      	orrs	r3, r0
 80016ba:	69e0      	ldr	r0, [r4, #28]
 80016bc:	4303      	orrs	r3, r0
 80016be:	6a20      	ldr	r0, [r4, #32]
 80016c0:	4303      	orrs	r3, r0
 80016c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016c4:	4303      	orrs	r3, r0
 80016c6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80016ca:	4303      	orrs	r3, r0
 80016cc:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016ce:	0c12      	lsrs	r2, r2, #16
 80016d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016d2:	f002 0204 	and.w	r2, r2, #4
 80016d6:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80016d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016da:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80016dc:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016de:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016e0:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016e6:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80016e8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80016ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 80016f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
}
 80016f4:	bd10      	pop	{r4, pc}

080016f6 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80016f6:	b084      	sub	sp, #16
 80016f8:	a801      	add	r0, sp, #4
 80016fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80016fe:	b004      	add	sp, #16
 8001700:	2000      	movs	r0, #0
 8001702:	4770      	bx	lr

08001704 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001704:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001708:	b29b      	uxth	r3, r3
 800170a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800170e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001712:	2000      	movs	r0, #0
 8001714:	4770      	bx	lr

08001716 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001716:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800171a:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800171e:	045b      	lsls	r3, r3, #17
 8001720:	0c5b      	lsrs	r3, r3, #17
 8001722:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001726:	2000      	movs	r0, #0
 8001728:	4770      	bx	lr

0800172a <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800172a:	2000      	movs	r0, #0
 800172c:	4770      	bx	lr

0800172e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800172e:	b084      	sub	sp, #16
 8001730:	b510      	push	{r4, lr}
 8001732:	ac03      	add	r4, sp, #12
 8001734:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800173c:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800173e:	2301      	movs	r3, #1
 8001740:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001744:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001748:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800174c:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001750:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001754:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001756:	b29b      	uxth	r3, r3
 8001758:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800175c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001760:	4610      	mov	r0, r2
 8001762:	4770      	bx	lr

08001764 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001764:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001766:	78cb      	ldrb	r3, [r1, #3]
 8001768:	780a      	ldrb	r2, [r1, #0]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d80f      	bhi.n	800178e <USB_ActivateEndpoint+0x2a>
 800176e:	e8df f003 	tbb	[pc, r3]
 8001772:	6402      	.short	0x6402
 8001774:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001776:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800177a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800178a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800178e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001792:	780c      	ldrb	r4, [r1, #0]
 8001794:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001798:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 800179c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80017a0:	401a      	ands	r2, r3
 80017a2:	432a      	orrs	r2, r5
 80017a4:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80017a8:	7a8a      	ldrb	r2, [r1, #10]
 80017aa:	780d      	ldrb	r5, [r1, #0]
 80017ac:	2a00      	cmp	r2, #0
 80017ae:	f040 8097 	bne.w	80018e0 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80017b2:	784c      	ldrb	r4, [r1, #1]
 80017b4:	888a      	ldrh	r2, [r1, #4]
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d04a      	beq.n	8001850 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80017ba:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80017be:	0852      	lsrs	r2, r2, #1
 80017c0:	b2a4      	uxth	r4, r4
 80017c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80017c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80017ca:	0052      	lsls	r2, r2, #1
 80017cc:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017d0:	780c      	ldrb	r4, [r1, #0]
 80017d2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80017d6:	0652      	lsls	r2, r2, #25
 80017d8:	d508      	bpl.n	80017ec <USB_ActivateEndpoint+0x88>
 80017da:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80017de:	4013      	ands	r3, r2
 80017e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017e8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80017ec:	780a      	ldrb	r2, [r1, #0]
 80017ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017fa:	041b      	lsls	r3, r3, #16
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800180e:	2000      	movs	r0, #0
 8001810:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001812:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001816:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800181a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181e:	041b      	lsls	r3, r3, #16
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	e7b2      	b.n	800178a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001824:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001828:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800182c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	0c1b      	lsrs	r3, r3, #16
 8001834:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001838:	e7a7      	b.n	800178a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800183a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800183e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	0c1b      	lsrs	r3, r3, #16
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	e79c      	b.n	800178a <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001850:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001854:	0852      	lsrs	r2, r2, #1
 8001856:	b29b      	uxth	r3, r3
 8001858:	3304      	adds	r3, #4
 800185a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800185e:	0052      	lsls	r2, r2, #1
 8001860:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001864:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001868:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800186c:	690d      	ldr	r5, [r1, #16]
 800186e:	b292      	uxth	r2, r2
 8001870:	780b      	ldrb	r3, [r1, #0]
 8001872:	3206      	adds	r2, #6
 8001874:	2d3e      	cmp	r5, #62	; 0x3e
 8001876:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800187a:	d929      	bls.n	80018d0 <USB_ActivateEndpoint+0x16c>
 800187c:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001880:	06eb      	lsls	r3, r5, #27
 8001882:	bf04      	itt	eq
 8001884:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001888:	b29e      	uxtheq	r6, r3
 800188a:	4b6e      	ldr	r3, [pc, #440]	; (8001a44 <USB_ActivateEndpoint+0x2e0>)
 800188c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001890:	b29b      	uxth	r3, r3
 8001892:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001896:	780a      	ldrb	r2, [r1, #0]
 8001898:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800189c:	045e      	lsls	r6, r3, #17
 800189e:	d50b      	bpl.n	80018b8 <USB_ActivateEndpoint+0x154>
 80018a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a8:	051b      	lsls	r3, r3, #20
 80018aa:	0d1b      	lsrs	r3, r3, #20
 80018ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80018b8:	780a      	ldrb	r2, [r1, #0]
 80018ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018ce:	e798      	b.n	8001802 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80018d0:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80018d4:	07ed      	lsls	r5, r5, #31
 80018d6:	bf44      	itt	mi
 80018d8:	3301      	addmi	r3, #1
 80018da:	b29b      	uxthmi	r3, r3
 80018dc:	029b      	lsls	r3, r3, #10
 80018de:	e7d7      	b.n	8001890 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80018e0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80018e4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80018e8:	0512      	lsls	r2, r2, #20
 80018ea:	0d12      	lsrs	r2, r2, #20
 80018ec:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80018f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f4:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80018f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80018fc:	780c      	ldrb	r4, [r1, #0]
 80018fe:	b292      	uxth	r2, r2
 8001900:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001904:	88cc      	ldrh	r4, [r1, #6]
 8001906:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800190a:	0864      	lsrs	r4, r4, #1
 800190c:	0064      	lsls	r4, r4, #1
 800190e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001912:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001916:	780c      	ldrb	r4, [r1, #0]
 8001918:	b292      	uxth	r2, r2
 800191a:	3204      	adds	r2, #4
 800191c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001920:	890c      	ldrh	r4, [r1, #8]
 8001922:	0864      	lsrs	r4, r4, #1
 8001924:	0064      	lsls	r4, r4, #1
 8001926:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 800192a:	784a      	ldrb	r2, [r1, #1]
 800192c:	780c      	ldrb	r4, [r1, #0]
 800192e:	2a00      	cmp	r2, #0
 8001930:	d147      	bne.n	80019c2 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001932:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001936:	0455      	lsls	r5, r2, #17
 8001938:	d508      	bpl.n	800194c <USB_ActivateEndpoint+0x1e8>
 800193a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800193e:	4013      	ands	r3, r2
 8001940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800194c:	780a      	ldrb	r2, [r1, #0]
 800194e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001952:	065c      	lsls	r4, r3, #25
 8001954:	d50b      	bpl.n	800196e <USB_ActivateEndpoint+0x20a>
 8001956:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800195a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800195e:	051b      	lsls	r3, r3, #20
 8001960:	0d1b      	lsrs	r3, r3, #20
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800196a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800196e:	780a      	ldrb	r2, [r1, #0]
 8001970:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001978:	051b      	lsls	r3, r3, #20
 800197a:	0d1b      	lsrs	r3, r3, #20
 800197c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001984:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001988:	f248 0280 	movw	r2, #32896	; 0x8080
 800198c:	780c      	ldrb	r4, [r1, #0]
 800198e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80019a8:	7809      	ldrb	r1, [r1, #0]
 80019aa:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80019ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80019c0:	e725      	b.n	800180e <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019c2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019c6:	0452      	lsls	r2, r2, #17
 80019c8:	d508      	bpl.n	80019dc <USB_ActivateEndpoint+0x278>
 80019ca:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80019ce:	4013      	ands	r3, r2
 80019d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019dc:	780a      	ldrb	r2, [r1, #0]
 80019de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019e2:	065b      	lsls	r3, r3, #25
 80019e4:	d50b      	bpl.n	80019fe <USB_ActivateEndpoint+0x29a>
 80019e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ee:	051b      	lsls	r3, r3, #20
 80019f0:	0d1b      	lsrs	r3, r3, #20
 80019f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80019fe:	780a      	ldrb	r2, [r1, #0]
 8001a00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a08:	051b      	lsls	r3, r3, #20
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a18:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a1c:	780c      	ldrb	r4, [r1, #0]
 8001a1e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a34:	7809      	ldrb	r1, [r1, #0]
 8001a36:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a42:	e7b8      	b.n	80019b6 <USB_ActivateEndpoint+0x252>
 8001a44:	ffff8000 	.word	0xffff8000

08001a48 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001a48:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001a4a:	7a8c      	ldrb	r4, [r1, #10]
 8001a4c:	784a      	ldrb	r2, [r1, #1]
 8001a4e:	780b      	ldrb	r3, [r1, #0]
 8001a50:	bbcc      	cbnz	r4, 8001ac6 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001a52:	b302      	cbz	r2, 8001a96 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a58:	0652      	lsls	r2, r2, #25
 8001a5a:	d50b      	bpl.n	8001a74 <USB_DeactivateEndpoint+0x2c>
 8001a5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a64:	0512      	lsls	r2, r2, #20
 8001a66:	0d12      	lsrs	r2, r2, #20
 8001a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001a70:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001a74:	780a      	ldrb	r2, [r1, #0]
 8001a76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001a92:	2000      	movs	r0, #0
 8001a94:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a96:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a9a:	0454      	lsls	r4, r2, #17
 8001a9c:	d50b      	bpl.n	8001ab6 <USB_DeactivateEndpoint+0x6e>
 8001a9e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001aa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001aa6:	0512      	lsls	r2, r2, #20
 8001aa8:	0d12      	lsrs	r2, r2, #20
 8001aaa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ab2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ab6:	780a      	ldrb	r2, [r1, #0]
 8001ab8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac4:	e7dd      	b.n	8001a82 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001ac6:	2a00      	cmp	r2, #0
 8001ac8:	d148      	bne.n	8001b5c <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001aca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ace:	0452      	lsls	r2, r2, #17
 8001ad0:	d50b      	bpl.n	8001aea <USB_DeactivateEndpoint+0xa2>
 8001ad2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ad6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ada:	0512      	lsls	r2, r2, #20
 8001adc:	0d12      	lsrs	r2, r2, #20
 8001ade:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ae6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001aea:	780a      	ldrb	r2, [r1, #0]
 8001aec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001af0:	065c      	lsls	r4, r3, #25
 8001af2:	d50b      	bpl.n	8001b0c <USB_DeactivateEndpoint+0xc4>
 8001af4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afc:	051b      	lsls	r3, r3, #20
 8001afe:	0d1b      	lsrs	r3, r3, #20
 8001b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001b0c:	780a      	ldrb	r2, [r1, #0]
 8001b0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b16:	051b      	lsls	r3, r3, #20
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b26:	f248 0280 	movw	r2, #32896	; 0x8080
 8001b2a:	780c      	ldrb	r4, [r1, #0]
 8001b2c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001b42:	7809      	ldrb	r1, [r1, #0]
 8001b44:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001b50:	041b      	lsls	r3, r3, #16
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001b5a:	e79a      	b.n	8001a92 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001b60:	0452      	lsls	r2, r2, #17
 8001b62:	d50b      	bpl.n	8001b7c <USB_DeactivateEndpoint+0x134>
 8001b64:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001b68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b6c:	0512      	lsls	r2, r2, #20
 8001b6e:	0d12      	lsrs	r2, r2, #20
 8001b70:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b78:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b7c:	780a      	ldrb	r2, [r1, #0]
 8001b7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b82:	065b      	lsls	r3, r3, #25
 8001b84:	d50b      	bpl.n	8001b9e <USB_DeactivateEndpoint+0x156>
 8001b86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	0d1b      	lsrs	r3, r3, #20
 8001b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001b9e:	780a      	ldrb	r2, [r1, #0]
 8001ba0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba8:	051b      	lsls	r3, r3, #20
 8001baa:	0d1b      	lsrs	r3, r3, #20
 8001bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001bb8:	f248 0280 	movw	r2, #32896	; 0x8080
 8001bbc:	780c      	ldrb	r4, [r1, #0]
 8001bbe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001bd4:	7809      	ldrb	r1, [r1, #0]
 8001bd6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	e7b5      	b.n	8001b50 <USB_DeactivateEndpoint+0x108>

08001be4 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001be4:	780a      	ldrb	r2, [r1, #0]
 8001be6:	b98a      	cbnz	r2, 8001c0c <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001be8:	8803      	ldrh	r3, [r0, #0]
 8001bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bfa:	f083 0310 	eor.w	r3, r3, #16
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c06:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001c08:	2000      	movs	r0, #0
 8001c0a:	4770      	bx	lr
    if (ep->is_in)
 8001c0c:	784b      	ldrb	r3, [r1, #1]
 8001c0e:	b183      	cbz	r3, 8001c32 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001c10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001c30:	e7ea      	b.n	8001c08 <USB_EPSetStall+0x24>
 8001c32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c46:	e7ed      	b.n	8001c24 <USB_EPSetStall+0x40>

08001c48 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001c48:	784b      	ldrb	r3, [r1, #1]
 8001c4a:	780a      	ldrb	r2, [r1, #0]
 8001c4c:	b313      	cbz	r3, 8001c94 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c52:	065b      	lsls	r3, r3, #25
 8001c54:	d50b      	bpl.n	8001c6e <USB_EPClearStall+0x26>
 8001c56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c5e:	051b      	lsls	r3, r3, #20
 8001c60:	0d1b      	lsrs	r3, r3, #20
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001c6e:	780a      	ldrb	r2, [r1, #0]
 8001c70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001c90:	2000      	movs	r0, #0
 8001c92:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001c94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c98:	045b      	lsls	r3, r3, #17
 8001c9a:	d50b      	bpl.n	8001cb4 <USB_EPClearStall+0x6c>
 8001c9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ca4:	051b      	lsls	r3, r3, #20
 8001ca6:	0d1b      	lsrs	r3, r3, #20
 8001ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001cb4:	780a      	ldrb	r2, [r1, #0]
 8001cb6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001cca:	e7db      	b.n	8001c84 <USB_EPClearStall+0x3c>

08001ccc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001ccc:	b911      	cbnz	r1, 8001cd4 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	4770      	bx	lr

08001cd8 <USB_DevConnect>:
 8001cd8:	2000      	movs	r0, #0
 8001cda:	4770      	bx	lr

08001cdc <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001cdc:	2000      	movs	r0, #0
 8001cde:	4770      	bx	lr

08001ce0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001ce0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001ce4:	b280      	uxth	r0, r0
 8001ce6:	4770      	bx	lr

08001ce8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4770      	bx	lr

08001cec <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001cec:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001cee:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001cf0:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001cf2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001cf6:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001cf8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001cfc:	42a3      	cmp	r3, r4
 8001cfe:	d100      	bne.n	8001d02 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001d00:	bd10      	pop	{r4, pc}
 8001d02:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001d06:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001d0a:	3401      	adds	r4, #1
 8001d0c:	e7f6      	b.n	8001cfc <USB_WritePMA+0x10>
	...

08001d10 <USB_EPStartXfer>:
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001d14:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001d16:	7849      	ldrb	r1, [r1, #1]
{
 8001d18:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001d1a:	2901      	cmp	r1, #1
 8001d1c:	6933      	ldr	r3, [r6, #16]
 8001d1e:	7ab0      	ldrb	r0, [r6, #10]
 8001d20:	d166      	bne.n	8001df0 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001d26:	bf9b      	ittet	ls
 8001d28:	2300      	movls	r3, #0
 8001d2a:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001d2c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001d2e:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001d30:	bf88      	it	hi
 8001d32:	61b2      	strhi	r2, [r6, #24]
 8001d34:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001d36:	bb10      	cbnz	r0, 8001d7e <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001d38:	88b2      	ldrh	r2, [r6, #4]
 8001d3a:	6971      	ldr	r1, [r6, #20]
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f7ff ffd5 	bl	8001cec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001d42:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001d46:	7832      	ldrb	r2, [r6, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d50:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001d54:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001d58:	7832      	ldrb	r2, [r6, #0]
 8001d5a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d76:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001d7e:	7832      	ldrb	r2, [r6, #0]
 8001d80:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001d84:	00d2      	lsls	r2, r2, #3
 8001d86:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001d8a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001d8e:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001d90:	d01a      	beq.n	8001dc8 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001d92:	3102      	adds	r1, #2
 8001d94:	440a      	add	r2, r1
 8001d96:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001d9a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001d9e:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001da0:	6971      	ldr	r1, [r6, #20]
 8001da2:	4628      	mov	r0, r5
 8001da4:	f7ff ffa2 	bl	8001cec <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001da8:	7873      	ldrb	r3, [r6, #1]
 8001daa:	7832      	ldrb	r2, [r6, #0]
 8001dac:	b99b      	cbnz	r3, 8001dd6 <USB_EPStartXfer+0xc6>
 8001dae:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db6:	051b      	lsls	r3, r3, #20
 8001db8:	0d1b      	lsrs	r3, r3, #20
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dc2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001dc6:	e7c7      	b.n	8001d58 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001dc8:	440a      	add	r2, r1
 8001dca:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001dce:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001dd2:	88f2      	ldrh	r2, [r6, #6]
 8001dd4:	e7e4      	b.n	8001da0 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d1be      	bne.n	8001d58 <USB_EPStartXfer+0x48>
 8001dda:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	0d1b      	lsrs	r3, r3, #20
 8001de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dee:	e7e8      	b.n	8001dc2 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001df0:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001df2:	bf93      	iteet	ls
 8001df4:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001df6:	1ad2      	subhi	r2, r2, r3
 8001df8:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001dfa:	61b3      	strls	r3, [r6, #24]
 8001dfc:	bf98      	it	ls
 8001dfe:	4613      	movls	r3, r2
 8001e00:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001e02:	bb70      	cbnz	r0, 8001e62 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001e04:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001e08:	2b3e      	cmp	r3, #62	; 0x3e
 8001e0a:	b289      	uxth	r1, r1
 8001e0c:	f101 0106 	add.w	r1, r1, #6
 8001e10:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001e14:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001e18:	d918      	bls.n	8001e4c <USB_EPStartXfer+0x13c>
 8001e1a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001e1e:	06db      	lsls	r3, r3, #27
 8001e20:	bf04      	itt	eq
 8001e22:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001e26:	b29a      	uxtheq	r2, r3
 8001e28:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <USB_EPStartXfer+0x1fc>)
 8001e2a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e34:	7832      	ldrb	r2, [r6, #0]
 8001e36:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e4a:	e790      	b.n	8001d6e <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001e4c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001e50:	07dc      	lsls	r4, r3, #31
 8001e52:	bf44      	itt	mi
 8001e54:	3201      	addmi	r2, #1
 8001e56:	b292      	uxthmi	r2, r2
 8001e58:	0292      	lsls	r2, r2, #10
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001e60:	e7e8      	b.n	8001e34 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001e62:	b9b9      	cbnz	r1, 8001e94 <USB_EPStartXfer+0x184>
 8001e64:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001e68:	2b3e      	cmp	r3, #62	; 0x3e
 8001e6a:	b289      	uxth	r1, r1
 8001e6c:	f101 0102 	add.w	r1, r1, #2
 8001e70:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001e74:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001e78:	d928      	bls.n	8001ecc <USB_EPStartXfer+0x1bc>
 8001e7a:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001e7e:	06da      	lsls	r2, r3, #27
 8001e80:	bf04      	itt	eq
 8001e82:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8001e86:	b290      	uxtheq	r0, r2
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <USB_EPStartXfer+0x1fc>)
 8001e8a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001e94:	7872      	ldrb	r2, [r6, #1]
 8001e96:	7831      	ldrb	r1, [r6, #0]
 8001e98:	bb5a      	cbnz	r2, 8001ef2 <USB_EPStartXfer+0x1e2>
 8001e9a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	f102 0206 	add.w	r2, r2, #6
 8001ea6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001eaa:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001eae:	d915      	bls.n	8001edc <USB_EPStartXfer+0x1cc>
 8001eb0:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001eb4:	06dc      	lsls	r4, r3, #27
 8001eb6:	bf04      	itt	eq
 8001eb8:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8001ebc:	b299      	uxtheq	r1, r3
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <USB_EPStartXfer+0x1fc>)
 8001ec0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001eca:	e7b3      	b.n	8001e34 <USB_EPStartXfer+0x124>
 8001ecc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001ed0:	07d8      	lsls	r0, r3, #31
 8001ed2:	bf44      	itt	mi
 8001ed4:	3201      	addmi	r2, #1
 8001ed6:	b292      	uxthmi	r2, r2
 8001ed8:	0292      	lsls	r2, r2, #10
 8001eda:	e7d8      	b.n	8001e8e <USB_EPStartXfer+0x17e>
 8001edc:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8001ee0:	07db      	lsls	r3, r3, #31
 8001ee2:	bf44      	itt	mi
 8001ee4:	3101      	addmi	r1, #1
 8001ee6:	b289      	uxthmi	r1, r1
 8001ee8:	0289      	lsls	r1, r1, #10
 8001eea:	b289      	uxth	r1, r1
 8001eec:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8001ef0:	e7a0      	b.n	8001e34 <USB_EPStartXfer+0x124>
 8001ef2:	2a01      	cmp	r2, #1
 8001ef4:	d19e      	bne.n	8001e34 <USB_EPStartXfer+0x124>
 8001ef6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001efa:	b292      	uxth	r2, r2
 8001efc:	3202      	adds	r2, #2
 8001efe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001f02:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001f06:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001f0a:	e793      	b.n	8001e34 <USB_EPStartXfer+0x124>
 8001f0c:	ffff8000 	.word	0xffff8000

08001f10 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001f10:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001f12:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001f14:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001f16:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001f1a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001f1c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001f20:	42a3      	cmp	r3, r4
 8001f22:	d100      	bne.n	8001f26 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001f24:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001f26:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001f2a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001f2e:	3401      	adds	r4, #1
 8001f30:	e7f6      	b.n	8001f20 <USB_ReadPMA+0x10>

08001f32 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f32:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001f36:	b11b      	cbz	r3, 8001f40 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001f3e:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001f40:	2002      	movs	r0, #2
  }
}
 8001f42:	4770      	bx	lr

08001f44 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001f44:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8001f48:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f4a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001f4e:	b15b      	cbz	r3, 8001f68 <USBD_CDC_EP0_RxReady+0x24>
 8001f50:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001f54:	28ff      	cmp	r0, #255	; 0xff
 8001f56:	d007      	beq.n	8001f68 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001f5e:	4621      	mov	r1, r4
 8001f60:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001f62:	23ff      	movs	r3, #255	; 0xff
 8001f64:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001f68:	2000      	movs	r0, #0
 8001f6a:	bd10      	pop	{r4, pc}

08001f6c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001f6c:	2343      	movs	r3, #67	; 0x43
 8001f6e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001f70:	4800      	ldr	r0, [pc, #0]	; (8001f74 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001f72:	4770      	bx	lr
 8001f74:	20000038 	.word	0x20000038

08001f78 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001f78:	2343      	movs	r3, #67	; 0x43
 8001f7a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001f7c:	4800      	ldr	r0, [pc, #0]	; (8001f80 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001f7e:	4770      	bx	lr
 8001f80:	2000007c 	.word	0x2000007c

08001f84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001f84:	2343      	movs	r3, #67	; 0x43
 8001f86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001f88:	4800      	ldr	r0, [pc, #0]	; (8001f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001f8a:	4770      	bx	lr
 8001f8c:	200000cc 	.word	0x200000cc

08001f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001f90:	230a      	movs	r3, #10
 8001f92:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001f94:	4800      	ldr	r0, [pc, #0]	; (8001f98 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001f96:	4770      	bx	lr
 8001f98:	200000c0 	.word	0x200000c0

08001f9c <USBD_CDC_DataOut>:
{      
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001fa0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001fa4:	f001 fdac 	bl	8003b00 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8001fa8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001fac:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8001fb0:	b14b      	cbz	r3, 8001fc6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001fb2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001fb6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001fc0:	4798      	blx	r3
    return USBD_OK;
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001fc6:	2002      	movs	r0, #2
}
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
	...

08001fcc <USBD_CDC_Setup>:
{
 8001fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fce:	780f      	ldrb	r7, [r1, #0]
{
 8001fd0:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fd2:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8001fd6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001fd8:	d023      	beq.n	8002022 <USBD_CDC_Setup+0x56>
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d119      	bne.n	8002012 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8001fde:	88ca      	ldrh	r2, [r1, #6]
 8001fe0:	784b      	ldrb	r3, [r1, #1]
 8001fe2:	b1c2      	cbz	r2, 8002016 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8001fe4:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001fe6:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8001fea:	d50b      	bpl.n	8002004 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001fec:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	688f      	ldr	r7, [r1, #8]
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	4630      	mov	r0, r6
 8001ffc:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8001ffe:	f000 fb72 	bl	80026e6 <USBD_CtlSendData>
      break;
 8002002:	e006      	b.n	8002012 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002004:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002008:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800200c:	4629      	mov	r1, r5
 800200e:	f000 fb7f 	bl	8002710 <USBD_CtlPrepareRx>
}
 8002012:	2000      	movs	r0, #0
 8002014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002016:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800201a:	6884      	ldr	r4, [r0, #8]
 800201c:	4618      	mov	r0, r3
 800201e:	47a0      	blx	r4
 8002020:	e7f7      	b.n	8002012 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002022:	784b      	ldrb	r3, [r1, #1]
 8002024:	2b0a      	cmp	r3, #10
 8002026:	d1f4      	bne.n	8002012 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002028:	2201      	movs	r2, #1
 800202a:	4901      	ldr	r1, [pc, #4]	; (8002030 <USBD_CDC_Setup+0x64>)
 800202c:	e7e7      	b.n	8001ffe <USBD_CDC_Setup+0x32>
 800202e:	bf00      	nop
 8002030:	200001a4 	.word	0x200001a4

08002034 <USBD_CDC_DeInit>:
{
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002038:	2181      	movs	r1, #129	; 0x81
 800203a:	f001 fcfd 	bl	8003a38 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800203e:	2101      	movs	r1, #1
 8002040:	4620      	mov	r0, r4
 8002042:	f001 fcf9 	bl	8003a38 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002046:	2182      	movs	r1, #130	; 0x82
 8002048:	4620      	mov	r0, r4
 800204a:	f001 fcf5 	bl	8003a38 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800204e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002052:	b153      	cbz	r3, 800206a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002054:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800205c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002060:	f001 fd58 	bl	8003b14 <USBD_static_free>
    pdev->pClassData = NULL;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800206a:	2000      	movs	r0, #0
 800206c:	bd10      	pop	{r4, pc}

0800206e <USBD_CDC_Init>:
{
 800206e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002070:	7c03      	ldrb	r3, [r0, #16]
{
 8002072:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002074:	bb7b      	cbnz	r3, 80020d6 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207a:	2202      	movs	r2, #2
 800207c:	2181      	movs	r1, #129	; 0x81
 800207e:	f001 fccb 	bl	8003a18 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002082:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002086:	2202      	movs	r2, #2
 8002088:	2101      	movs	r1, #1
 800208a:	4620      	mov	r0, r4
 800208c:	f001 fcc4 	bl	8003a18 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002090:	2308      	movs	r3, #8
 8002092:	2203      	movs	r2, #3
 8002094:	2182      	movs	r1, #130	; 0x82
 8002096:	4620      	mov	r0, r4
 8002098:	f001 fcbe 	bl	8003a18 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800209c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80020a0:	f001 fd34 	bl	8003b0c <USBD_static_malloc>
 80020a4:	4606      	mov	r6, r0
 80020a6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80020aa:	b320      	cbz	r0, 80020f6 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 80020ac:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80020ae:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80020b6:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 80020b8:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80020bc:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80020c0:	b987      	cbnz	r7, 80020e4 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80020c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80020ca:	2101      	movs	r1, #1
 80020cc:	4620      	mov	r0, r4
 80020ce:	f001 fd09 	bl	8003ae4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80020d2:	4638      	mov	r0, r7
 80020d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80020d6:	2340      	movs	r3, #64	; 0x40
 80020d8:	2202      	movs	r2, #2
 80020da:	2181      	movs	r1, #129	; 0x81
 80020dc:	f001 fc9c 	bl	8003a18 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80020e0:	2340      	movs	r3, #64	; 0x40
 80020e2:	e7d0      	b.n	8002086 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80020e4:	2340      	movs	r3, #64	; 0x40
 80020e6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80020ea:	2101      	movs	r1, #1
 80020ec:	4620      	mov	r0, r4
 80020ee:	f001 fcf9 	bl	8003ae4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80020f2:	4628      	mov	r0, r5
 80020f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80020f6:	2001      	movs	r0, #1
}
 80020f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020fa <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80020fa:	b119      	cbz	r1, 8002104 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80020fc:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002100:	2000      	movs	r0, #0
 8002102:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002104:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002106:	4770      	bx	lr

08002108 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002108:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800210c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800210e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002112:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002116:	4770      	bx	lr

08002118 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002118:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800211c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800211e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002122:	4770      	bx	lr

08002124 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002124:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002128:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800212a:	b162      	cbz	r2, 8002146 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800212c:	7c04      	ldrb	r4, [r0, #16]
 800212e:	b944      	cbnz	r4, 8002142 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002134:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002138:	2101      	movs	r1, #1
 800213a:	f001 fcd3 	bl	8003ae4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800213e:	2000      	movs	r0, #0
 8002140:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	e7f6      	b.n	8002134 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002146:	2002      	movs	r0, #2
  }
}
 8002148:	bd10      	pop	{r4, pc}

0800214a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800214a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800214c:	b180      	cbz	r0, 8002170 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800214e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002152:	b113      	cbz	r3, 800215a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800215a:	b109      	cbz	r1, 8002160 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800215c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002160:	2301      	movs	r3, #1
  pdev->id = id;
 8002162:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002164:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002168:	f001 fc00 	bl	800396c <USBD_LL_Init>
  
  return USBD_OK; 
 800216c:	2000      	movs	r0, #0
 800216e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002170:	2002      	movs	r0, #2
}
 8002172:	bd08      	pop	{r3, pc}

08002174 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002174:	b119      	cbz	r1, 800217e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002176:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800217a:	2000      	movs	r0, #0
 800217c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800217e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002180:	4770      	bx	lr

08002182 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002182:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002184:	f001 fc3a 	bl	80039fc <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002188:	2000      	movs	r0, #0
 800218a:	bd08      	pop	{r3, pc}

0800218c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800218c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800218e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002192:	b90b      	cbnz	r3, 8002198 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002194:	2002      	movs	r0, #2
 8002196:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4798      	blx	r3
 800219c:	2800      	cmp	r0, #0
 800219e:	d1f9      	bne.n	8002194 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80021a0:	bd08      	pop	{r3, pc}

080021a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80021a2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80021a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4798      	blx	r3
  return USBD_OK;
}
 80021ac:	2000      	movs	r0, #0
 80021ae:	bd08      	pop	{r3, pc}

080021b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80021b0:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80021b2:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80021b6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80021b8:	4628      	mov	r0, r5
 80021ba:	f000 fa64 	bl	8002686 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80021be:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80021c0:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80021c4:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80021c8:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80021cc:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80021d0:	f001 031f 	and.w	r3, r1, #31
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d00e      	beq.n	80021f6 <USBD_LL_SetupStage+0x46>
 80021d8:	d307      	bcc.n	80021ea <USBD_LL_SetupStage+0x3a>
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d010      	beq.n	8002200 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80021de:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80021e2:	4620      	mov	r0, r4
 80021e4:	f001 fc36 	bl	8003a54 <USBD_LL_StallEP>
    break;
 80021e8:	e003      	b.n	80021f2 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80021ea:	4629      	mov	r1, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	f000 f8d5 	bl	800239c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80021f2:	2000      	movs	r0, #0
 80021f4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80021f6:	4629      	mov	r1, r5
 80021f8:	4620      	mov	r0, r4
 80021fa:	f000 f9c9 	bl	8002590 <USBD_StdItfReq>
    break;
 80021fe:	e7f8      	b.n	80021f2 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002200:	4629      	mov	r1, r5
 8002202:	4620      	mov	r0, r4
 8002204:	f000 f9dc 	bl	80025c0 <USBD_StdEPReq>
    break;
 8002208:	e7f3      	b.n	80021f2 <USBD_LL_SetupStage+0x42>

0800220a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800220a:	b538      	push	{r3, r4, r5, lr}
 800220c:	4604      	mov	r4, r0
 800220e:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002210:	bb11      	cbnz	r1, 8002258 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002212:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002216:	2b03      	cmp	r3, #3
 8002218:	d10f      	bne.n	800223a <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800221a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800221e:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002222:	4293      	cmp	r3, r2
 8002224:	d90b      	bls.n	800223e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002226:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002228:	429a      	cmp	r2, r3
 800222a:	bf28      	it	cs
 800222c:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800222e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002232:	b292      	uxth	r2, r2
 8002234:	4629      	mov	r1, r5
 8002236:	f000 fa7a 	bl	800272e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800223a:	2000      	movs	r0, #0
 800223c:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800223e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	b123      	cbz	r3, 8002250 <USBD_LL_DataOutStage+0x46>
 8002246:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800224a:	2a03      	cmp	r2, #3
 800224c:	d100      	bne.n	8002250 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800224e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002250:	4620      	mov	r0, r4
 8002252:	f000 fa74 	bl	800273e <USBD_CtlSendStatus>
 8002256:	e7f0      	b.n	800223a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002258:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0eb      	beq.n	800223a <USBD_LL_DataOutStage+0x30>
 8002262:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002266:	2a03      	cmp	r2, #3
 8002268:	d1e7      	bne.n	800223a <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800226a:	4798      	blx	r3
 800226c:	e7e5      	b.n	800223a <USBD_LL_DataOutStage+0x30>

0800226e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800226e:	b570      	push	{r4, r5, r6, lr}
 8002270:	4613      	mov	r3, r2
 8002272:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002274:	460e      	mov	r6, r1
 8002276:	2900      	cmp	r1, #0
 8002278:	d13d      	bne.n	80022f6 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800227a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800227e:	2a02      	cmp	r2, #2
 8002280:	d10f      	bne.n	80022a2 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002282:	69c5      	ldr	r5, [r0, #28]
 8002284:	6a02      	ldr	r2, [r0, #32]
 8002286:	4295      	cmp	r5, r2
 8002288:	d914      	bls.n	80022b4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800228a:	1aaa      	subs	r2, r5, r2
 800228c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800228e:	4619      	mov	r1, r3
 8002290:	b292      	uxth	r2, r2
 8002292:	f000 fa35 	bl	8002700 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002296:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002298:	461a      	mov	r2, r3
 800229a:	4619      	mov	r1, r3
 800229c:	4620      	mov	r0, r4
 800229e:	f001 fc21 	bl	8003ae4 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80022a2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80022b0:	2000      	movs	r0, #0
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80022b4:	6983      	ldr	r3, [r0, #24]
 80022b6:	fbb3 f5f2 	udiv	r5, r3, r2
 80022ba:	fb02 3515 	mls	r5, r2, r5, r3
 80022be:	b965      	cbnz	r5, 80022da <USBD_LL_DataInStage+0x6c>
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d80a      	bhi.n	80022da <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80022c4:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d206      	bcs.n	80022da <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80022cc:	462a      	mov	r2, r5
 80022ce:	f000 fa17 	bl	8002700 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80022d2:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80022d6:	462b      	mov	r3, r5
 80022d8:	e7de      	b.n	8002298 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80022da:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	b12b      	cbz	r3, 80022ee <USBD_LL_DataInStage+0x80>
 80022e2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80022e6:	2a03      	cmp	r2, #3
 80022e8:	d101      	bne.n	80022ee <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80022ea:	4620      	mov	r0, r4
 80022ec:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80022ee:	4620      	mov	r0, r4
 80022f0:	f000 fa30 	bl	8002754 <USBD_CtlReceiveStatus>
 80022f4:	e7d5      	b.n	80022a2 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80022f6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0d7      	beq.n	80022b0 <USBD_LL_DataInStage+0x42>
 8002300:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002304:	2a03      	cmp	r2, #3
 8002306:	d1d3      	bne.n	80022b0 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002308:	4798      	blx	r3
 800230a:	e7d1      	b.n	80022b0 <USBD_LL_DataInStage+0x42>

0800230c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800230c:	2200      	movs	r2, #0
{
 800230e:	b538      	push	{r3, r4, r5, lr}
 8002310:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002312:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002314:	4611      	mov	r1, r2
 8002316:	2340      	movs	r3, #64	; 0x40
 8002318:	f001 fb7e 	bl	8003a18 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800231c:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800231e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002322:	2200      	movs	r2, #0
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	4620      	mov	r0, r4
 8002328:	f001 fb76 	bl	8003a18 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800232c:	2301      	movs	r3, #1
 800232e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002332:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002336:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002338:	b12b      	cbz	r3, 8002346 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800233a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800233e:	7921      	ldrb	r1, [r4, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4620      	mov	r0, r4
 8002344:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002346:	2000      	movs	r0, #0
 8002348:	bd38      	pop	{r3, r4, r5, pc}

0800234a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800234a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800234c:	2000      	movs	r0, #0
 800234e:	4770      	bx	lr

08002350 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002350:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002354:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002358:	2304      	movs	r3, #4
 800235a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800235e:	2000      	movs	r0, #0
 8002360:	4770      	bx	lr

08002362 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002362:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002366:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800236a:	2000      	movs	r0, #0
 800236c:	4770      	bx	lr

0800236e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800236e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002370:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002374:	2a03      	cmp	r2, #3
 8002376:	d104      	bne.n	8002382 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002378:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	b103      	cbz	r3, 8002382 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002380:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002382:	2000      	movs	r0, #0
 8002384:	bd08      	pop	{r3, pc}

08002386 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002386:	b510      	push	{r4, lr}
 8002388:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	f001 fb62 	bl	8003a54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002390:	4620      	mov	r0, r4
}
 8002392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002396:	2100      	movs	r1, #0
 8002398:	f001 bb5c 	b.w	8003a54 <USBD_LL_StallEP>

0800239c <USBD_StdDevReq>:
{
 800239c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800239e:	784b      	ldrb	r3, [r1, #1]
{
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d879      	bhi.n	800249c <USBD_StdDevReq+0x100>
 80023a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ac:	00e500c9 	.word	0x00e500c9
 80023b0:	00d90078 	.word	0x00d90078
 80023b4:	006d0078 	.word	0x006d0078
 80023b8:	0078000a 	.word	0x0078000a
 80023bc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80023c0:	884b      	ldrh	r3, [r1, #2]
 80023c2:	0a1a      	lsrs	r2, r3, #8
 80023c4:	3a01      	subs	r2, #1
 80023c6:	2a06      	cmp	r2, #6
 80023c8:	d868      	bhi.n	800249c <USBD_StdDevReq+0x100>
 80023ca:	e8df f002 	tbb	[pc, r2]
 80023ce:	1c04      	.short	0x1c04
 80023d0:	49676729 	.word	0x49676729
 80023d4:	52          	.byte	0x52
 80023d5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80023d6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80023da:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80023dc:	f10d 0106 	add.w	r1, sp, #6
 80023e0:	7c20      	ldrb	r0, [r4, #16]
 80023e2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80023e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d067      	beq.n	80024bc <USBD_StdDevReq+0x120>
 80023ec:	88eb      	ldrh	r3, [r5, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d064      	beq.n	80024bc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80023f2:	429a      	cmp	r2, r3
 80023f4:	bf28      	it	cs
 80023f6:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80023f8:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80023fa:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80023fe:	4620      	mov	r0, r4
 8002400:	f000 f971 	bl	80026e6 <USBD_CtlSendData>
 8002404:	e05a      	b.n	80024bc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002406:	7c02      	ldrb	r2, [r0, #16]
 8002408:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800240c:	b932      	cbnz	r2, 800241c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002410:	f10d 0006 	add.w	r0, sp, #6
 8002414:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002416:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002418:	7043      	strb	r3, [r0, #1]
 800241a:	e7e3      	b.n	80023e4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	e7f7      	b.n	8002410 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b05      	cmp	r3, #5
 8002424:	d83a      	bhi.n	800249c <USBD_StdDevReq+0x100>
 8002426:	e8df f003 	tbb	[pc, r3]
 800242a:	0703      	.short	0x0703
 800242c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002430:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	e7d1      	b.n	80023dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002438:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	e7cd      	b.n	80023dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002440:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	e7c9      	b.n	80023dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002448:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	e7c5      	b.n	80023dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002450:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	e7c1      	b.n	80023dc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002458:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	e7bd      	b.n	80023dc <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002460:	7c03      	ldrb	r3, [r0, #16]
 8002462:	b9db      	cbnz	r3, 800249c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002464:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002468:	f10d 0006 	add.w	r0, sp, #6
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	4798      	blx	r3
 8002470:	e7b8      	b.n	80023e4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002472:	7c03      	ldrb	r3, [r0, #16]
 8002474:	b993      	cbnz	r3, 800249c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002476:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800247a:	f10d 0006 	add.w	r0, sp, #6
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002482:	2307      	movs	r3, #7
 8002484:	e7c8      	b.n	8002418 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002486:	888b      	ldrh	r3, [r1, #4]
 8002488:	b943      	cbnz	r3, 800249c <USBD_StdDevReq+0x100>
 800248a:	88cb      	ldrh	r3, [r1, #6]
 800248c:	b933      	cbnz	r3, 800249c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800248e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002492:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002494:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002496:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800249a:	d103      	bne.n	80024a4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ff72 	bl	8002386 <USBD_CtlError.constprop.0>
    break;
 80024a2:	e00b      	b.n	80024bc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80024a4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80024a8:	4629      	mov	r1, r5
 80024aa:	f001 faff 	bl	8003aac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80024ae:	4620      	mov	r0, r4
 80024b0:	f000 f945 	bl	800273e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80024b4:	b12d      	cbz	r5, 80024c2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80024b6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80024b8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80024bc:	2000      	movs	r0, #0
 80024be:	b003      	add	sp, #12
 80024c0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80024c2:	2301      	movs	r3, #1
 80024c4:	e7f8      	b.n	80024b8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80024c6:	7889      	ldrb	r1, [r1, #2]
 80024c8:	4d30      	ldr	r5, [pc, #192]	; (800258c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80024ca:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80024cc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80024ce:	d8e5      	bhi.n	800249c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80024d0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d00c      	beq.n	80024f2 <USBD_StdDevReq+0x156>
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d1df      	bne.n	800249c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80024dc:	b9b1      	cbnz	r1, 800250c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024de:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80024e0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024e2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80024e6:	f7ff fe5c 	bl	80021a2 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 f927 	bl	800273e <USBD_CtlSendStatus>
 80024f0:	e7e4      	b.n	80024bc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80024f2:	2900      	cmp	r1, #0
 80024f4:	d0f9      	beq.n	80024ea <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80024f6:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80024f8:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80024fa:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80024fc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fe43 	bl	800218c <USBD_SetClassConfig>
 8002506:	2802      	cmp	r0, #2
 8002508:	d1ef      	bne.n	80024ea <USBD_StdDevReq+0x14e>
 800250a:	e7c7      	b.n	800249c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800250c:	6841      	ldr	r1, [r0, #4]
 800250e:	2901      	cmp	r1, #1
 8002510:	d0eb      	beq.n	80024ea <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002512:	b2c9      	uxtb	r1, r1
 8002514:	f7ff fe45 	bl	80021a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002518:	7829      	ldrb	r1, [r5, #0]
 800251a:	6061      	str	r1, [r4, #4]
 800251c:	e7f0      	b.n	8002500 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800251e:	88ca      	ldrh	r2, [r1, #6]
 8002520:	2a01      	cmp	r2, #1
 8002522:	d1bb      	bne.n	800249c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002524:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002528:	2b02      	cmp	r3, #2
 800252a:	d003      	beq.n	8002534 <USBD_StdDevReq+0x198>
 800252c:	2b03      	cmp	r3, #3
 800252e:	d1b5      	bne.n	800249c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002530:	1d01      	adds	r1, r0, #4
 8002532:	e764      	b.n	80023fe <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002534:	4601      	mov	r1, r0
 8002536:	2300      	movs	r3, #0
 8002538:	f841 3f08 	str.w	r3, [r1, #8]!
 800253c:	e75f      	b.n	80023fe <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800253e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002542:	3b02      	subs	r3, #2
 8002544:	2b01      	cmp	r3, #1
 8002546:	d8a9      	bhi.n	800249c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002548:	2301      	movs	r3, #1
 800254a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800254c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002550:	b10b      	cbz	r3, 8002556 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002552:	2303      	movs	r3, #3
 8002554:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002556:	2202      	movs	r2, #2
 8002558:	f104 010c 	add.w	r1, r4, #12
 800255c:	e74f      	b.n	80023fe <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800255e:	884b      	ldrh	r3, [r1, #2]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d1ab      	bne.n	80024bc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002564:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002568:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800256c:	4629      	mov	r1, r5
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4620      	mov	r0, r4
 8002572:	4798      	blx	r3
 8002574:	e7b9      	b.n	80024ea <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002576:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800257a:	3b02      	subs	r3, #2
 800257c:	2b01      	cmp	r3, #1
 800257e:	d88d      	bhi.n	800249c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002580:	884b      	ldrh	r3, [r1, #2]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d19a      	bne.n	80024bc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002586:	2300      	movs	r3, #0
 8002588:	e7ec      	b.n	8002564 <USBD_StdDevReq+0x1c8>
 800258a:	bf00      	nop
 800258c:	200001a5 	.word	0x200001a5

08002590 <USBD_StdItfReq>:
{
 8002590:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002592:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002596:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002598:	2b03      	cmp	r3, #3
{
 800259a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800259c:	d10d      	bne.n	80025ba <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800259e:	790b      	ldrb	r3, [r1, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d80a      	bhi.n	80025ba <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80025a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80025ac:	88eb      	ldrh	r3, [r5, #6]
 80025ae:	b913      	cbnz	r3, 80025b6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80025b0:	4620      	mov	r0, r4
 80025b2:	f000 f8c4 	bl	800273e <USBD_CtlSendStatus>
}
 80025b6:	2000      	movs	r0, #0
 80025b8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80025ba:	f7ff fee4 	bl	8002386 <USBD_CtlError.constprop.0>
    break;
 80025be:	e7fa      	b.n	80025b6 <USBD_StdItfReq+0x26>

080025c0 <USBD_StdEPReq>:
{
 80025c0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80025c2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80025c4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80025c6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80025ca:	2a20      	cmp	r2, #32
{
 80025cc:	4604      	mov	r4, r0
 80025ce:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80025d0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80025d2:	d105      	bne.n	80025e0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80025d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4798      	blx	r3
}
 80025dc:	2000      	movs	r0, #0
 80025de:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80025e0:	784a      	ldrb	r2, [r1, #1]
 80025e2:	2a01      	cmp	r2, #1
 80025e4:	d01c      	beq.n	8002620 <USBD_StdEPReq+0x60>
 80025e6:	d32a      	bcc.n	800263e <USBD_StdEPReq+0x7e>
 80025e8:	2a03      	cmp	r2, #3
 80025ea:	d1f7      	bne.n	80025dc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80025ec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025f0:	2a02      	cmp	r2, #2
 80025f2:	d040      	beq.n	8002676 <USBD_StdEPReq+0xb6>
 80025f4:	2a03      	cmp	r2, #3
 80025f6:	d002      	beq.n	80025fe <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80025f8:	f7ff fec5 	bl	8002386 <USBD_CtlError.constprop.0>
      break;
 80025fc:	e7ee      	b.n	80025dc <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80025fe:	884a      	ldrh	r2, [r1, #2]
 8002600:	b922      	cbnz	r2, 800260c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002602:	065e      	lsls	r6, r3, #25
 8002604:	d002      	beq.n	800260c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002606:	4619      	mov	r1, r3
 8002608:	f001 fa24 	bl	8003a54 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800260c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002610:	4629      	mov	r1, r5
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4620      	mov	r0, r4
 8002616:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002618:	4620      	mov	r0, r4
 800261a:	f000 f890 	bl	800273e <USBD_CtlSendStatus>
 800261e:	e7dd      	b.n	80025dc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002620:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002624:	2a02      	cmp	r2, #2
 8002626:	d026      	beq.n	8002676 <USBD_StdEPReq+0xb6>
 8002628:	2a03      	cmp	r2, #3
 800262a:	d1e5      	bne.n	80025f8 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800262c:	884a      	ldrh	r2, [r1, #2]
 800262e:	2a00      	cmp	r2, #0
 8002630:	d1d4      	bne.n	80025dc <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002632:	0659      	lsls	r1, r3, #25
 8002634:	d0f0      	beq.n	8002618 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002636:	4619      	mov	r1, r3
 8002638:	f001 fa1a 	bl	8003a70 <USBD_LL_ClearStallEP>
 800263c:	e7e6      	b.n	800260c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800263e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002642:	2a02      	cmp	r2, #2
 8002644:	d017      	beq.n	8002676 <USBD_StdEPReq+0xb6>
 8002646:	2a03      	cmp	r2, #3
 8002648:	d1d6      	bne.n	80025f8 <USBD_StdEPReq+0x38>
 800264a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800264e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002652:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002656:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002658:	bf14      	ite	ne
 800265a:	3514      	addne	r5, #20
 800265c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002660:	f001 fa14 	bl	8003a8c <USBD_LL_IsStallEP>
 8002664:	b168      	cbz	r0, 8002682 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002666:	2301      	movs	r3, #1
 8002668:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800266a:	2202      	movs	r2, #2
 800266c:	4629      	mov	r1, r5
 800266e:	4620      	mov	r0, r4
 8002670:	f000 f839 	bl	80026e6 <USBD_CtlSendData>
      break;
 8002674:	e7b2      	b.n	80025dc <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002676:	065a      	lsls	r2, r3, #25
 8002678:	d0b0      	beq.n	80025dc <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800267a:	4619      	mov	r1, r3
 800267c:	f001 f9ea 	bl	8003a54 <USBD_LL_StallEP>
 8002680:	e7ac      	b.n	80025dc <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002682:	6028      	str	r0, [r5, #0]
 8002684:	e7f1      	b.n	800266a <USBD_StdEPReq+0xaa>

08002686 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002686:	780b      	ldrb	r3, [r1, #0]
 8002688:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800268a:	784b      	ldrb	r3, [r1, #1]
 800268c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800268e:	78ca      	ldrb	r2, [r1, #3]
 8002690:	788b      	ldrb	r3, [r1, #2]
 8002692:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002696:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002698:	794a      	ldrb	r2, [r1, #5]
 800269a:	790b      	ldrb	r3, [r1, #4]
 800269c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026a0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80026a2:	79ca      	ldrb	r2, [r1, #7]
 80026a4:	798b      	ldrb	r3, [r1, #6]
 80026a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026aa:	80c3      	strh	r3, [r0, #6]
 80026ac:	4770      	bx	lr

080026ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80026ae:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80026b0:	b188      	cbz	r0, 80026d6 <USBD_GetString+0x28>
 80026b2:	4605      	mov	r5, r0
 80026b4:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80026b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2c00      	cmp	r4, #0
 80026be:	d1f9      	bne.n	80026b4 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	3302      	adds	r3, #2
 80026c4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80026c6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80026c8:	2303      	movs	r3, #3
 80026ca:	704b      	strb	r3, [r1, #1]
 80026cc:	2302      	movs	r3, #2
 80026ce:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80026d0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80026d4:	b905      	cbnz	r5, 80026d8 <USBD_GetString+0x2a>
 80026d6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	54cd      	strb	r5, [r1, r3]
 80026dc:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80026de:	3302      	adds	r3, #2
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	548c      	strb	r4, [r1, r2]
 80026e4:	e7f4      	b.n	80026d0 <USBD_GetString+0x22>

080026e6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80026e6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80026e8:	2202      	movs	r2, #2
{
 80026ea:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80026ec:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80026f0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80026f2:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80026f4:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80026f6:	2100      	movs	r1, #0
 80026f8:	f001 f9e6 	bl	8003ac8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80026fc:	2000      	movs	r0, #0
 80026fe:	bd10      	pop	{r4, pc}

08002700 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002700:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002702:	4613      	mov	r3, r2
 8002704:	460a      	mov	r2, r1
 8002706:	2100      	movs	r1, #0
 8002708:	f001 f9de 	bl	8003ac8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800270c:	2000      	movs	r0, #0
 800270e:	bd08      	pop	{r3, pc}

08002710 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002710:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002712:	2203      	movs	r2, #3
{
 8002714:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002716:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800271a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800271e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002720:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002724:	2100      	movs	r1, #0
 8002726:	f001 f9dd 	bl	8003ae4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800272a:	2000      	movs	r0, #0
 800272c:	bd10      	pop	{r4, pc}

0800272e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800272e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002730:	4613      	mov	r3, r2
 8002732:	460a      	mov	r2, r1
 8002734:	2100      	movs	r1, #0
 8002736:	f001 f9d5 	bl	8003ae4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800273a:	2000      	movs	r0, #0
 800273c:	bd08      	pop	{r3, pc}

0800273e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800273e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002740:	2304      	movs	r3, #4
 8002742:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002746:	2300      	movs	r3, #0
 8002748:	461a      	mov	r2, r3
 800274a:	4619      	mov	r1, r3
 800274c:	f001 f9bc 	bl	8003ac8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002750:	2000      	movs	r0, #0
 8002752:	bd08      	pop	{r3, pc}

08002754 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002754:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002756:	2305      	movs	r3, #5
 8002758:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800275c:	2300      	movs	r3, #0
 800275e:	461a      	mov	r2, r3
 8002760:	4619      	mov	r1, r3
 8002762:	f001 f9bf 	bl	8003ae4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002766:	2000      	movs	r0, #0
 8002768:	bd08      	pop	{r3, pc}

0800276a <dwt_writetodevice>:
    uint16      recordNumber,
    uint16      index,
    uint32      length,
    const uint8 *buffer
)
{
 800276a:	b507      	push	{r0, r1, r2, lr}
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800276c:	b951      	cbnz	r1, 8002784 <dwt_writetodevice+0x1a>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800276e:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002772:	f88d 0004 	strb.w	r0, [sp, #4]
 8002776:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8002778:	a901      	add	r1, sp, #4
 800277a:	f000 fe1f 	bl	80033bc <writetospi>
} // end dwt_writetodevice()
 800277e:	b003      	add	sp, #12
 8002780:	f85d fb04 	ldr.w	pc, [sp], #4
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002784:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002786:	f060 003f 	orn	r0, r0, #63	; 0x3f
 800278a:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800278e:	bf83      	ittte	hi
 8002790:	f061 007f 	ornhi	r0, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002794:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8002796:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800279a:	f88d 1005 	strbls.w	r1, [sp, #5]
 800279e:	bf92      	itee	ls
 80027a0:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80027a2:	f88d 1006 	strbhi.w	r1, [sp, #6]
 80027a6:	2003      	movhi	r0, #3
 80027a8:	e7e6      	b.n	8002778 <dwt_writetodevice+0xe>

080027aa <dwt_writetxdata>:
{
 80027aa:	b508      	push	{r3, lr}
 80027ac:	460b      	mov	r3, r1
 80027ae:	4611      	mov	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 80027b0:	4402      	add	r2, r0
 80027b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80027b6:	dc05      	bgt.n	80027c4 <dwt_writetxdata+0x1a>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80027b8:	1e82      	subs	r2, r0, #2
 80027ba:	2009      	movs	r0, #9
 80027bc:	f7ff ffd5 	bl	800276a <dwt_writetodevice>
        return DWT_SUCCESS;
 80027c0:	2000      	movs	r0, #0
 80027c2:	bd08      	pop	{r3, pc}
        return DWT_ERROR;
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
} // end dwt_writetxdata()
 80027c8:	bd08      	pop	{r3, pc}

080027ca <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32  length,
    uint8   *buffer
)
{
 80027ca:	b507      	push	{r0, r1, r2, lr}
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80027cc:	b941      	cbnz	r1, 80027e0 <dwt_readfromdevice+0x16>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80027ce:	f88d 0004 	strb.w	r0, [sp, #4]
 80027d2:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80027d4:	a901      	add	r1, sp, #4
 80027d6:	f000 fe1b 	bl	8003410 <readfromspi>
} // end dwt_readfromdevice()
 80027da:	b003      	add	sp, #12
 80027dc:	f85d fb04 	ldr.w	pc, [sp], #4
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80027e0:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80027e2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80027e6:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80027ea:	bf83      	ittte	hi
 80027ec:	f061 007f 	ornhi	r0, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80027f0:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80027f2:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80027f6:	f88d 1005 	strbls.w	r1, [sp, #5]
 80027fa:	bf92      	itee	ls
 80027fc:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80027fe:	f88d 1006 	strbhi.w	r1, [sp, #6]
 8002802:	2003      	movhi	r0, #3
 8002804:	e7e6      	b.n	80027d4 <dwt_readfromdevice+0xa>

08002806 <dwt_readrxdata>:
{
 8002806:	b410      	push	{r4}
 8002808:	4614      	mov	r4, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800280a:	4603      	mov	r3, r0
 800280c:	460a      	mov	r2, r1
 800280e:	2011      	movs	r0, #17
 8002810:	4621      	mov	r1, r4
}
 8002812:	bc10      	pop	{r4}
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8002814:	f7ff bfd9 	b.w	80027ca <dwt_readfromdevice>

08002818 <dwt_readrxtimestamp>:
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8002818:	4603      	mov	r3, r0
 800281a:	2205      	movs	r2, #5
 800281c:	2100      	movs	r1, #0
 800281e:	2015      	movs	r0, #21
 8002820:	f7ff bfd3 	b.w	80027ca <dwt_readfromdevice>

08002824 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID,int regOffset)
{
 8002824:	b513      	push	{r0, r1, r4, lr}
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002826:	ac01      	add	r4, sp, #4
 8002828:	4623      	mov	r3, r4
 800282a:	b280      	uxth	r0, r0
 800282c:	2204      	movs	r2, #4
 800282e:	b289      	uxth	r1, r1
 8002830:	f7ff ffcb 	bl	80027ca <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8002834:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 8002836:	2000      	movs	r0, #0
    {
        regval = (regval << 8) + buffer[j] ;
 8002838:	5ce2      	ldrb	r2, [r4, r3]
    for (j = 3 ; j >= 0 ; j --)
 800283a:	f113 33ff 	adds.w	r3, r3, #4294967295
        regval = (regval << 8) + buffer[j] ;
 800283e:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8002842:	d2f9      	bcs.n	8002838 <dwt_read32bitoffsetreg+0x14>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 8002844:	b002      	add	sp, #8
 8002846:	bd10      	pop	{r4, pc}

08002848 <dwt_readdevid>:
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8002848:	2100      	movs	r1, #0
 800284a:	4608      	mov	r0, r1
 800284c:	f7ff bfea 	b.w	8002824 <dwt_read32bitoffsetreg>

08002850 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
 8002850:	b507      	push	{r0, r1, r2, lr}
    uint16  regval = 0 ;
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002852:	2202      	movs	r2, #2
 8002854:	ab01      	add	r3, sp, #4
 8002856:	b289      	uxth	r1, r1
 8002858:	b280      	uxth	r0, r0
 800285a:	f7ff ffb6 	bl	80027ca <dwt_readfromdevice>

    regval = (buffer[1] << 8) + buffer[0] ;
 800285e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002862:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002866:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return regval ;

} // end dwt_read16bitoffsetreg()
 800286a:	b280      	uxth	r0, r0
 800286c:	b003      	add	sp, #12
 800286e:	f85d fb04 	ldr.w	pc, [sp], #4

08002872 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8002872:	b507      	push	{r0, r1, r2, lr}
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002874:	2201      	movs	r2, #1
 8002876:	f10d 0307 	add.w	r3, sp, #7
 800287a:	b289      	uxth	r1, r1
 800287c:	b280      	uxth	r0, r0
 800287e:	f7ff ffa4 	bl	80027ca <dwt_readfromdevice>

    return regval ;
}
 8002882:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002886:	b003      	add	sp, #12
 8002888:	f85d fb04 	ldr.w	pc, [sp], #4

0800288c <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800288c:	b507      	push	{r0, r1, r2, lr}
 800288e:	ab02      	add	r3, sp, #8
 8002890:	f803 2d01 	strb.w	r2, [r3, #-1]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002894:	b289      	uxth	r1, r1
 8002896:	2201      	movs	r2, #1
 8002898:	b280      	uxth	r0, r0
 800289a:	f7ff ff66 	bl	800276a <dwt_writetodevice>
}
 800289e:	b003      	add	sp, #12
 80028a0:	f85d fb04 	ldr.w	pc, [sp], #4

080028a4 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16 regval)
{
 80028a4:	b507      	push	{r0, r1, r2, lr}
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80028a6:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 80028aa:	0a12      	lsrs	r2, r2, #8
 80028ac:	f88d 2005 	strb.w	r2, [sp, #5]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80028b0:	ab01      	add	r3, sp, #4
 80028b2:	2202      	movs	r2, #2
 80028b4:	b289      	uxth	r1, r1
 80028b6:	b280      	uxth	r0, r0
 80028b8:	f7ff ff57 	bl	800276a <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80028bc:	b003      	add	sp, #12
 80028be:	f85d fb04 	ldr.w	pc, [sp], #4

080028c2 <dwt_setrxantennadelay>:
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 80028c2:	4602      	mov	r2, r0
 80028c4:	f641 0104 	movw	r1, #6148	; 0x1804
 80028c8:	202e      	movs	r0, #46	; 0x2e
 80028ca:	f7ff bfeb 	b.w	80028a4 <dwt_write16bitoffsetreg>

080028ce <dwt_settxantennadelay>:
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80028ce:	4602      	mov	r2, r0
 80028d0:	2100      	movs	r1, #0
 80028d2:	2018      	movs	r0, #24
 80028d4:	f7ff bfe6 	b.w	80028a4 <dwt_write16bitoffsetreg>

080028d8 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32 regval)
{
 80028d8:	b507      	push	{r0, r1, r2, lr}
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
    {
        buffer[j] = regval & 0xff ;
        regval >>= 8 ;
 80028da:	0a13      	lsrs	r3, r2, #8
        buffer[j] = regval & 0xff ;
 80028dc:	f88d 2004 	strb.w	r2, [sp, #4]
 80028e0:	f88d 3005 	strb.w	r3, [sp, #5]
        regval >>= 8 ;
 80028e4:	0c13      	lsrs	r3, r2, #16
 80028e6:	0e12      	lsrs	r2, r2, #24
        buffer[j] = regval & 0xff ;
 80028e8:	f88d 3006 	strb.w	r3, [sp, #6]
 80028ec:	f88d 2007 	strb.w	r2, [sp, #7]
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 80028f0:	ab01      	add	r3, sp, #4
 80028f2:	2204      	movs	r2, #4
 80028f4:	b289      	uxth	r1, r1
 80028f6:	b280      	uxth	r0, r0
 80028f8:	f7ff ff37 	bl	800276a <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80028fc:	b003      	add	sp, #12
 80028fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002904 <dwt_writetxfctrl>:
    uint32 reg32 = dw1000local.txFCTRL | txFrameLength | (txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | (ranging << TX_FCTRL_TR_SHFT);
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <dwt_writetxfctrl+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	ea43 32c2 	orr.w	r2, r3, r2, lsl #15
 800290c:	4302      	orrs	r2, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800290e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002912:	2008      	movs	r0, #8
 8002914:	2100      	movs	r1, #0
 8002916:	f7ff bfdf 	b.w	80028d8 <dwt_write32bitoffsetreg>
 800291a:	bf00      	nop
 800291c:	200001a8 	.word	0x200001a8

08002920 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint32 address)
{
 8002920:	b508      	push	{r3, lr}
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8002922:	b282      	uxth	r2, r0
 8002924:	2104      	movs	r1, #4
 8002926:	202d      	movs	r0, #45	; 0x2d
 8002928:	f7ff ffbc 	bl	80028a4 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800292c:	2203      	movs	r2, #3
 800292e:	2106      	movs	r1, #6
 8002930:	202d      	movs	r0, #45	; 0x2d
 8002932:	f7ff ffab 	bl	800288c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8002936:	2106      	movs	r1, #6
 8002938:	202d      	movs	r0, #45	; 0x2d
 800293a:	2200      	movs	r2, #0
 800293c:	f7ff ffa6 	bl	800288c <dwt_write8bitoffsetreg>
    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);

    // Return the 32bit of read data
    return ret_data;
}
 8002940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8002944:	210a      	movs	r1, #10
 8002946:	202d      	movs	r0, #45	; 0x2d
 8002948:	f7ff bf6c 	b.w	8002824 <dwt_read32bitoffsetreg>

0800294c <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800294c:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800294e:	2200      	movs	r2, #0
 8002950:	2102      	movs	r1, #2
 8002952:	202c      	movs	r0, #44	; 0x2c
 8002954:	f7ff ff9a 	bl	800288c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
}
 8002958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800295c:	2202      	movs	r2, #2
 800295e:	202c      	movs	r0, #44	; 0x2c
 8002960:	4611      	mov	r1, r2
 8002962:	f7ff bf93 	b.w	800288c <dwt_write8bitoffsetreg>

08002966 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002966:	b510      	push	{r4, lr}
 8002968:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800296a:	226d      	movs	r2, #109	; 0x6d
 800296c:	f640 0106 	movw	r1, #2054	; 0x806
 8002970:	202e      	movs	r0, #46	; 0x2e
 8002972:	f7ff ff8b 	bl	800288c <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002976:	b144      	cbz	r4, 800298a <_dwt_configlde+0x24>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8002978:	f240 6207 	movw	r2, #1543	; 0x607
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8002980:	f641 0106 	movw	r1, #6150	; 0x1806
 8002984:	202e      	movs	r0, #46	; 0x2e
 8002986:	f7ff bf8d 	b.w	80028a4 <dwt_write16bitoffsetreg>
 800298a:	f241 6207 	movw	r2, #5639	; 0x1607
 800298e:	e7f5      	b.n	800297c <_dwt_configlde+0x16>

08002990 <dwt_configure>:
{
 8002990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8 chan = config->chan ;
 8002994:	7806      	ldrb	r6, [r0, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002996:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8002998:	7942      	ldrb	r2, [r0, #5]
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <dwt_configure+0x1d8>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800299c:	3f01      	subs	r7, #1
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800299e:	2e04      	cmp	r6, #4
{
 80029a0:	4604      	mov	r4, r0
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80029a2:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80029a6:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80029a8:	f000 80be 	beq.w	8002b28 <dwt_configure+0x198>
 80029ac:	1ff3      	subs	r3, r6, #7
 80029ae:	f1d3 0900 	rsbs	r9, r3, #0
 80029b2:	eb49 0903 	adc.w	r9, r9, r3
    if(DWT_BR_110K == config->dataRate)
 80029b6:	79e3      	ldrb	r3, [r4, #7]
 80029b8:	4d6c      	ldr	r5, [pc, #432]	; (8002b6c <dwt_configure+0x1dc>)
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80b7 	bne.w	8002b2e <dwt_configure+0x19e>
        dw1000local.sysCFGreg |= SYS_CFG_RXM110K ;
 80029c0:	696b      	ldr	r3, [r5, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80029c2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        dw1000local.sysCFGreg |= SYS_CFG_RXM110K ;
 80029c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029ca:	616b      	str	r3, [r5, #20]
    dw1000local.longFrames = config->phrMode ;
 80029cc:	7a23      	ldrb	r3, [r4, #8]
    dw1000local.sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80029ce:	696a      	ldr	r2, [r5, #20]
    dw1000local.longFrames = config->phrMode ;
 80029d0:	722b      	strb	r3, [r5, #8]
    dw1000local.sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    dw1000local.sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80029d8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    dw1000local.sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80029dc:	431a      	orrs	r2, r3
    dwt_write32bitreg(SYS_CFG_ID,dw1000local.sysCFGreg) ;
 80029de:	2100      	movs	r1, #0
 80029e0:	2004      	movs	r0, #4
    dw1000local.sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80029e2:	616a      	str	r2, [r5, #20]
    dwt_write32bitreg(SYS_CFG_ID,dw1000local.sysCFGreg) ;
 80029e4:	f7ff ff78 	bl	80028d8 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80029e8:	4642      	mov	r2, r8
 80029ea:	f642 0104 	movw	r1, #10244	; 0x2804
 80029ee:	202e      	movs	r0, #46	; 0x2e
 80029f0:	f7ff ff58 	bl	80028a4 <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 80029f4:	4638      	mov	r0, r7
 80029f6:	f7ff ffb6 	bl	8002966 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80029fa:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <dwt_configure+0x1e0>)
 80029fc:	2107      	movs	r1, #7
 80029fe:	f813 8006 	ldrb.w	r8, [r3, r6]
 8002a02:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <dwt_configure+0x1e4>)
 8002a04:	202b      	movs	r0, #43	; 0x2b
 8002a06:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8002a0a:	f7ff ff65 	bl	80028d8 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <dwt_configure+0x1e8>)
 8002a10:	210b      	movs	r1, #11
 8002a12:	f813 2008 	ldrb.w	r2, [r3, r8]
 8002a16:	202b      	movs	r0, #43	; 0x2b
 8002a18:	f7ff ff38 	bl	800288c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002a1c:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <dwt_configure+0x1ec>)
 8002a1e:	210b      	movs	r1, #11
 8002a20:	f813 2009 	ldrb.w	r2, [r3, r9]
 8002a24:	2028      	movs	r0, #40	; 0x28
 8002a26:	f7ff ff31 	bl	800288c <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8002a2a:	4b55      	ldr	r3, [pc, #340]	; (8002b80 <dwt_configure+0x1f0>)
 8002a2c:	210c      	movs	r1, #12
 8002a2e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8002a32:	2028      	movs	r0, #40	; 0x28
 8002a34:	f7ff ff50 	bl	80028d8 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8002a38:	79e2      	ldrb	r2, [r4, #7]
 8002a3a:	79a3      	ldrb	r3, [r4, #6]
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002a42:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <dwt_configure+0x1f4>)
 8002a44:	2027      	movs	r0, #39	; 0x27
 8002a46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a4a:	f7ff ff2b 	bl	80028a4 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8002a4e:	4b4e      	ldr	r3, [pc, #312]	; (8002b88 <dwt_configure+0x1f8>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
 8002a56:	2027      	movs	r0, #39	; 0x27
 8002a58:	f7ff ff24 	bl	80028a4 <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 8002a5c:	79e3      	ldrb	r3, [r4, #7]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d16a      	bne.n	8002b38 <dwt_configure+0x1a8>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8002a62:	2264      	movs	r2, #100	; 0x64
 8002a64:	2106      	movs	r1, #6
 8002a66:	2027      	movs	r0, #39	; 0x27
 8002a68:	f7ff ff1c 	bl	80028a4 <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8002a6c:	78e3      	ldrb	r3, [r4, #3]
 8002a6e:	4a47      	ldr	r2, [pc, #284]	; (8002b8c <dwt_configure+0x1fc>)
 8002a70:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a78:	2108      	movs	r1, #8
 8002a7a:	2027      	movs	r0, #39	; 0x27
 8002a7c:	f7ff ff2c 	bl	80028d8 <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 8002a80:	8963      	ldrh	r3, [r4, #10]
 8002a82:	b913      	cbnz	r3, 8002a8a <dwt_configure+0xfa>
        config->sfdTO = DWT_SFDTOC_DEF;
 8002a84:	f241 0341 	movw	r3, #4161	; 0x1041
 8002a88:	8163      	strh	r3, [r4, #10]
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8002a8a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002b94 <dwt_configure+0x204>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8002a8e:	8962      	ldrh	r2, [r4, #10]
 8002a90:	2120      	movs	r1, #32
 8002a92:	2027      	movs	r0, #39	; 0x27
 8002a94:	f7ff ff06 	bl	80028a4 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8002a98:	eb08 0747 	add.w	r7, r8, r7, lsl #1
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8002a9c:	f8d8 2000 	ldr.w	r2, [r8]
 8002aa0:	210c      	movs	r1, #12
 8002aa2:	2023      	movs	r0, #35	; 0x23
 8002aa4:	f7ff ff18 	bl	80028d8 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	88ba      	ldrh	r2, [r7, #4]
 8002aac:	2023      	movs	r0, #35	; 0x23
 8002aae:	f7ff fef9 	bl	80028a4 <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 8002ab2:	79a1      	ldrb	r1, [r4, #6]
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	d054      	beq.n	8002b62 <dwt_configure+0x1d2>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002ab8:	79e3      	ldrb	r3, [r4, #7]
 8002aba:	4a35      	ldr	r2, [pc, #212]	; (8002b90 <dwt_configure+0x200>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	5cd2      	ldrb	r2, [r2, r3]
 8002ac0:	2021      	movs	r0, #33	; 0x21
 8002ac2:	f7ff fee3 	bl	800288c <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 8002ac6:	2201      	movs	r2, #1
        nsSfd_result = 3 ;
 8002ac8:	2103      	movs	r1, #3
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8002aca:	7960      	ldrb	r0, [r4, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002acc:	f006 030f 	and.w	r3, r6, #15
 8002ad0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002ad4:	7860      	ldrb	r0, [r4, #1]
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8002ad6:	0136      	lsls	r6, r6, #4
 8002ad8:	b2f6      	uxtb	r6, r6
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002ada:	0480      	lsls	r0, r0, #18
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002adc:	4333      	orrs	r3, r6
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8002ade:	f400 2040 	and.w	r0, r0, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002ae2:	4303      	orrs	r3, r0
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002ae4:	7920      	ldrb	r0, [r4, #4]
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002ae6:	0509      	lsls	r1, r1, #20
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002ae8:	0580      	lsls	r0, r0, #22
 8002aea:	f000 60f8 	and.w	r0, r0, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002aee:	4303      	orrs	r3, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002af0:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002af4:	430b      	orrs	r3, r1
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8002af6:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
 8002afa:	2100      	movs	r1, #0
 8002afc:	201f      	movs	r0, #31
 8002afe:	f7ff feeb 	bl	80028d8 <dwt_write32bitoffsetreg>
    dw1000local.txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002b02:	78a2      	ldrb	r2, [r4, #2]
 8002b04:	7863      	ldrb	r3, [r4, #1]
    dwt_write32bitreg(TX_FCTRL_ID, dw1000local.txFCTRL);
 8002b06:	2100      	movs	r1, #0
    dw1000local.txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	79e2      	ldrb	r2, [r4, #7]
    dwt_write32bitreg(TX_FCTRL_ID, dw1000local.txFCTRL);
 8002b0c:	2008      	movs	r0, #8
    dw1000local.txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002b0e:	0352      	lsls	r2, r2, #13
 8002b10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002b14:	60ea      	str	r2, [r5, #12]
    dwt_write32bitreg(TX_FCTRL_ID, dw1000local.txFCTRL);
 8002b16:	f7ff fedf 	bl	80028d8 <dwt_write32bitoffsetreg>
} // end dwt_configure()
 8002b1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8002b1e:	2242      	movs	r2, #66	; 0x42
 8002b20:	2100      	movs	r1, #0
 8002b22:	200d      	movs	r0, #13
 8002b24:	f7ff beb2 	b.w	800288c <dwt_write8bitoffsetreg>
 8002b28:	f04f 0901 	mov.w	r9, #1
 8002b2c:	e743      	b.n	80029b6 <dwt_configure+0x26>
        dw1000local.sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8002b2e:	696b      	ldr	r3, [r5, #20]
 8002b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b34:	616b      	str	r3, [r5, #20]
 8002b36:	e749      	b.n	80029cc <dwt_configure+0x3c>
        if(config->txPreambLength == DWT_PLEN_64)
 8002b38:	78a3      	ldrb	r3, [r4, #2]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d10a      	bne.n	8002b54 <dwt_configure+0x1c4>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8002b3e:	2210      	movs	r2, #16
 8002b40:	2106      	movs	r1, #6
 8002b42:	2027      	movs	r0, #39	; 0x27
 8002b44:	f7ff feae 	bl	80028a4 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8002b48:	2210      	movs	r2, #16
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002b4a:	2126      	movs	r1, #38	; 0x26
 8002b4c:	2027      	movs	r0, #39	; 0x27
 8002b4e:	f7ff fe9d 	bl	800288c <dwt_write8bitoffsetreg>
 8002b52:	e78b      	b.n	8002a6c <dwt_configure+0xdc>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8002b54:	2220      	movs	r2, #32
 8002b56:	2106      	movs	r1, #6
 8002b58:	2027      	movs	r0, #39	; 0x27
 8002b5a:	f7ff fea3 	bl	80028a4 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002b5e:	2228      	movs	r2, #40	; 0x28
 8002b60:	e7f3      	b.n	8002b4a <dwt_configure+0x1ba>
    uint8 useDWnsSFD = 0;
 8002b62:	460a      	mov	r2, r1
 8002b64:	e7b1      	b.n	8002aca <dwt_configure+0x13a>
 8002b66:	bf00      	nop
 8002b68:	08003d02 	.word	0x08003d02
 8002b6c:	200001a8 	.word	0x200001a8
 8002b70:	08003cb4 	.word	0x08003cb4
 8002b74:	08003ce4 	.word	0x08003ce4
 8002b78:	08003cfc 	.word	0x08003cfc
 8002b7c:	08003d34 	.word	0x08003d34
 8002b80:	08003d44 	.word	0x08003d44
 8002b84:	08003d36 	.word	0x08003d36
 8002b88:	08003cdc 	.word	0x08003cdc
 8002b8c:	08003cbc 	.word	0x08003cbc
 8002b90:	08003ce0 	.word	0x08003ce0
 8002b94:	08003cac 	.word	0x08003cac

08002b98 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8002b98:	b513      	push	{r0, r1, r4, lr}
 8002b9a:	4604      	mov	r4, r0
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8002b9c:	ab01      	add	r3, sp, #4
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2036      	movs	r0, #54	; 0x36
 8002ba4:	f7ff fe11 	bl	80027ca <dwt_readfromdevice>
    switch(clocks)
 8002ba8:	2c0e      	cmp	r4, #14
 8002baa:	d81b      	bhi.n	8002be4 <_dwt_enableclocks+0x4c>
 8002bac:	e8df f004 	tbb	[pc, r4]
 8002bb0:	1a290812 	.word	0x1a290812
 8002bb4:	301a1a1a 	.word	0x301a1a1a
 8002bb8:	481a1a3d 	.word	0x481a1a3d
 8002bbc:	524d      	.short	0x524d
 8002bbe:	59          	.byte	0x59
 8002bbf:	00          	.byte	0x00
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
 8002bc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002bca:	f023 0301 	bic.w	r3, r3, #1
        }
        break;
        case FORCE_LDE:
        {
            reg[0] = 0x01;
            reg[1] = 0x03;
 8002bce:	f88d 3005 	strb.w	r3, [sp, #5]
        }
        break;
 8002bd2:	e007      	b.n	8002be4 <_dwt_enableclocks+0x4c>
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002bd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bd8:	f023 0303 	bic.w	r3, r3, #3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002be0:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8002be4:	ab01      	add	r3, sp, #4
 8002be6:	2201      	movs	r2, #1
 8002be8:	2100      	movs	r1, #0
 8002bea:	2036      	movs	r0, #54	; 0x36
 8002bec:	f7ff fdbd 	bl	800276a <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f10d 0305 	add.w	r3, sp, #5
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	2036      	movs	r0, #54	; 0x36
 8002bfa:	f7ff fdb6 	bl	800276a <dwt_writetodevice>

} // end _dwt_enableclocks()
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd10      	pop	{r4, pc}
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002c02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	e7e7      	b.n	8002be0 <_dwt_enableclocks+0x48>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002c10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c14:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002c18:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8002c1c:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
 8002c20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c28:	e7d1      	b.n	8002bce <_dwt_enableclocks+0x36>
            reg[0] = reg[0] & 0xb3;
 8002c2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c2e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8002c32:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
 8002c36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c3e:	e7c6      	b.n	8002bce <_dwt_enableclocks+0x36>
            reg[1] = 0x02 | reg[1];
 8002c40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	e7c1      	b.n	8002bce <_dwt_enableclocks+0x36>
            reg[1] = reg[1] & 0xfd;
 8002c4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c4e:	f023 0302 	bic.w	r3, r3, #2
 8002c52:	e7bc      	b.n	8002bce <_dwt_enableclocks+0x36>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002c54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	e7be      	b.n	8002be0 <_dwt_enableclocks+0x48>
            reg[0] = 0x01;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x03;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e7b0      	b.n	8002bce <_dwt_enableclocks+0x36>

08002c6c <_dwt_loaducodefromrom>:
{
 8002c6c:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
 8002c6e:	200e      	movs	r0, #14
 8002c70:	f7ff ff92 	bl	8002b98 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8002c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c78:	2106      	movs	r1, #6
 8002c7a:	202d      	movs	r0, #45	; 0x2d
 8002c7c:	f7ff fe12 	bl	80028a4 <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8002c80:	2001      	movs	r0, #1
 8002c82:	f000 fb99 	bl	80033b8 <deca_sleep>
}
 8002c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f7ff bf84 	b.w	8002b98 <_dwt_enableclocks>

08002c90 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8002c90:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7ff ff80 	bl	8002b98 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
}
 8002c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	2036      	movs	r0, #54	; 0x36
 8002ca2:	f7ff bdff 	b.w	80028a4 <dwt_write16bitoffsetreg>

08002ca6 <dwt_setdelayedtrxtime>:
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	2101      	movs	r1, #1
 8002caa:	200a      	movs	r0, #10
 8002cac:	f7ff be14 	b.w	80028d8 <dwt_write32bitoffsetreg>

08002cb0 <dwt_starttx>:
{
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 8002cb0:	f010 0202 	ands.w	r2, r0, #2
{
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	4604      	mov	r4, r0
    if(mode & DWT_RESPONSE_EXPECTED)
 8002cb8:	d008      	beq.n	8002ccc <dwt_starttx+0x1c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	200d      	movs	r0, #13
 8002cc0:	f7ff fde4 	bl	800288c <dwt_write8bitoffsetreg>
        dw1000local.wait4resp = 1;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <dwt_starttx+0x64>)
 8002cc8:	769a      	strb	r2, [r3, #26]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8002cca:	2280      	movs	r2, #128	; 0x80
    }

    if (mode & DWT_START_TX_DELAYED)
 8002ccc:	f014 0401 	ands.w	r4, r4, #1
 8002cd0:	d017      	beq.n	8002d02 <dwt_starttx+0x52>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002cd2:	f042 0206 	orr.w	r2, r2, #6
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	200d      	movs	r0, #13
 8002cda:	f7ff fdd7 	bl	800288c <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8002cde:	2103      	movs	r1, #3
 8002ce0:	200f      	movs	r0, #15
 8002ce2:	f7ff fdb5 	bl	8002850 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8002ce6:	f410 6081 	ands.w	r0, r0, #1032	; 0x408
 8002cea:	d011      	beq.n	8002d10 <dwt_starttx+0x60>
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	2100      	movs	r1, #0
 8002cf0:	200d      	movs	r0, #13
 8002cf2:	f7ff fdcb 	bl	800288c <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            dw1000local.wait4resp = 0;
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <dwt_starttx+0x64>)
            retval = DWT_ERROR ; // Failed !
 8002cfa:	f04f 30ff 	mov.w	r0, #4294967295
            dw1000local.wait4resp = 0;
 8002cfe:	769a      	strb	r2, [r3, #26]
 8002d00:	bd10      	pop	{r4, pc}
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002d02:	200d      	movs	r0, #13
 8002d04:	f042 0202 	orr.w	r2, r2, #2
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7ff fdbf 	bl	800288c <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
 8002d0e:	4620      	mov	r0, r4
    }

    return retval;

} // end dwt_starttx()
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
 8002d14:	200001a8 	.word	0x200001a8

08002d18 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8002d18:	b508      	push	{r3, lr}
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	200f      	movs	r0, #15
 8002d1e:	f7ff fda8 	bl	8002872 <dwt_read8bitoffsetreg>

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002d22:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
 8002d26:	0603      	lsls	r3, r0, #24
 8002d28:	d506      	bpl.n	8002d38 <dwt_syncrxbufptrs+0x20>
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 8002d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2103      	movs	r1, #3
 8002d32:	200d      	movs	r0, #13
 8002d34:	f7ff bdaa 	b.w	800288c <dwt_write8bitoffsetreg>
 8002d38:	bd08      	pop	{r3, pc}
	...

08002d3c <dwt_forcetrxoff>:
{
 8002d3c:	b538      	push	{r3, r4, r5, lr}
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8002d3e:	2100      	movs	r1, #0
 8002d40:	200e      	movs	r0, #14
 8002d42:	f7ff fd6f 	bl	8002824 <dwt_read32bitoffsetreg>
 8002d46:	4605      	mov	r5, r0
    stat = decamutexon() ;
 8002d48:	f000 fb29 	bl	800339e <decamutexon>
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8002d4c:	2200      	movs	r2, #0
    stat = decamutexon() ;
 8002d4e:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8002d50:	4611      	mov	r1, r2
 8002d52:	200e      	movs	r0, #14
 8002d54:	f7ff fdc0 	bl	80028d8 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8002d58:	2240      	movs	r2, #64	; 0x40
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	200d      	movs	r0, #13
 8002d5e:	f7ff fd95 	bl	800288c <dwt_write8bitoffsetreg>
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <dwt_forcetrxoff+0x4c>)
 8002d64:	2100      	movs	r1, #0
 8002d66:	200f      	movs	r0, #15
 8002d68:	f7ff fdb6 	bl	80028d8 <dwt_write32bitoffsetreg>
    dwt_syncrxbufptrs();
 8002d6c:	f7ff ffd4 	bl	8002d18 <dwt_syncrxbufptrs>
    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8002d70:	462a      	mov	r2, r5
 8002d72:	2100      	movs	r1, #0
 8002d74:	200e      	movs	r0, #14
 8002d76:	f7ff fdaf 	bl	80028d8 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 fb18 	bl	80033b0 <decamutexoff>
    dw1000local.wait4resp = 0;
 8002d80:	2200      	movs	r2, #0
 8002d82:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <dwt_forcetrxoff+0x50>)
 8002d84:	769a      	strb	r2, [r3, #26]
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
 8002d88:	2427fff8 	.word	0x2427fff8
 8002d8c:	200001a8 	.word	0x200001a8

08002d90 <dwt_rxenable>:
int dwt_rxenable(int mode)
{
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002d90:	0741      	lsls	r1, r0, #29
{
 8002d92:	b538      	push	{r3, r4, r5, lr}
 8002d94:	4604      	mov	r4, r0
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8002d96:	d401      	bmi.n	8002d9c <dwt_rxenable+0xc>
    {
        dwt_syncrxbufptrs();
 8002d98:	f7ff ffbe 	bl	8002d18 <dwt_syncrxbufptrs>

    temp = (uint16)SYS_CTRL_RXENAB ;

    if (mode & DWT_START_RX_DELAYED)
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8002d9c:	f014 0501 	ands.w	r5, r4, #1
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002da0:	bf0c      	ite	eq
 8002da2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002da6:	f44f 7240 	movne.w	r2, #768	; 0x300
 8002daa:	2100      	movs	r1, #0
 8002dac:	200d      	movs	r0, #13
 8002dae:	f7ff fd79 	bl	80028a4 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8002db2:	b90d      	cbnz	r5, 8002db8 <dwt_rxenable+0x28>
            }
            return DWT_ERROR; // return warning indication
        }
    }

    return DWT_SUCCESS;
 8002db4:	2000      	movs	r0, #0
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8002db8:	2103      	movs	r1, #3
 8002dba:	200f      	movs	r0, #15
 8002dbc:	f7ff fd59 	bl	8002872 <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8002dc0:	0703      	lsls	r3, r0, #28
 8002dc2:	d5f7      	bpl.n	8002db4 <dwt_rxenable+0x24>
            dwt_forcetrxoff(); // turn the delayed receive off
 8002dc4:	f7ff ffba 	bl	8002d3c <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8002dc8:	f014 0102 	ands.w	r1, r4, #2
 8002dcc:	d104      	bne.n	8002dd8 <dwt_rxenable+0x48>
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8002dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd2:	200d      	movs	r0, #13
 8002dd4:	f7ff fd66 	bl	80028a4 <dwt_write16bitoffsetreg>
            return DWT_ERROR; // return warning indication
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
} // end dwt_rxenable()
 8002ddc:	bd38      	pop	{r3, r4, r5, pc}

08002dde <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8002dde:	b508      	push	{r3, lr}
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8002de0:	22e0      	movs	r2, #224	; 0xe0
 8002de2:	2103      	movs	r1, #3
 8002de4:	2036      	movs	r0, #54	; 0x36
 8002de6:	f7ff fd51 	bl	800288c <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
}
 8002dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002dee:	22f0      	movs	r2, #240	; 0xf0
 8002df0:	2103      	movs	r1, #3
 8002df2:	2036      	movs	r0, #54	; 0x36
 8002df4:	f7ff bd4a 	b.w	800288c <dwt_write8bitoffsetreg>

08002df8 <dwt_isr>:
{
 8002df8:	b570      	push	{r4, r5, r6, lr}
    uint32 status = dw1000local.cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	200f      	movs	r0, #15
 8002dfe:	f7ff fd11 	bl	8002824 <dwt_read32bitoffsetreg>
 8002e02:	4c40      	ldr	r4, [pc, #256]	; (8002f04 <dwt_isr+0x10c>)
    if(status & SYS_STATUS_RXFCG)
 8002e04:	0446      	lsls	r6, r0, #17
    uint32 status = dw1000local.cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 8002e06:	4605      	mov	r5, r0
 8002e08:	61e0      	str	r0, [r4, #28]
    if(status & SYS_STATUS_RXFCG)
 8002e0a:	d53d      	bpl.n	8002e88 <dwt_isr+0x90>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 8002e0c:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 8002e10:	2100      	movs	r1, #0
 8002e12:	200f      	movs	r0, #15
 8002e14:	f7ff fd60 	bl	80028d8 <dwt_write32bitoffsetreg>
        dw1000local.cbData.rx_flags = 0;
 8002e18:	2100      	movs	r1, #0
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 8002e1a:	2010      	movs	r0, #16
        dw1000local.cbData.rx_flags = 0;
 8002e1c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 8002e20:	f7ff fd16 	bl	8002850 <dwt_read16bitoffsetreg>
        if(dw1000local.longFrames == 0)
 8002e24:	7a23      	ldrb	r3, [r4, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d067      	beq.n	8002efa <dwt_isr+0x102>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8002e2a:	f3c0 0309 	ubfx	r3, r0, #0, #10
        if(finfo16 & RX_FINFO_RNG)
 8002e2e:	0400      	lsls	r0, r0, #16
        dw1000local.cbData.datalength = len;
 8002e30:	8423      	strh	r3, [r4, #32]
            dw1000local.cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8002e32:	bf48      	it	mi
 8002e34:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, dw1000local.cbData.fctrl);
 8002e38:	f04f 0100 	mov.w	r1, #0
            dw1000local.cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8002e3c:	bf44      	itt	mi
 8002e3e:	f043 0301 	orrmi.w	r3, r3, #1
 8002e42:	f884 3024 	strbmi.w	r3, [r4, #36]	; 0x24
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, dw1000local.cbData.fctrl);
 8002e46:	2202      	movs	r2, #2
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <dwt_isr+0x110>)
 8002e4a:	2011      	movs	r0, #17
 8002e4c:	f7ff fcbd 	bl	80027ca <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((dw1000local.cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 8002e50:	0729      	lsls	r1, r5, #28
 8002e52:	d50e      	bpl.n	8002e72 <dwt_isr+0x7a>
 8002e54:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
 8002e58:	f016 0620 	ands.w	r6, r6, #32
 8002e5c:	d109      	bne.n	8002e72 <dwt_isr+0x7a>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 8002e5e:	2208      	movs	r2, #8
 8002e60:	4631      	mov	r1, r6
 8002e62:	200f      	movs	r0, #15
 8002e64:	f7ff fd38 	bl	80028d8 <dwt_write32bitoffsetreg>
            dw1000local.cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8002e68:	69e3      	ldr	r3, [r4, #28]
            dw1000local.wait4resp = 0;
 8002e6a:	76a6      	strb	r6, [r4, #26]
            dw1000local.cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8002e6c:	f023 0308 	bic.w	r3, r3, #8
 8002e70:	61e3      	str	r3, [r4, #28]
        if(dw1000local.cbRxOk != NULL)
 8002e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e74:	b10b      	cbz	r3, 8002e7a <dwt_isr+0x82>
            dw1000local.cbRxOk(&dw1000local.cbData);
 8002e76:	4825      	ldr	r0, [pc, #148]	; (8002f0c <dwt_isr+0x114>)
 8002e78:	4798      	blx	r3
        if (dw1000local.dblbuffon)
 8002e7a:	7c63      	ldrb	r3, [r4, #17]
 8002e7c:	b123      	cbz	r3, 8002e88 <dwt_isr+0x90>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2103      	movs	r1, #3
 8002e82:	200d      	movs	r0, #13
 8002e84:	f7ff fd02 	bl	800288c <dwt_write8bitoffsetreg>
    if(status & SYS_STATUS_TXFRS)
 8002e88:	062a      	lsls	r2, r5, #24
 8002e8a:	d510      	bpl.n	8002eae <dwt_isr+0xb6>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 8002e8c:	22f8      	movs	r2, #248	; 0xf8
 8002e8e:	2100      	movs	r1, #0
 8002e90:	200f      	movs	r0, #15
 8002e92:	f7ff fd21 	bl	80028d8 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && dw1000local.wait4resp)
 8002e96:	072b      	lsls	r3, r5, #28
 8002e98:	d505      	bpl.n	8002ea6 <dwt_isr+0xae>
 8002e9a:	7ea3      	ldrb	r3, [r4, #26]
 8002e9c:	b11b      	cbz	r3, 8002ea6 <dwt_isr+0xae>
            dwt_forcetrxoff(); // Turn the RX off
 8002e9e:	f7ff ff4d 	bl	8002d3c <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 8002ea2:	f7ff ff9c 	bl	8002dde <dwt_rxreset>
        if(dw1000local.cbTxDone != NULL)
 8002ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ea8:	b10b      	cbz	r3, 8002eae <dwt_isr+0xb6>
            dw1000local.cbTxDone(&dw1000local.cbData);
 8002eaa:	4818      	ldr	r0, [pc, #96]	; (8002f0c <dwt_isr+0x114>)
 8002eac:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_TO)
 8002eae:	f415 1f08 	tst.w	r5, #2228224	; 0x220000
 8002eb2:	d00f      	beq.n	8002ed4 <dwt_isr+0xdc>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 8002eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb8:	2100      	movs	r1, #0
 8002eba:	200f      	movs	r0, #15
 8002ebc:	f7ff fd0c 	bl	80028d8 <dwt_write32bitoffsetreg>
        dw1000local.wait4resp = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	76a3      	strb	r3, [r4, #26]
        dwt_forcetrxoff();
 8002ec4:	f7ff ff3a 	bl	8002d3c <dwt_forcetrxoff>
        dwt_rxreset();
 8002ec8:	f7ff ff89 	bl	8002dde <dwt_rxreset>
        if(dw1000local.cbRxTo != NULL)
 8002ecc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ece:	b10b      	cbz	r3, 8002ed4 <dwt_isr+0xdc>
            dw1000local.cbRxTo(&dw1000local.cbData);
 8002ed0:	480e      	ldr	r0, [pc, #56]	; (8002f0c <dwt_isr+0x114>)
 8002ed2:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_ERR)
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <dwt_isr+0x118>)
 8002ed6:	4215      	tst	r5, r2
 8002ed8:	d012      	beq.n	8002f00 <dwt_isr+0x108>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 8002eda:	2100      	movs	r1, #0
 8002edc:	200f      	movs	r0, #15
 8002ede:	f7ff fcfb 	bl	80028d8 <dwt_write32bitoffsetreg>
        dw1000local.wait4resp = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	76a3      	strb	r3, [r4, #26]
        dwt_forcetrxoff();
 8002ee6:	f7ff ff29 	bl	8002d3c <dwt_forcetrxoff>
        dwt_rxreset();
 8002eea:	f7ff ff78 	bl	8002dde <dwt_rxreset>
        if(dw1000local.cbRxErr != NULL)
 8002eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ef0:	b133      	cbz	r3, 8002f00 <dwt_isr+0x108>
}
 8002ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            dw1000local.cbRxErr(&dw1000local.cbData);
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <dwt_isr+0x114>)
 8002ef8:	4718      	bx	r3
            len &= RX_FINFO_RXFLEN_MASK;
 8002efa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8002efe:	e796      	b.n	8002e2e <dwt_isr+0x36>
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
 8002f02:	bf00      	nop
 8002f04:	200001a8 	.word	0x200001a8
 8002f08:	200001ca 	.word	0x200001ca
 8002f0c:	200001c4 	.word	0x200001c4
 8002f10:	24059000 	.word	0x24059000

08002f14 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8002f14:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
 8002f16:	f7ff febb 	bl	8002c90 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	202c      	movs	r0, #44	; 0x2c
 8002f1e:	4611      	mov	r1, r2
 8002f20:	f7ff fcc0 	bl	80028a4 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2106      	movs	r1, #6
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	f7ff fcaf 	bl	800288c <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002f2e:	f7ff fd0d 	bl	800294c <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2103      	movs	r1, #3
 8002f36:	2036      	movs	r0, #54	; 0x36
 8002f38:	f7ff fca8 	bl	800288c <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f000 fa3b 	bl	80033b8 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002f42:	22f0      	movs	r2, #240	; 0xf0
 8002f44:	2103      	movs	r1, #3
 8002f46:	2036      	movs	r0, #54	; 0x36
 8002f48:	f7ff fca0 	bl	800288c <dwt_write8bitoffsetreg>

    dw1000local.wait4resp = 0;
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <dwt_softreset+0x40>)
 8002f50:	769a      	strb	r2, [r3, #26]
 8002f52:	bd08      	pop	{r3, pc}
 8002f54:	200001a8 	.word	0x200001a8

08002f58 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8002f58:	f000 021f 	and.w	r2, r0, #31
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8002f5c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002f60:	210e      	movs	r1, #14
 8002f62:	202b      	movs	r0, #43	; 0x2b
 8002f64:	f7ff bc92 	b.w	800288c <dwt_write8bitoffsetreg>

08002f68 <dwt_initialise>:
{
 8002f68:	b570      	push	{r4, r5, r6, lr}
    dw1000local.dblbuffon = 0; // Double buffer mode off by default
 8002f6a:	2500      	movs	r5, #0
 8002f6c:	4c32      	ldr	r4, [pc, #200]	; (8003038 <dwt_initialise+0xd0>)
{
 8002f6e:	4606      	mov	r6, r0
    dw1000local.dblbuffon = 0; // Double buffer mode off by default
 8002f70:	7465      	strb	r5, [r4, #17]
    dw1000local.wait4resp = 0;
 8002f72:	76a5      	strb	r5, [r4, #26]
    dw1000local.sleep_mode = 0;
 8002f74:	8325      	strh	r5, [r4, #24]
    dw1000local.cbTxDone = NULL;
 8002f76:	62a5      	str	r5, [r4, #40]	; 0x28
    dw1000local.cbRxOk = NULL;
 8002f78:	62e5      	str	r5, [r4, #44]	; 0x2c
    dw1000local.cbRxTo = NULL;
 8002f7a:	6325      	str	r5, [r4, #48]	; 0x30
    dw1000local.cbRxErr = NULL;
 8002f7c:	6365      	str	r5, [r4, #52]	; 0x34
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002f7e:	f7ff fc63 	bl	8002848 <dwt_readdevid>
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <dwt_initialise+0xd4>)
 8002f84:	4298      	cmp	r0, r3
 8002f86:	d153      	bne.n	8003030 <dwt_initialise+0xc8>
    dwt_softreset();
 8002f88:	f7ff ffc4 	bl	8002f14 <dwt_softreset>
    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f7ff fe03 	bl	8002b98 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8002f92:	4629      	mov	r1, r5
 8002f94:	2204      	movs	r2, #4
 8002f96:	2024      	movs	r0, #36	; 0x24
 8002f98:	f7ff fc78 	bl	800288c <dwt_write8bitoffsetreg>
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8002f9c:	201e      	movs	r0, #30
 8002f9e:	f7ff fcbf 	bl	8002920 <_dwt_otpread>
    dw1000local.otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
 8002fa2:	f3c0 2307 	ubfx	r3, r0, #8, #8
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8002fa6:	4605      	mov	r5, r0
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002fa8:	2004      	movs	r0, #4
    dw1000local.otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
 8002faa:	7263      	strb	r3, [r4, #9]
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002fac:	f7ff fcb8 	bl	8002920 <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
 8002fb0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002fb4:	d008      	beq.n	8002fc8 <dwt_initialise+0x60>
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	2112      	movs	r1, #18
 8002fba:	202d      	movs	r0, #45	; 0x2d
 8002fbc:	f7ff fc66 	bl	800288c <dwt_write8bitoffsetreg>
        dw1000local.sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8002fc0:	8b23      	ldrh	r3, [r4, #24]
 8002fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc6:	8323      	strh	r3, [r4, #24]
    dw1000local.partID = _dwt_otpread(PARTID_ADDRESS);
 8002fc8:	2006      	movs	r0, #6
 8002fca:	f7ff fca9 	bl	8002920 <_dwt_otpread>
 8002fce:	6020      	str	r0, [r4, #0]
    dw1000local.lotID = _dwt_otpread(LOTID_ADDRESS);
 8002fd0:	2007      	movs	r0, #7
 8002fd2:	f7ff fca5 	bl	8002920 <_dwt_otpread>
    if (!dw1000local.init_xtrim) // A value of 0 means that the crystal has not been trimmed
 8002fd6:	f015 051f 	ands.w	r5, r5, #31
        dw1000local.init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8002fda:	bf0a      	itet	eq
 8002fdc:	2310      	moveq	r3, #16
    dw1000local.init_xtrim = otp_addr & 0x1F;
 8002fde:	7425      	strbne	r5, [r4, #16]
        dw1000local.init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8002fe0:	7423      	strbeq	r3, [r4, #16]
    dw1000local.lotID = _dwt_otpread(LOTID_ADDRESS);
 8002fe2:	6060      	str	r0, [r4, #4]
    dwt_setxtaltrim(dw1000local.init_xtrim);
 8002fe4:	7c20      	ldrb	r0, [r4, #16]
 8002fe6:	f7ff ffb7 	bl	8002f58 <dwt_setxtaltrim>
    if(config & DWT_LOADUCODE)
 8002fea:	07f3      	lsls	r3, r6, #31
 8002fec:	d514      	bpl.n	8003018 <dwt_initialise+0xb0>
        _dwt_loaducodefromrom();
 8002fee:	f7ff fe3d 	bl	8002c6c <_dwt_loaducodefromrom>
        dw1000local.sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
 8002ff2:	8b23      	ldrh	r3, [r4, #24]
 8002ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ff8:	8323      	strh	r3, [r4, #24]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7ff fdcc 	bl	8002b98 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8003000:	2200      	movs	r2, #0
 8003002:	210a      	movs	r1, #10
 8003004:	202c      	movs	r0, #44	; 0x2c
 8003006:	f7ff fc41 	bl	800288c <dwt_write8bitoffsetreg>
    dw1000local.sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800300a:	2100      	movs	r1, #0
 800300c:	2004      	movs	r0, #4
 800300e:	f7ff fc09 	bl	8002824 <dwt_read32bitoffsetreg>
 8003012:	6160      	str	r0, [r4, #20]
    return DWT_SUCCESS ;
 8003014:	2000      	movs	r0, #0
 8003016:	bd70      	pop	{r4, r5, r6, pc}
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8003018:	2105      	movs	r1, #5
 800301a:	2036      	movs	r0, #54	; 0x36
 800301c:	f7ff fc18 	bl	8002850 <dwt_read16bitoffsetreg>
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8003020:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8003024:	2105      	movs	r1, #5
 8003026:	4002      	ands	r2, r0
 8003028:	2036      	movs	r0, #54	; 0x36
 800302a:	f7ff fc3b 	bl	80028a4 <dwt_write16bitoffsetreg>
 800302e:	e7e4      	b.n	8002ffa <dwt_initialise+0x92>
        return DWT_ERROR ;
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
} // end dwt_initialise()
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	bf00      	nop
 8003038:	200001a8 	.word	0x200001a8
 800303c:	deca0130 	.word	0xdeca0130

08003040 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8003044:	b510      	push	{r4, lr}
 8003046:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003048:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800304a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800304c:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800304e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003050:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003052:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003056:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003058:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800305a:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800305c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800305e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003060:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003062:	f7fd fe21 	bl	8000ca8 <HAL_RCC_OscConfig>
 8003066:	b100      	cbz	r0, 800306a <SystemClock_Config+0x2a>
 8003068:	e7fe      	b.n	8003068 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800306a:	230f      	movs	r3, #15
 800306c:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800306e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003072:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003074:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003076:	4621      	mov	r1, r4
 8003078:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800307a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800307c:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800307e:	f7fd ffdd 	bl	800103c <HAL_RCC_ClockConfig>
 8003082:	b100      	cbz	r0, 8003086 <SystemClock_Config+0x46>
 8003084:	e7fe      	b.n	8003084 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003086:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003088:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800308c:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308e:	f7fe f87f 	bl	8001190 <HAL_RCCEx_PeriphCLKConfig>
 8003092:	4604      	mov	r4, r0
 8003094:	b100      	cbz	r0, 8003098 <SystemClock_Config+0x58>
 8003096:	e7fe      	b.n	8003096 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003098:	f7fe f874 	bl	8001184 <HAL_RCC_GetHCLKFreq>
 800309c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80030a4:	f7fd f8f6 	bl	8000294 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80030a8:	2004      	movs	r0, #4
 80030aa:	f7fd f909 	bl	80002c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0);
 80030ae:	4622      	mov	r2, r4
 80030b0:	2105      	movs	r1, #5
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295
 80030b6:	f7fd f89f 	bl	80001f8 <HAL_NVIC_SetPriority>
}
 80030ba:	b014      	add	sp, #80	; 0x50
 80030bc:	bd10      	pop	{r4, pc}
	...

080030c0 <main>:
{
 80030c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030c4:	b088      	sub	sp, #32
  HAL_Init();
 80030c6:	f7fd f855 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 80030ca:	f7ff ffb9 	bl	8003040 <SystemClock_Config>
{

	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	4ba2      	ldr	r3, [pc, #648]	; (8003358 <main+0x298>)
	  __HAL_RCC_GPIOD_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80030d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d4:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80030d6:	48a1      	ldr	r0, [pc, #644]	; (800335c <main+0x29c>)
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d8:	f042 0210 	orr.w	r2, r2, #16
 80030dc:	619a      	str	r2, [r3, #24]
 80030de:	699a      	ldr	r2, [r3, #24]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

	  /*Configure GPIO pin : PC13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e0:	2501      	movs	r5, #1
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	f002 0210 	and.w	r2, r2, #16
 80030e6:	9200      	str	r2, [sp, #0]
 80030e8:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ea:	699a      	ldr	r2, [r3, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	f04f 0902 	mov.w	r9, #2
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030f0:	f042 0220 	orr.w	r2, r2, #32
 80030f4:	619a      	str	r2, [r3, #24]
 80030f6:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	  /*Configure GPIO pin : PA0 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2400      	movs	r4, #0
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fa:	f002 0220 	and.w	r2, r2, #32
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003104:	f10d 0810 	add.w	r8, sp, #16
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	f042 0204 	orr.w	r2, r2, #4
 800310c:	619a      	str	r2, [r3, #24]
 800310e:	699a      	ldr	r2, [r3, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003110:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8003390 <main+0x2d0>
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003114:	f002 0204 	and.w	r2, r2, #4
 8003118:	9202      	str	r2, [sp, #8]
 800311a:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	619a      	str	r2, [r3, #24]
 8003124:	699b      	ldr	r3, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	9b03      	ldr	r3, [sp, #12]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003130:	f7fd f9be 	bl	80004b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003134:	2200      	movs	r2, #0
 8003136:	2110      	movs	r1, #16
 8003138:	4889      	ldr	r0, [pc, #548]	; (8003360 <main+0x2a0>)
 800313a:	f7fd f9b9 	bl	80004b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800313e:	2200      	movs	r2, #0
 8003140:	2101      	movs	r1, #1
 8003142:	4888      	ldr	r0, [pc, #544]	; (8003364 <main+0x2a4>)
 8003144:	f7fd f9b4 	bl	80004b0 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314c:	4641      	mov	r1, r8
 800314e:	4883      	ldr	r0, [pc, #524]	; (800335c <main+0x29c>)
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003150:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	f8cd 901c 	str.w	r9, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003156:	9505      	str	r5, [sp, #20]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003158:	f7fd f8c4 	bl	80002e4 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	4641      	mov	r1, r8
 800315e:	4880      	ldr	r0, [pc, #512]	; (8003360 <main+0x2a0>)
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003162:	9504      	str	r5, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003164:	f8cd a014 	str.w	sl, [sp, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003168:	f7fd f8bc 	bl	80002e4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800316c:	2310      	movs	r3, #16
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	4641      	mov	r1, r8
 8003170:	487b      	ldr	r0, [pc, #492]	; (8003360 <main+0x2a0>)
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003172:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	f8cd 901c 	str.w	r9, [sp, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	9505      	str	r5, [sp, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f7fd f8b3 	bl	80002e4 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB0 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	f8cd 901c 	str.w	r9, [sp, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	  /*Configure GPIO pin : PB5 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003182:	f04f 0920 	mov.w	r9, #32
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	4641      	mov	r1, r8
 8003188:	4876      	ldr	r0, [pc, #472]	; (8003364 <main+0x2a4>)
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800318a:	9504      	str	r5, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318c:	9505      	str	r5, [sp, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	f7fd f8a9 	bl	80002e4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	4641      	mov	r1, r8
 8003194:	4873      	ldr	r0, [pc, #460]	; (8003364 <main+0x2a4>)
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003198:	f8cd 9010 	str.w	r9, [sp, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800319c:	f8cd a014 	str.w	sl, [sp, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	f7fd f8a0 	bl	80002e4 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80031a4:	4622      	mov	r2, r4
 80031a6:	2103      	movs	r1, #3
 80031a8:	2006      	movs	r0, #6
 80031aa:	f7fd f825 	bl	80001f8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031ae:	2006      	movs	r0, #6
 80031b0:	f7fd f856 	bl	8000260 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80031b4:	4622      	mov	r2, r4
 80031b6:	2103      	movs	r1, #3
 80031b8:	2017      	movs	r0, #23
 80031ba:	f7fd f81d 	bl	80001f8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031be:	2017      	movs	r0, #23
 80031c0:	f7fd f84e 	bl	8000260 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031c4:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80031c8:	4867      	ldr	r0, [pc, #412]	; (8003368 <main+0x2a8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031ca:	4a68      	ldr	r2, [pc, #416]	; (800336c <main+0x2ac>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031cc:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031ce:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d6:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80031d8:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031da:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031dc:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031de:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031e0:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031e2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80031e6:	f8c0 901c 	str.w	r9, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 80031ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031ec:	f7fe fa48 	bl	8001680 <HAL_SPI_Init>
 80031f0:	4604      	mov	r4, r0
 80031f2:	b100      	cbz	r0, 80031f6 <main+0x136>
 80031f4:	e7fe      	b.n	80031f4 <main+0x134>
  MX_USB_DEVICE_Init();
 80031f6:	f000 fb1f 	bl	8003838 <MX_USB_DEVICE_Init>
  setup_DW1000RSTnIRQ(0);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f9d0 	bl	80035a0 <setup_DW1000RSTnIRQ>
  peripherals_init();
 8003200:	f000 f988 	bl	8003514 <peripherals_init>
  reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8003204:	f000 f9aa 	bl	800355c <reset_DW1000>
  port_set_dw1000_slowrate();
 8003208:	f000 fa04 	bl	8003614 <port_set_dw1000_slowrate>
  if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 800320c:	4628      	mov	r0, r5
 800320e:	f7ff feab 	bl	8002f68 <dwt_initialise>
 8003212:	3001      	adds	r0, #1
 8003214:	d100      	bne.n	8003218 <main+0x158>
 8003216:	e7fe      	b.n	8003216 <main+0x156>
  port_set_dw1000_fastrate();
 8003218:	f000 fa08 	bl	800362c <port_set_dw1000_fastrate>
  dwt_configure(&config);
 800321c:	4854      	ldr	r0, [pc, #336]	; (8003370 <main+0x2b0>)
 800321e:	f7ff fbb7 	bl	8002990 <dwt_configure>
  dwt_setrxantennadelay(RX_ANT_DLY);
 8003222:	f244 0034 	movw	r0, #16436	; 0x4034
 8003226:	f7ff fb4c 	bl	80028c2 <dwt_setrxantennadelay>
  dwt_settxantennadelay(TX_ANT_DLY);
 800322a:	f244 0034 	movw	r0, #16436	; 0x4034
 800322e:	f7ff fb4e 	bl	80028ce <dwt_settxantennadelay>
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003232:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8003394 <main+0x2d4>
      dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8003236:	2000      	movs	r0, #0
 8003238:	f7ff fdaa 	bl	8002d90 <dwt_rxenable>
      while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 800323c:	4c4d      	ldr	r4, [pc, #308]	; (8003374 <main+0x2b4>)
 800323e:	2100      	movs	r1, #0
 8003240:	200f      	movs	r0, #15
 8003242:	f7ff faef 	bl	8002824 <dwt_read32bitoffsetreg>
 8003246:	4220      	tst	r0, r4
 8003248:	d0f9      	beq.n	800323e <main+0x17e>
      if (status_reg & SYS_STATUS_RXFCG)
 800324a:	f410 4180 	ands.w	r1, r0, #16384	; 0x4000
 800324e:	d07c      	beq.n	800334a <main+0x28a>
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8003250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003254:	2100      	movs	r1, #0
 8003256:	200f      	movs	r0, #15
 8003258:	f7ff fb3e 	bl	80028d8 <dwt_write32bitoffsetreg>
          frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 800325c:	2100      	movs	r1, #0
 800325e:	2010      	movs	r0, #16
 8003260:	f7ff fae0 	bl	8002824 <dwt_read32bitoffsetreg>
              dwt_readrxdata(rx_buffer, frame_len, 0);
 8003264:	4c44      	ldr	r4, [pc, #272]	; (8003378 <main+0x2b8>)
 8003266:	f3c0 0109 	ubfx	r1, r0, #0, #10
 800326a:	2200      	movs	r2, #0
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff faca 	bl	8002806 <dwt_readrxdata>
           rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003272:	2300      	movs	r3, #0
           if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8003274:	220a      	movs	r2, #10
 8003276:	4941      	ldr	r1, [pc, #260]	; (800337c <main+0x2bc>)
 8003278:	4620      	mov	r0, r4
           rx_buffer[ALL_MSG_SN_IDX] = 0;
 800327a:	70a3      	strb	r3, [r4, #2]
           if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 800327c:	f000 fce8 	bl	8003c50 <memcmp>
 8003280:	2800      	cmp	r0, #0
 8003282:	d1d8      	bne.n	8003236 <main+0x176>
   dwt_readrxtimestamp(ts_tab);
 8003284:	4640      	mov	r0, r8
 8003286:	f7ff fac7 	bl	8002818 <dwt_readrxtimestamp>
   uint64 ts = 0;
 800328a:	2400      	movs	r4, #0
   for (i = 4; i >= 0; i--)
 800328c:	2304      	movs	r3, #4
   uint64 ts = 0;
 800328e:	2500      	movs	r5, #0
       ts <<= 8;
 8003290:	022f      	lsls	r7, r5, #8
       ts |= ts_tab[i];
 8003292:	2500      	movs	r5, #0
       ts <<= 8;
 8003294:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
 8003298:	0226      	lsls	r6, r4, #8
       ts |= ts_tab[i];
 800329a:	f818 4003 	ldrb.w	r4, [r8, r3]
   for (i = 4; i >= 0; i--)
 800329e:	f113 33ff 	adds.w	r3, r3, #4294967295
       ts |= ts_tab[i];
 80032a2:	ea44 0406 	orr.w	r4, r4, r6
 80032a6:	ea45 0507 	orr.w	r5, r5, r7
   for (i = 4; i >= 0; i--)
 80032aa:	d2f1      	bcs.n	8003290 <main+0x1d0>
               poll_rx_ts = get_rx_timestamp_u64();
 80032ac:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8003398 <main+0x2d8>
 80032b0:	e9ca 4500 	strd	r4, r5, [sl]
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80032b4:	f114 74a5 	adds.w	r4, r4, #21626880	; 0x14a0000
 80032b8:	f145 0500 	adc.w	r5, r5, #0
 80032bc:	0a20      	lsrs	r0, r4, #8
                dwt_setdelayedtrxtime(resp_tx_time);
 80032be:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 80032c2:	f7ff fcf0 	bl	8002ca6 <dwt_setdelayedtrxtime>
                resp_tx_ts = (((uint64)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80032c6:	23ff      	movs	r3, #255	; 0xff
 80032c8:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <main+0x2c0>)
 80032ca:	402b      	ands	r3, r5
 80032cc:	4022      	ands	r2, r4
 80032ce:	4614      	mov	r4, r2
 80032d0:	f244 0234 	movw	r2, #16436	; 0x4034
 80032d4:	461d      	mov	r5, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	18a4      	adds	r4, r4, r2
 80032da:	415d      	adcs	r5, r3
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <main+0x2c4>)
       ts_field[i] = (ts >> (i * 8)) & 0xFF;
 80032de:	492a      	ldr	r1, [pc, #168]	; (8003388 <main+0x2c8>)
                resp_tx_ts = (((uint64)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 80032e0:	e9c3 4500 	strd	r4, r5, [r3]
                resp_msg_set_ts(&tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX], poll_rx_ts);
 80032e4:	f8da 3000 	ldr.w	r3, [sl]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80032e8:	2014      	movs	r0, #20
       ts_field[i] = (ts >> (i * 8)) & 0xFF;
 80032ea:	0a1a      	lsrs	r2, r3, #8
 80032ec:	728b      	strb	r3, [r1, #10]
 80032ee:	72ca      	strb	r2, [r1, #11]
 80032f0:	0c1a      	lsrs	r2, r3, #16
 80032f2:	0e1b      	lsrs	r3, r3, #24
 80032f4:	734b      	strb	r3, [r1, #13]
 80032f6:	2334      	movs	r3, #52	; 0x34
 80032f8:	738b      	strb	r3, [r1, #14]
 80032fa:	0a23      	lsrs	r3, r4, #8
 80032fc:	73cb      	strb	r3, [r1, #15]
 80032fe:	0c23      	lsrs	r3, r4, #16
 8003300:	740b      	strb	r3, [r1, #16]
 8003302:	0e24      	lsrs	r4, r4, #24
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003304:	f899 3000 	ldrb.w	r3, [r9]
       ts_field[i] = (ts >> (i * 8)) & 0xFF;
 8003308:	730a      	strb	r2, [r1, #12]
 800330a:	744c      	strb	r4, [r1, #17]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 800330c:	2200      	movs	r2, #0
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 800330e:	708b      	strb	r3, [r1, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8003310:	f7ff fa4b 	bl	80027aa <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8003314:	2014      	movs	r0, #20
 8003316:	2201      	movs	r2, #1
 8003318:	2100      	movs	r1, #0
 800331a:	f7ff faf3 	bl	8002904 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 800331e:	2001      	movs	r0, #1
 8003320:	f7ff fcc6 	bl	8002cb0 <dwt_starttx>
                if (ret == DWT_SUCCESS)
 8003324:	2800      	cmp	r0, #0
 8003326:	d186      	bne.n	8003236 <main+0x176>
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8003328:	2100      	movs	r1, #0
 800332a:	200f      	movs	r0, #15
 800332c:	f7ff fa7a 	bl	8002824 <dwt_read32bitoffsetreg>
 8003330:	0603      	lsls	r3, r0, #24
 8003332:	d5f9      	bpl.n	8003328 <main+0x268>
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	2100      	movs	r1, #0
 8003338:	200f      	movs	r0, #15
 800333a:	f7ff facd 	bl	80028d8 <dwt_write32bitoffsetreg>
                    frame_seq_nb++;
 800333e:	f899 3000 	ldrb.w	r3, [r9]
 8003342:	3301      	adds	r3, #1
 8003344:	f889 3000 	strb.w	r3, [r9]
 8003348:	e775      	b.n	8003236 <main+0x176>
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <main+0x2cc>)
 800334c:	200f      	movs	r0, #15
 800334e:	f7ff fac3 	bl	80028d8 <dwt_write32bitoffsetreg>
          dwt_rxreset();
 8003352:	f7ff fd44 	bl	8002dde <dwt_rxreset>
 8003356:	e76e      	b.n	8003236 <main+0x176>
 8003358:	40021000 	.word	0x40021000
 800335c:	40011000 	.word	0x40011000
 8003360:	40010800 	.word	0x40010800
 8003364:	40010c00 	.word	0x40010c00
 8003368:	2000042c 	.word	0x2000042c
 800336c:	40013000 	.word	0x40013000
 8003370:	20000110 	.word	0x20000110
 8003374:	2405d000 	.word	0x2405d000
 8003378:	200001f8 	.word	0x200001f8
 800337c:	2000011c 	.word	0x2000011c
 8003380:	fffffe00 	.word	0xfffffe00
 8003384:	200001f0 	.word	0x200001f0
 8003388:	20000128 	.word	0x20000128
 800338c:	24059000 	.word	0x24059000
 8003390:	10110000 	.word	0x10110000
 8003394:	200001e0 	.word	0x200001e0
 8003398:	200001e8 	.word	0x200001e8

0800339c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800339c:	e7fe      	b.n	800339c <_Error_Handler>

0800339e <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800339e:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80033a0:	f000 f982 	bl	80036a8 <port_GetEXT_IRQStatus>

	if(s) {
 80033a4:	4604      	mov	r4, r0
 80033a6:	b108      	cbz	r0, 80033ac <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80033a8:	f000 f970 	bl	800368c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 80033ac:	4620      	mov	r0, r4
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80033b0:	b108      	cbz	r0, 80033b6 <decamutexoff+0x6>
		port_EnableEXT_IRQ();
 80033b2:	f000 b972 	b.w	800369a <port_EnableEXT_IRQ>
 80033b6:	4770      	bx	lr

080033b8 <deca_sleep>:
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
	Sleep(time_ms);
 80033b8:	f000 b8a1 	b.w	80034fe <Sleep>

080033bc <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
			   const	uint8_t *headerBuffer,
			   uint32_t bodyLength,
			   const	uint8_t *bodyBuffer)
{
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4681      	mov	r9, r0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4617      	mov	r7, r2
 80033c6:	461e      	mov	r6, r3
//    decaIrqStatus_t  stat ;
//    stat = decamutexon() ;

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80033c8:	4d0f      	ldr	r5, [pc, #60]	; (8003408 <writetospi+0x4c>)
 80033ca:	4628      	mov	r0, r5
 80033cc:	f7fe f955 	bl	800167a <HAL_SPI_GetState>
 80033d0:	2801      	cmp	r0, #1
 80033d2:	4604      	mov	r4, r0
 80033d4:	d1f9      	bne.n	80033ca <writetospi+0xe>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80033d6:	2200      	movs	r2, #0
 80033d8:	2110      	movs	r1, #16
 80033da:	480c      	ldr	r0, [pc, #48]	; (800340c <writetospi+0x50>)
 80033dc:	f7fd f868 	bl	80004b0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, 10);	/* Send header in polling mode */
 80033e0:	464a      	mov	r2, r9
 80033e2:	4641      	mov	r1, r8
 80033e4:	230a      	movs	r3, #10
 80033e6:	4808      	ldr	r0, [pc, #32]	; (8003408 <writetospi+0x4c>)
 80033e8:	f7fd ffa1 	bl	800132e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, 10);		/* Send data in polling mode */
 80033ec:	b2ba      	uxth	r2, r7
 80033ee:	4631      	mov	r1, r6
 80033f0:	230a      	movs	r3, #10
 80033f2:	4805      	ldr	r0, [pc, #20]	; (8003408 <writetospi+0x4c>)
 80033f4:	f7fd ff9b 	bl	800132e <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80033f8:	4622      	mov	r2, r4
 80033fa:	2110      	movs	r1, #16
 80033fc:	4803      	ldr	r0, [pc, #12]	; (800340c <writetospi+0x50>)
 80033fe:	f7fd f857 	bl	80004b0 <HAL_GPIO_WritePin>


//    decamutexoff(stat) ;

    return 0;
} // end writetospi()
 8003402:	2000      	movs	r0, #0
 8003404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003408:	2000042c 	.word	0x2000042c
 800340c:	40010800 	.word	0x40010800

08003410 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
				const uint8_t *headerBuffer,
				uint32_t readlength,
				uint8_t *readBuffer)
{
 8003410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003414:	4606      	mov	r6, r0
 8003416:	4689      	mov	r9, r1
 8003418:	4617      	mov	r7, r2
 800341a:	4698      	mov	r8, r3
 800341c:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
	
//    decaIrqStatus_t  stat ;
//    stat = decamutexon() ;

	/* Blocking: Check whether previous transfer has been finished */
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003420:	4d13      	ldr	r5, [pc, #76]	; (8003470 <readfromspi+0x60>)
{
 8003422:	b083      	sub	sp, #12
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003424:	4628      	mov	r0, r5
 8003426:	f7fe f928 	bl	800167a <HAL_SPI_GetState>
 800342a:	2801      	cmp	r0, #1
 800342c:	4604      	mov	r4, r0
 800342e:	d1f9      	bne.n	8003424 <readfromspi+0x14>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003430:	2200      	movs	r2, #0
 8003432:	2110      	movs	r1, #16
 8003434:	480f      	ldr	r0, [pc, #60]	; (8003474 <readfromspi+0x64>)
 8003436:	f7fd f83b 	bl	80004b0 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)headerBuffer, spi_TmpBuffer, (uint16_t)(headerLength+readlength), 10);
 800343a:	220a      	movs	r2, #10
 800343c:	19f3      	adds	r3, r6, r7
 800343e:	4649      	mov	r1, r9
 8003440:	9200      	str	r2, [sp, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	aa02      	add	r2, sp, #8
 8003446:	480a      	ldr	r0, [pc, #40]	; (8003470 <readfromspi+0x60>)
 8003448:	f7fe f81a 	bl	8001480 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800344c:	4622      	mov	r2, r4
 800344e:	2110      	movs	r1, #16
 8003450:	4808      	ldr	r0, [pc, #32]	; (8003474 <readfromspi+0x64>)
 8003452:	f7fd f82d 	bl	80004b0 <HAL_GPIO_WritePin>

	memcpy((uint8_t*)readBuffer , (uint8_t*)&spi_TmpBuffer[headerLength], readlength);
 8003456:	ab02      	add	r3, sp, #8
 8003458:	463a      	mov	r2, r7
 800345a:	1999      	adds	r1, r3, r6
 800345c:	4640      	mov	r0, r8
 800345e:	f000 fc06 	bl	8003c6e <memcpy>

//	decamutexoff(stat);

    return 0;
} // end readfromspi()
 8003462:	2000      	movs	r0, #0
 8003464:	f50d 5d84 	add.w	sp, sp, #4224	; 0x1080
 8003468:	b003      	add	sp, #12
 800346a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800346e:	bf00      	nop
 8003470:	2000042c 	.word	0x2000042c
 8003474:	40010800 	.word	0x40010800

08003478 <NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003478:	2301      	movs	r3, #1
 800347a:	0942      	lsrs	r2, r0, #5
 800347c:	f000 001f 	and.w	r0, r0, #31
 8003480:	fa03 f000 	lsl.w	r0, r3, r0
 8003484:	4b01      	ldr	r3, [pc, #4]	; (800348c <NVIC_EnableIRQ+0x14>)
 8003486:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100

08003490 <NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003490:	2201      	movs	r2, #1
 8003492:	0943      	lsrs	r3, r0, #5
 8003494:	f000 001f 	and.w	r0, r0, #31
 8003498:	fa02 f000 	lsl.w	r0, r2, r0
 800349c:	4a02      	ldr	r2, [pc, #8]	; (80034a8 <NVIC_DisableIRQ+0x18>)
 800349e:	3320      	adds	r3, #32
 80034a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000e100 	.word	0xe000e100

080034ac <usleep>:
/* @fn	  usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	int i,j;
#pragma GCC ivdep
	for(i=0;i<usec;i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e012      	b.n	80034e0 <usleep+0x34>
	{
#pragma GCC ivdep
		for(j=0;j<2;j++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	e004      	b.n	80034ca <usleep+0x1e>
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bfd4      	ite	le
 80034d0:	2301      	movle	r3, #1
 80034d2:	2300      	movgt	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f2      	bne.n	80034c0 <usleep+0x14>
	for(i=0;i<usec;i++)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	bf34      	ite	cc
 80034e8:	2301      	movcc	r3, #1
 80034ea:	2300      	movcs	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e3      	bne.n	80034ba <usleep+0xe>
		{
			__NOP();
			__NOP();
		}
	}
	return 0;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <Sleep>:
/* @fn 	  Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fc fe54 	bl	80001b4 <HAL_Delay>
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <peripherals_init>:
 *******************************************************************************/

/* @fn 	  peripherals_init
 * */
int peripherals_init (void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
	/* All has been initialized in the CubeMx code, see main.c */
	return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <EXTI_GetITEnStatus+0x34>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		    (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100

0800355c <reset_DW1000>:
 * 			In general it is output, but it also can be used to reset the digital
 * 			part of DW1000 by driving this pin low.
 * 			Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStruct;

	// Enable GPIO used for DW1000 reset as open collector output
	GPIO_InitStruct.Pin = DW_RESET_Pin;
 8003562:	2301      	movs	r3, #1
 8003564:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003566:	2311      	movs	r3, #17
 8003568:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2302      	movs	r3, #2
 800356c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800356e:	463b      	mov	r3, r7
 8003570:	4619      	mov	r1, r3
 8003572:	480a      	ldr	r0, [pc, #40]	; (800359c <reset_DW1000+0x40>)
 8003574:	f7fc feb6 	bl	80002e4 <HAL_GPIO_Init>

	//drive the RSTn pin low
	HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8003578:	2200      	movs	r2, #0
 800357a:	2101      	movs	r1, #1
 800357c:	4807      	ldr	r0, [pc, #28]	; (800359c <reset_DW1000+0x40>)
 800357e:	f7fc ff97 	bl	80004b0 <HAL_GPIO_WritePin>

	usleep(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff ff92 	bl	80034ac <usleep>

	//put the pin back to output open-drain (not active)
	setup_DW1000RSTnIRQ(0);
 8003588:	2000      	movs	r0, #0
 800358a:	f000 f809 	bl	80035a0 <setup_DW1000RSTnIRQ>



	Sleep(2);
 800358e:	2002      	movs	r0, #2
 8003590:	f7ff ffb5 	bl	80034fe <Sleep>
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40010800 	.word	0x40010800

080035a0 <setup_DW1000RSTnIRQ>:
 * @brief	setup the DW_RESET pin mode
 * 			0 - output Open collector mode
 * 			!0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	if(enable)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <setup_DW1000RSTnIRQ+0x38>
	{
		// Enable GPIO used as DECA RESET for interrupt
		GPIO_InitStruct.Pin = DW_RESET_Pin;
 80035ae:	2301      	movs	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <setup_DW1000RSTnIRQ+0x6c>)
 80035b4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	4619      	mov	r1, r3
 80035c0:	4813      	ldr	r0, [pc, #76]	; (8003610 <setup_DW1000RSTnIRQ+0x70>)
 80035c2:	f7fc fe8f 	bl	80002e4 <HAL_GPIO_Init>

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//pin #0 -> EXTI #0
 80035c6:	2006      	movs	r0, #6
 80035c8:	f7fc fe4a 	bl	8000260 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80035cc:	2200      	movs	r2, #0
 80035ce:	2105      	movs	r1, #5
 80035d0:	2006      	movs	r0, #6
 80035d2:	f7fc fe11 	bl	80001f8 <HAL_NVIC_SetPriority>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
		HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
	}
}
 80035d6:	e015      	b.n	8003604 <setup_DW1000RSTnIRQ+0x64>
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//pin #0 -> EXTI #0
 80035d8:	2006      	movs	r0, #6
 80035da:	f7fc fe4d 	bl	8000278 <HAL_NVIC_DisableIRQ>
		GPIO_InitStruct.Pin = DW_RESET_Pin;
 80035de:	2301      	movs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035e2:	2311      	movs	r3, #17
 80035e4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	4619      	mov	r1, r3
 80035f4:	4806      	ldr	r0, [pc, #24]	; (8003610 <setup_DW1000RSTnIRQ+0x70>)
 80035f6:	f7fc fe75 	bl	80002e4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80035fa:	2201      	movs	r2, #1
 80035fc:	2101      	movs	r1, #1
 80035fe:	4804      	ldr	r0, [pc, #16]	; (8003610 <setup_DW1000RSTnIRQ+0x70>)
 8003600:	f7fc ff56 	bl	80004b0 <HAL_GPIO_WritePin>
}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	10110000 	.word	0x10110000
 8003610:	40010800 	.word	0x40010800

08003614 <port_set_dw1000_slowrate>:
/* @fn		port_set_dw1000_slowrate
 * @brief	set 2.25MHz
 * 			note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <port_set_dw1000_slowrate+0x14>)
 800361a:	2220      	movs	r2, #32
 800361c:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800361e:	4802      	ldr	r0, [pc, #8]	; (8003628 <port_set_dw1000_slowrate+0x14>)
 8003620:	f7fe f82e 	bl	8001680 <HAL_SPI_Init>
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000042c 	.word	0x2000042c

0800362c <port_set_dw1000_fastrate>:
/* @fn		port_set_dw1000_fastrate
 * @brief	set 18MHz
 * 			note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <port_set_dw1000_fastrate+0x14>)
 8003632:	2208      	movs	r2, #8
 8003634:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8003636:	4802      	ldr	r0, [pc, #8]	; (8003640 <port_set_dw1000_fastrate+0x14>)
 8003638:	f7fe f822 	bl	8001680 <HAL_SPI_Init>
}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	2000042c 	.word	0x2000042c

08003644 <HAL_GPIO_EXTI_Callback>:
/* @fn		HAL_GPIO_EXTI_Callback
 * @brief	IRQ HAL call-back for all EXTI configured lines
 * 			i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DW_RESET_Pin)
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d103      	bne.n	800365c <HAL_GPIO_EXTI_Callback+0x18>
	{
		signalResetDone = 1;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]
		process_deca_irq();
	}
	else
	{
	}
}
 800365a:	e004      	b.n	8003666 <HAL_GPIO_EXTI_Callback+0x22>
	else if (GPIO_Pin == DW_IRQn_Pin)
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	2b20      	cmp	r3, #32
 8003660:	d101      	bne.n	8003666 <HAL_GPIO_EXTI_Callback+0x22>
		process_deca_irq();
 8003662:	f000 f807 	bl	8003674 <process_deca_irq>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000204 	.word	0x20000204

08003674 <process_deca_irq>:
 * @brief	main call-back for processing of DW1000 IRQ
 * 			it re-enters the IRQ routing and processes all events.
 * 			After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
	while(port_CheckEXT_IRQ() != 0)
 8003678:	e001      	b.n	800367e <process_deca_irq+0xa>
	{

    	dwt_isr();
 800367a:	f7ff fbbd 	bl	8002df8 <dwt_isr>
	while(port_CheckEXT_IRQ() != 0)
 800367e:	f000 f81b 	bl	80036b8 <port_CheckEXT_IRQ>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f8      	bne.n	800367a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}

0800368c <port_DisableEXT_IRQ>:
/* @fn		port_DisableEXT_IRQ
 * @brief	wrapper to disable DW_IRQ pin IRQ
 * 			in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8003690:	2017      	movs	r0, #23
 8003692:	f7ff fefd 	bl	8003490 <NVIC_DisableIRQ>
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}

0800369a <port_EnableEXT_IRQ>:
/* @fn		port_EnableEXT_IRQ
 * @brief	wrapper to enable DW_IRQ pin IRQ
 * 			in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800369e:	2017      	movs	r0, #23
 80036a0:	f7ff feea 	bl	8003478 <NVIC_EnableIRQ>
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <port_GetEXT_IRQStatus>:

/* @fn		port_GetEXT_IRQStatus
 * @brief	wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80036ac:	2017      	movs	r0, #23
 80036ae:	f7ff ff39 	bl	8003524 <EXTI_GetITEnStatus>
 80036b2:	4603      	mov	r3, r0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <port_CheckEXT_IRQ>:

/* @fn		port_CheckEXT_IRQ
 * @brief	wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 80036bc:	2120      	movs	r1, #32
 80036be:	4803      	ldr	r0, [pc, #12]	; (80036cc <port_CheckEXT_IRQ+0x14>)
 80036c0:	f7fc fef0 	bl	80004a4 <HAL_GPIO_ReadPin>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40010c00 	.word	0x40010c00

080036d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_MspInit+0x88>)
{
 80036d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80036d4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036d6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	619a      	str	r2, [r3, #24]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e8:	f7fc fd74 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80036ec:	2200      	movs	r2, #0
 80036ee:	f06f 000b 	mvn.w	r0, #11
 80036f2:	4611      	mov	r1, r2
 80036f4:	f7fc fd80 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80036f8:	2200      	movs	r2, #0
 80036fa:	f06f 000a 	mvn.w	r0, #10
 80036fe:	4611      	mov	r1, r2
 8003700:	f7fc fd7a 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	f06f 0009 	mvn.w	r0, #9
 800370a:	4611      	mov	r1, r2
 800370c:	f7fc fd74 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003710:	2200      	movs	r2, #0
 8003712:	f06f 0004 	mvn.w	r0, #4
 8003716:	4611      	mov	r1, r2
 8003718:	f7fc fd6e 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800371c:	2200      	movs	r2, #0
 800371e:	f06f 0003 	mvn.w	r0, #3
 8003722:	4611      	mov	r1, r2
 8003724:	f7fc fd68 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	f06f 0001 	mvn.w	r0, #1
 800372e:	4611      	mov	r1, r2
 8003730:	f7fc fd62 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2105      	movs	r1, #5
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f7fc fd5c 	bl	80001f8 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_MspInit+0x8c>)
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003752:	b003      	add	sp, #12
 8003754:	f85d fb04 	ldr.w	pc, [sp], #4
 8003758:	40021000 	.word	0x40021000
 800375c:	40010000 	.word	0x40010000

08003760 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003762:	6802      	ldr	r2, [r0, #0]
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_SPI_MspInit+0x4c>)
 8003766:	429a      	cmp	r2, r3
 8003768:	d11d      	bne.n	80037a6 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800376a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800376e:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003772:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003776:	619a      	str	r2, [r3, #24]
 8003778:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800377c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003784:	23a0      	movs	r3, #160	; 0xa0
 8003786:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	f7fc fda8 	bl	80002e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003794:	2340      	movs	r3, #64	; 0x40
 8003796:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003798:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379a:	a902      	add	r1, sp, #8
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a2:	f7fc fd9f 	bl	80002e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037a6:	b007      	add	sp, #28
 80037a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ac:	40013000 	.word	0x40013000
 80037b0:	40010800 	.word	0x40010800

080037b4 <NMI_Handler>:
 80037b4:	4770      	bx	lr

080037b6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80037b6:	e7fe      	b.n	80037b6 <HardFault_Handler>

080037b8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80037b8:	e7fe      	b.n	80037b8 <MemManage_Handler>

080037ba <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80037ba:	e7fe      	b.n	80037ba <BusFault_Handler>

080037bc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80037bc:	e7fe      	b.n	80037bc <UsageFault_Handler>

080037be <SVC_Handler>:
 80037be:	4770      	bx	lr

080037c0 <DebugMon_Handler>:
 80037c0:	4770      	bx	lr

080037c2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80037c2:	4770      	bx	lr

080037c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80037c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c6:	f7fc fce7 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80037ce:	f7fc bd84 	b.w	80002da <HAL_SYSTICK_IRQHandler>

080037d2 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80037d2:	2001      	movs	r0, #1
 80037d4:	f7fc be72 	b.w	80004bc <HAL_GPIO_EXTI_IRQHandler>

080037d8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80037da:	f7fc bf89 	b.w	80006f0 <HAL_PCD_IRQHandler>
 80037de:	bf00      	nop
 80037e0:	200016a8 	.word	0x200016a8

080037e4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80037e4:	2020      	movs	r0, #32
 80037e6:	f7fc be69 	b.w	80004bc <HAL_GPIO_EXTI_IRQHandler>
	...

080037ec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <SystemInit+0x40>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <SystemInit+0x44>)
 80037fa:	400a      	ands	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003804:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003808:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003810:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003818:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800381a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800381e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <SystemInit+0x48>)
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	f8ff0000 	.word	0xf8ff0000
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8003838:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800383a:	4c09      	ldr	r4, [pc, #36]	; (8003860 <MX_USB_DEVICE_Init+0x28>)
 800383c:	2200      	movs	r2, #0
 800383e:	4909      	ldr	r1, [pc, #36]	; (8003864 <MX_USB_DEVICE_Init+0x2c>)
 8003840:	4620      	mov	r0, r4
 8003842:	f7fe fc82 	bl	800214a <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003846:	4908      	ldr	r1, [pc, #32]	; (8003868 <MX_USB_DEVICE_Init+0x30>)
 8003848:	4620      	mov	r0, r4
 800384a:	f7fe fc93 	bl	8002174 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800384e:	4620      	mov	r0, r4
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <MX_USB_DEVICE_Init+0x34>)
 8003852:	f7fe fc52 	bl	80020fa <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003856:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 800385c:	f7fe bc91 	b.w	8002182 <USBD_Start>
 8003860:	20000484 	.word	0x20000484
 8003864:	20000150 	.word	0x20000150
 8003868:	20000000 	.word	0x20000000
 800386c:	20000140 	.word	0x20000140

08003870 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8003870:	2000      	movs	r0, #0
 8003872:	4770      	bx	lr

08003874 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003874:	2000      	movs	r0, #0
 8003876:	4770      	bx	lr

08003878 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8003878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800387a:	4c05      	ldr	r4, [pc, #20]	; (8003890 <CDC_Receive_FS+0x18>)
 800387c:	4601      	mov	r1, r0
 800387e:	4620      	mov	r0, r4
 8003880:	f7fe fc4a 	bl	8002118 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003884:	4620      	mov	r0, r4
 8003886:	f7fe fc4d 	bl	8002124 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 800388a:	2000      	movs	r0, #0
 800388c:	bd10      	pop	{r4, pc}
 800388e:	bf00      	nop
 8003890:	20000484 	.word	0x20000484

08003894 <CDC_Init_FS>:
{ 
 8003894:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003896:	4c06      	ldr	r4, [pc, #24]	; (80038b0 <CDC_Init_FS+0x1c>)
 8003898:	2200      	movs	r2, #0
 800389a:	4906      	ldr	r1, [pc, #24]	; (80038b4 <CDC_Init_FS+0x20>)
 800389c:	4620      	mov	r0, r4
 800389e:	f7fe fc33 	bl	8002108 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80038a2:	4905      	ldr	r1, [pc, #20]	; (80038b8 <CDC_Init_FS+0x24>)
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7fe fc37 	bl	8002118 <USBD_CDC_SetRxBuffer>
}
 80038aa:	2000      	movs	r0, #0
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	bf00      	nop
 80038b0:	20000484 	.word	0x20000484
 80038b4:	20000ea8 	.word	0x20000ea8
 80038b8:	200006a8 	.word	0x200006a8

080038bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80038bc:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_PCD_MspInit+0x38>)
 80038c0:	6802      	ldr	r2, [r0, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d112      	bne.n	80038ec <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80038c6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80038ca:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80038cc:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80038ce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038d2:	61da      	str	r2, [r3, #28]
 80038d4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80038d6:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038dc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80038de:	2107      	movs	r1, #7
    __HAL_RCC_USB_CLK_ENABLE();
 80038e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80038e2:	f7fc fc89 	bl	80001f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80038e6:	2014      	movs	r0, #20
 80038e8:	f7fc fcba 	bl	8000260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80038ec:	b003      	add	sp, #12
 80038ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80038f2:	bf00      	nop
 80038f4:	40005c00 	.word	0x40005c00

080038f8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80038f8:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 80038fc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003900:	f7fe bc56 	b.w	80021b0 <USBD_LL_SetupStage>

08003904 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003904:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003908:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800390c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003910:	f7fe bc7b 	b.w	800220a <USBD_LL_DataOutStage>

08003914 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003914:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800391a:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800391e:	f7fe bca6 	b.w	800226e <USBD_LL_DataInStage>

08003922 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003922:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003926:	f7fe bd22 	b.w	800236e <USBD_LL_SOF>

0800392a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800392a:	b510      	push	{r4, lr}
 800392c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 800392e:	2101      	movs	r1, #1
 8003930:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003934:	f7fe fd09 	bl	800234a <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003938:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 800393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003940:	f7fe bce4 	b.w	800230c <USBD_LL_Reset>

08003944 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003944:	b510      	push	{r4, lr}
 8003946:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003948:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800394c:	f7fe fd00 	bl	8002350 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8003950:	69a3      	ldr	r3, [r4, #24]
 8003952:	b123      	cbz	r3, 800395e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003954:	4a02      	ldr	r2, [pc, #8]	; (8003960 <HAL_PCD_SuspendCallback+0x1c>)
 8003956:	6913      	ldr	r3, [r2, #16]
 8003958:	f043 0306 	orr.w	r3, r3, #6
 800395c:	6113      	str	r3, [r2, #16]
 800395e:	bd10      	pop	{r4, pc}
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003964:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003968:	f7fe bcfb 	b.w	8002362 <USBD_LL_Resume>

0800396c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 800396c:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800396e:	2302      	movs	r3, #2
 8003970:	2208      	movs	r2, #8
 8003972:	f04f 0e03 	mov.w	lr, #3
{ 
 8003976:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003978:	491d      	ldr	r1, [pc, #116]	; (80039f0 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800397a:	481e      	ldr	r0, [pc, #120]	; (80039f4 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800397c:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003980:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003982:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003986:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800398a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800398c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800398e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003990:	f7fc fda0 	bl	80004d4 <HAL_PCD_Init>
 8003994:	b120      	cbz	r0, 80039a0 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003996:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800399a:	4817      	ldr	r0, [pc, #92]	; (80039f8 <USBD_LL_Init+0x8c>)
 800399c:	f7ff fcfe 	bl	800339c <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2318      	movs	r3, #24
 80039a4:	4611      	mov	r1, r2
 80039a6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80039aa:	f7fd f965 	bl	8000c78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80039ae:	2358      	movs	r3, #88	; 0x58
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80039b8:	f7fd f95e 	bl	8000c78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 80039bc:	23c0      	movs	r3, #192	; 0xc0
 80039be:	2200      	movs	r2, #0
 80039c0:	2181      	movs	r1, #129	; 0x81
 80039c2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80039c6:	f7fd f957 	bl	8000c78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80039ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80039ce:	2200      	movs	r2, #0
 80039d0:	2101      	movs	r1, #1
 80039d2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80039d6:	f7fd f94f 	bl	8000c78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 80039da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039de:	2200      	movs	r2, #0
 80039e0:	2182      	movs	r1, #130	; 0x82
 80039e2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80039e6:	f7fd f947 	bl	8000c78 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80039ea:	2000      	movs	r0, #0
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	bf00      	nop
 80039f0:	40005c00 	.word	0x40005c00
 80039f4:	200016a8 	.word	0x200016a8
 80039f8:	08003d70 	.word	0x08003d70

080039fc <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80039fc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80039fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a02:	f7fc fdd0 	bl	80005a6 <HAL_PCD_Start>
 8003a06:	2803      	cmp	r0, #3
 8003a08:	bf9a      	itte	ls
 8003a0a:	4b02      	ldrls	r3, [pc, #8]	; (8003a14 <USBD_LL_Start+0x18>)
 8003a0c:	5c18      	ldrbls	r0, [r3, r0]
 8003a0e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a10:	bd08      	pop	{r3, pc}
 8003a12:	bf00      	nop
 8003a14:	08003d6c 	.word	0x08003d6c

08003a18 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003a1c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a20:	4613      	mov	r3, r2
 8003a22:	4622      	mov	r2, r4
 8003a24:	f7fc fdea 	bl	80005fc <HAL_PCD_EP_Open>
 8003a28:	2803      	cmp	r0, #3
 8003a2a:	bf9a      	itte	ls
 8003a2c:	4b01      	ldrls	r3, [pc, #4]	; (8003a34 <USBD_LL_OpenEP+0x1c>)
 8003a2e:	5c18      	ldrbls	r0, [r3, r0]
 8003a30:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	08003d6c 	.word	0x08003d6c

08003a38 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003a38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003a3a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a3e:	f7fc fe00 	bl	8000642 <HAL_PCD_EP_Close>
 8003a42:	2803      	cmp	r0, #3
 8003a44:	bf9a      	itte	ls
 8003a46:	4b02      	ldrls	r3, [pc, #8]	; (8003a50 <USBD_LL_CloseEP+0x18>)
 8003a48:	5c18      	ldrbls	r0, [r3, r0]
 8003a4a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a4c:	bd08      	pop	{r3, pc}
 8003a4e:	bf00      	nop
 8003a50:	08003d6c 	.word	0x08003d6c

08003a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003a54:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003a56:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a5a:	f7fd f8c1 	bl	8000be0 <HAL_PCD_EP_SetStall>
 8003a5e:	2803      	cmp	r0, #3
 8003a60:	bf9a      	itte	ls
 8003a62:	4b02      	ldrls	r3, [pc, #8]	; (8003a6c <USBD_LL_StallEP+0x18>)
 8003a64:	5c18      	ldrbls	r0, [r3, r0]
 8003a66:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a68:	bd08      	pop	{r3, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08003d6c 	.word	0x08003d6c

08003a70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003a70:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003a72:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a76:	f7fd f8dc 	bl	8000c32 <HAL_PCD_EP_ClrStall>
 8003a7a:	2803      	cmp	r0, #3
 8003a7c:	bf9a      	itte	ls
 8003a7e:	4b02      	ldrls	r3, [pc, #8]	; (8003a88 <USBD_LL_ClearStallEP+0x18>)
 8003a80:	5c18      	ldrbls	r0, [r3, r0]
 8003a82:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003a84:	bd08      	pop	{r3, pc}
 8003a86:	bf00      	nop
 8003a88:	08003d6c 	.word	0x08003d6c

08003a8c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003a8c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003a8e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a92:	bf45      	ittet	mi
 8003a94:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003a98:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a9c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003aa0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003aa4:	bf58      	it	pl
 8003aa6:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8003aaa:	4770      	bx	lr

08003aac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003aac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003aae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ab2:	f7fc fd8f 	bl	80005d4 <HAL_PCD_SetAddress>
 8003ab6:	2803      	cmp	r0, #3
 8003ab8:	bf9a      	itte	ls
 8003aba:	4b02      	ldrls	r3, [pc, #8]	; (8003ac4 <USBD_LL_SetUSBAddress+0x18>)
 8003abc:	5c18      	ldrbls	r0, [r3, r0]
 8003abe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003ac0:	bd08      	pop	{r3, pc}
 8003ac2:	bf00      	nop
 8003ac4:	08003d6c 	.word	0x08003d6c

08003ac8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003ac8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003aca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ace:	f7fc fdf8 	bl	80006c2 <HAL_PCD_EP_Transmit>
 8003ad2:	2803      	cmp	r0, #3
 8003ad4:	bf9a      	itte	ls
 8003ad6:	4b02      	ldrls	r3, [pc, #8]	; (8003ae0 <USBD_LL_Transmit+0x18>)
 8003ad8:	5c18      	ldrbls	r0, [r3, r0]
 8003ada:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003adc:	bd08      	pop	{r3, pc}
 8003ade:	bf00      	nop
 8003ae0:	08003d6c 	.word	0x08003d6c

08003ae4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003ae4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003ae6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003aea:	f7fc fdcb 	bl	8000684 <HAL_PCD_EP_Receive>
 8003aee:	2803      	cmp	r0, #3
 8003af0:	bf9a      	itte	ls
 8003af2:	4b02      	ldrls	r3, [pc, #8]	; (8003afc <USBD_LL_PrepareReceive+0x18>)
 8003af4:	5c18      	ldrbls	r0, [r3, r0]
 8003af6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003af8:	bd08      	pop	{r3, pc}
 8003afa:	bf00      	nop
 8003afc:	08003d6c 	.word	0x08003d6c

08003b00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8003b00:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003b02:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b06:	f7fc fdd5 	bl	80006b4 <HAL_PCD_EP_GetRxCount>
}
 8003b0a:	bd08      	pop	{r3, pc}

08003b0c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003b0c:	4800      	ldr	r0, [pc, #0]	; (8003b10 <USBD_static_malloc+0x4>)
 8003b0e:	4770      	bx	lr
 8003b10:	20000208 	.word	0x20000208

08003b14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003b14:	4770      	bx	lr

08003b16 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003b16:	4770      	bx	lr

08003b18 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003b18:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003b1a:	4801      	ldr	r0, [pc, #4]	; (8003b20 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003b1c:	800b      	strh	r3, [r1, #0]
}
 8003b1e:	4770      	bx	lr
 8003b20:	2000016c 	.word	0x2000016c

08003b24 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003b24:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003b26:	4801      	ldr	r0, [pc, #4]	; (8003b2c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 8003b28:	800b      	strh	r3, [r1, #0]
}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000180 	.word	0x20000180

08003b30 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003b30:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003b32:	4c04      	ldr	r4, [pc, #16]	; (8003b44 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003b34:	460a      	mov	r2, r1
 8003b36:	4804      	ldr	r0, [pc, #16]	; (8003b48 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003b38:	4621      	mov	r1, r4
 8003b3a:	f7fe fdb8 	bl	80026ae <USBD_GetString>
  return USBD_StrDesc;
}
 8003b3e:	4620      	mov	r0, r4
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	bf00      	nop
 8003b44:	20001b08 	.word	0x20001b08
 8003b48:	08003d9c 	.word	0x08003d9c

08003b4c <USBD_FS_ProductStrDescriptor>:
{
 8003b4c:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003b4e:	4c04      	ldr	r4, [pc, #16]	; (8003b60 <USBD_FS_ProductStrDescriptor+0x14>)
 8003b50:	460a      	mov	r2, r1
 8003b52:	4804      	ldr	r0, [pc, #16]	; (8003b64 <USBD_FS_ProductStrDescriptor+0x18>)
 8003b54:	4621      	mov	r1, r4
 8003b56:	f7fe fdaa 	bl	80026ae <USBD_GetString>
}
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	20001b08 	.word	0x20001b08
 8003b64:	08003daf 	.word	0x08003daf

08003b68 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003b68:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003b6a:	4c04      	ldr	r4, [pc, #16]	; (8003b7c <USBD_FS_SerialStrDescriptor+0x14>)
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	4804      	ldr	r0, [pc, #16]	; (8003b80 <USBD_FS_SerialStrDescriptor+0x18>)
 8003b70:	4621      	mov	r1, r4
 8003b72:	f7fe fd9c 	bl	80026ae <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003b76:	4620      	mov	r0, r4
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20001b08 	.word	0x20001b08
 8003b80:	08003dc5 	.word	0x08003dc5

08003b84 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003b84:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003b86:	4c04      	ldr	r4, [pc, #16]	; (8003b98 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003b88:	460a      	mov	r2, r1
 8003b8a:	4804      	ldr	r0, [pc, #16]	; (8003b9c <USBD_FS_ConfigStrDescriptor+0x18>)
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	f7fe fd8e 	bl	80026ae <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003b92:	4620      	mov	r0, r4
 8003b94:	bd10      	pop	{r4, pc}
 8003b96:	bf00      	nop
 8003b98:	20001b08 	.word	0x20001b08
 8003b9c:	08003d83 	.word	0x08003d83

08003ba0 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003ba0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003ba2:	4c04      	ldr	r4, [pc, #16]	; (8003bb4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003ba8:	4621      	mov	r1, r4
 8003baa:	f7fe fd80 	bl	80026ae <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003bae:	4620      	mov	r0, r4
 8003bb0:	bd10      	pop	{r4, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20001b08 	.word	0x20001b08
 8003bb8:	08003d8e 	.word	0x08003d8e

08003bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003bbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003bbe:	e003      	b.n	8003bc8 <LoopCopyDataInit>

08003bc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003bc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003bc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003bc6:	3104      	adds	r1, #4

08003bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003bc8:	480a      	ldr	r0, [pc, #40]	; (8003bf4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003bcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003bce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003bd0:	d3f6      	bcc.n	8003bc0 <CopyDataInit>
  ldr r2, =_sbss
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003bd4:	e002      	b.n	8003bdc <LoopFillZerobss>

08003bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003bd8:	f842 3b04 	str.w	r3, [r2], #4

08003bdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003bde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003be0:	d3f9      	bcc.n	8003bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003be2:	f7ff fe03 	bl	80037ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003be6:	f000 f80f 	bl	8003c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bea:	f7ff fa69 	bl	80030c0 <main>
  bx lr
 8003bee:	4770      	bx	lr
  ldr r3, =_sidata
 8003bf0:	08003ddc 	.word	0x08003ddc
  ldr r0, =_sdata
 8003bf4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bf8:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8003bfc:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8003c00:	20001d08 	.word	0x20001d08

08003c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c04:	e7fe      	b.n	8003c04 <ADC1_2_IRQHandler>
	...

08003c08 <__libc_init_array>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	4e0c      	ldr	r6, [pc, #48]	; (8003c40 <__libc_init_array+0x38>)
 8003c0e:	4c0d      	ldr	r4, [pc, #52]	; (8003c44 <__libc_init_array+0x3c>)
 8003c10:	1ba4      	subs	r4, r4, r6
 8003c12:	10a4      	asrs	r4, r4, #2
 8003c14:	42a5      	cmp	r5, r4
 8003c16:	d109      	bne.n	8003c2c <__libc_init_array+0x24>
 8003c18:	f000 f834 	bl	8003c84 <_init>
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	4e0a      	ldr	r6, [pc, #40]	; (8003c48 <__libc_init_array+0x40>)
 8003c20:	4c0a      	ldr	r4, [pc, #40]	; (8003c4c <__libc_init_array+0x44>)
 8003c22:	1ba4      	subs	r4, r4, r6
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	42a5      	cmp	r5, r4
 8003c28:	d105      	bne.n	8003c36 <__libc_init_array+0x2e>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c30:	4798      	blx	r3
 8003c32:	3501      	adds	r5, #1
 8003c34:	e7ee      	b.n	8003c14 <__libc_init_array+0xc>
 8003c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3a:	4798      	blx	r3
 8003c3c:	3501      	adds	r5, #1
 8003c3e:	e7f2      	b.n	8003c26 <__libc_init_array+0x1e>
 8003c40:	08003dd4 	.word	0x08003dd4
 8003c44:	08003dd4 	.word	0x08003dd4
 8003c48:	08003dd4 	.word	0x08003dd4
 8003c4c:	08003dd8 	.word	0x08003dd8

08003c50 <memcmp>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	3901      	subs	r1, #1
 8003c54:	4402      	add	r2, r0
 8003c56:	4290      	cmp	r0, r2
 8003c58:	d101      	bne.n	8003c5e <memcmp+0xe>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003c62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	d0f5      	beq.n	8003c56 <memcmp+0x6>
 8003c6a:	1b18      	subs	r0, r3, r4
 8003c6c:	bd10      	pop	{r4, pc}

08003c6e <memcpy>:
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	1e43      	subs	r3, r0, #1
 8003c72:	440a      	add	r2, r1
 8003c74:	4291      	cmp	r1, r2
 8003c76:	d100      	bne.n	8003c7a <memcpy+0xc>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c82:	e7f7      	b.n	8003c74 <memcpy+0x6>

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
