
C:\Users\Gustavo\Documents\TD_EfisioHugo\TD_SimpleTX\Debug\TD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000748c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000000  080076fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001bc4  20000188  08007880  00020188  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001d4c  08007880  00021d4c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001faae  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004218  00000000  00000000  0003fc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001240  00000000  00000000  00043e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001060  00000000  00000000  000450b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008f31  00000000  00000000  00046118  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000495c  00000000  00000000  0004f049  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000539a5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004808  00000000  00000000  00053a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08007580 	.word	0x08007580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08007580 	.word	0x08007580

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f93d 	bl	80003dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2005      	movs	r0, #5
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f006 fbd8 	bl	800691c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_InitTick+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	099b      	lsrs	r3, r3, #6
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f968 	bl	8000462 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000192:	2200      	movs	r2, #0
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	f04f 30ff 	mov.w	r0, #4294967295
 800019a:	f000 f92a 	bl	80003f2 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000042c 	.word	0x2000042c

080001cc <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	2000042c 	.word	0x2000042c

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001e8:	f7ff fff0 	bl	80001cc <HAL_GetTick>
 80001ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f8:	d002      	beq.n	8000200 <HAL_Delay+0x20>
  {
     wait++;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3301      	adds	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000200:	bf00      	nop
 8000202:	f7ff ffe3 	bl	80001cc <HAL_GetTick>
 8000206:	4602      	mov	r2, r0
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	1ad2      	subs	r2, r2, r3
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	429a      	cmp	r2, r3
 8000210:	d3f7      	bcc.n	8000202 <HAL_Delay+0x22>
  {
  }
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f003 0307 	and.w	r3, r3, #7
 800022a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <NVIC_SetPriorityGrouping+0x44>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000238:	4013      	ands	r3, r2
 800023a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <NVIC_SetPriorityGrouping+0x44>)
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	60d3      	str	r3, [r2, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <NVIC_GetPriorityGrouping+0x18>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	0a1b      	lsrs	r3, r3, #8
 800026e:	f003 0307 	and.w	r3, r3, #7
}
 8000272:	4618      	mov	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <NVIC_EnableIRQ+0x2c>)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	095b      	lsrs	r3, r3, #5
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	f002 021f 	and.w	r2, r2, #31
 8000298:	2001      	movs	r0, #1
 800029a:	fa00 f202 	lsl.w	r2, r0, r2
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ba:	4909      	ldr	r1, [pc, #36]	; (80002e0 <NVIC_DisableIRQ+0x30>)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	095b      	lsrs	r3, r3, #5
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	f002 021f 	and.w	r2, r2, #31
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	3320      	adds	r3, #32
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	da0b      	bge.n	8000310 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <NVIC_SetPriority+0x4c>)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	3b04      	subs	r3, #4
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	440b      	add	r3, r1
 800030c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800030e:	e009      	b.n	8000324 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	4908      	ldr	r1, [pc, #32]	; (8000334 <NVIC_SetPriority+0x50>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	e000e100 	.word	0xe000e100

08000338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000338:	b480      	push	{r7}
 800033a:	b089      	sub	sp, #36	; 0x24
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	f1c3 0307 	rsb	r3, r3, #7
 8000352:	2b04      	cmp	r3, #4
 8000354:	bf28      	it	cs
 8000356:	2304      	movcs	r3, #4
 8000358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3304      	adds	r3, #4
 800035e:	2b06      	cmp	r3, #6
 8000360:	d902      	bls.n	8000368 <NVIC_EncodePriority+0x30>
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	3b03      	subs	r3, #3
 8000366:	e000      	b.n	800036a <NVIC_EncodePriority+0x32>
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	2201      	movs	r2, #1
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	401a      	ands	r2, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037e:	2101      	movs	r1, #1
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	1e59      	subs	r1, r3, #1
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038c:	4313      	orrs	r3, r2
         );
}
 800038e:	4618      	mov	r0, r3
 8000390:	3724      	adds	r7, #36	; 0x24
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003a8:	d301      	bcc.n	80003ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003aa:	2301      	movs	r3, #1
 80003ac:	e00f      	b.n	80003ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <SysTick_Config+0x40>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003b6:	210f      	movs	r1, #15
 80003b8:	f04f 30ff 	mov.w	r0, #4294967295
 80003bc:	f7ff ff92 	bl	80002e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <SysTick_Config+0x40>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c6:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <SysTick_Config+0x40>)
 80003c8:	2207      	movs	r2, #7
 80003ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003cc:	2300      	movs	r3, #0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	e000e010 	.word	0xe000e010

080003dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f7ff ff19 	bl	800021c <NVIC_SetPriorityGrouping>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b086      	sub	sp, #24
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4603      	mov	r3, r0
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000404:	f7ff ff2e 	bl	8000264 <NVIC_GetPriorityGrouping>
 8000408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	68b9      	ldr	r1, [r7, #8]
 800040e:	6978      	ldr	r0, [r7, #20]
 8000410:	f7ff ff92 	bl	8000338 <NVIC_EncodePriority>
 8000414:	4602      	mov	r2, r0
 8000416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff61 	bl	80002e4 <NVIC_SetPriority>
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	4603      	mov	r3, r0
 8000432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff21 	bl	8000280 <NVIC_EnableIRQ>
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	4603      	mov	r3, r0
 800044e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff2b 	bl	80002b0 <NVIC_DisableIRQ>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ff94 	bl	8000398 <SysTick_Config>
 8000470:	4603      	mov	r3, r0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b04      	cmp	r3, #4
 8000488:	d106      	bne.n	8000498 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800048a:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000496:	e005      	b.n	80004a4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f023 0304 	bic.w	r3, r3, #4
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000e010 	.word	0xe000e010

080004b4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004b8:	f000 f802 	bl	80004c0 <HAL_SYSTICK_Callback>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b08b      	sub	sp, #44	; 0x2c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
 80004ee:	e127      	b.n	8000740 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80004f0:	2201      	movs	r2, #1
 80004f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	4013      	ands	r3, r2
 8000502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000504:	69ba      	ldr	r2, [r7, #24]
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	429a      	cmp	r2, r3
 800050a:	f040 8116 	bne.w	800073a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	2b12      	cmp	r3, #18
 8000514:	d034      	beq.n	8000580 <HAL_GPIO_Init+0xb4>
 8000516:	2b12      	cmp	r3, #18
 8000518:	d80d      	bhi.n	8000536 <HAL_GPIO_Init+0x6a>
 800051a:	2b02      	cmp	r3, #2
 800051c:	d02b      	beq.n	8000576 <HAL_GPIO_Init+0xaa>
 800051e:	2b02      	cmp	r3, #2
 8000520:	d804      	bhi.n	800052c <HAL_GPIO_Init+0x60>
 8000522:	2b00      	cmp	r3, #0
 8000524:	d031      	beq.n	800058a <HAL_GPIO_Init+0xbe>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d01c      	beq.n	8000564 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800052a:	e048      	b.n	80005be <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800052c:	2b03      	cmp	r3, #3
 800052e:	d043      	beq.n	80005b8 <HAL_GPIO_Init+0xec>
 8000530:	2b11      	cmp	r3, #17
 8000532:	d01b      	beq.n	800056c <HAL_GPIO_Init+0xa0>
          break;
 8000534:	e043      	b.n	80005be <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000536:	4a87      	ldr	r2, [pc, #540]	; (8000754 <HAL_GPIO_Init+0x288>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d026      	beq.n	800058a <HAL_GPIO_Init+0xbe>
 800053c:	4a85      	ldr	r2, [pc, #532]	; (8000754 <HAL_GPIO_Init+0x288>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d806      	bhi.n	8000550 <HAL_GPIO_Init+0x84>
 8000542:	4a85      	ldr	r2, [pc, #532]	; (8000758 <HAL_GPIO_Init+0x28c>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d020      	beq.n	800058a <HAL_GPIO_Init+0xbe>
 8000548:	4a84      	ldr	r2, [pc, #528]	; (800075c <HAL_GPIO_Init+0x290>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d01d      	beq.n	800058a <HAL_GPIO_Init+0xbe>
          break;
 800054e:	e036      	b.n	80005be <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000550:	4a83      	ldr	r2, [pc, #524]	; (8000760 <HAL_GPIO_Init+0x294>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d019      	beq.n	800058a <HAL_GPIO_Init+0xbe>
 8000556:	4a83      	ldr	r2, [pc, #524]	; (8000764 <HAL_GPIO_Init+0x298>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d016      	beq.n	800058a <HAL_GPIO_Init+0xbe>
 800055c:	4a82      	ldr	r2, [pc, #520]	; (8000768 <HAL_GPIO_Init+0x29c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d013      	beq.n	800058a <HAL_GPIO_Init+0xbe>
          break;
 8000562:	e02c      	b.n	80005be <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	623b      	str	r3, [r7, #32]
          break;
 800056a:	e028      	b.n	80005be <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	3304      	adds	r3, #4
 8000572:	623b      	str	r3, [r7, #32]
          break;
 8000574:	e023      	b.n	80005be <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	3308      	adds	r3, #8
 800057c:	623b      	str	r3, [r7, #32]
          break;
 800057e:	e01e      	b.n	80005be <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	330c      	adds	r3, #12
 8000586:	623b      	str	r3, [r7, #32]
          break;
 8000588:	e019      	b.n	80005be <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000592:	2304      	movs	r3, #4
 8000594:	623b      	str	r3, [r7, #32]
          break; 
 8000596:	e012      	b.n	80005be <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d105      	bne.n	80005ac <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005a0:	2308      	movs	r3, #8
 80005a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	611a      	str	r2, [r3, #16]
          break; 
 80005aa:	e008      	b.n	80005be <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005ac:	2308      	movs	r3, #8
 80005ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	69fa      	ldr	r2, [r7, #28]
 80005b4:	615a      	str	r2, [r3, #20]
          break; 
 80005b6:	e002      	b.n	80005be <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
          break;
 80005bc:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	2bff      	cmp	r3, #255	; 0xff
 80005c2:	d801      	bhi.n	80005c8 <HAL_GPIO_Init+0xfc>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	e001      	b.n	80005cc <HAL_GPIO_Init+0x100>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3304      	adds	r3, #4
 80005cc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	2bff      	cmp	r3, #255	; 0xff
 80005d2:	d802      	bhi.n	80005da <HAL_GPIO_Init+0x10e>
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	e002      	b.n	80005e0 <HAL_GPIO_Init+0x114>
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	3b08      	subs	r3, #8
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	210f      	movs	r1, #15
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	6a39      	ldr	r1, [r7, #32]
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	431a      	orrs	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	2b00      	cmp	r3, #0
 800060a:	f000 8096 	beq.w	800073a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4a57      	ldr	r2, [pc, #348]	; (800076c <HAL_GPIO_Init+0x2a0>)
 8000610:	4b56      	ldr	r3, [pc, #344]	; (800076c <HAL_GPIO_Init+0x2a0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b54      	ldr	r3, [pc, #336]	; (800076c <HAL_GPIO_Init+0x2a0>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000626:	4a52      	ldr	r2, [pc, #328]	; (8000770 <HAL_GPIO_Init+0x2a4>)
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	089b      	lsrs	r3, r3, #2
 800062c:	3302      	adds	r3, #2
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	f003 0303 	and.w	r3, r3, #3
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	220f      	movs	r2, #15
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	4013      	ands	r3, r2
 8000648:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a49      	ldr	r2, [pc, #292]	; (8000774 <HAL_GPIO_Init+0x2a8>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d013      	beq.n	800067a <HAL_GPIO_Init+0x1ae>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a48      	ldr	r2, [pc, #288]	; (8000778 <HAL_GPIO_Init+0x2ac>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d00d      	beq.n	8000676 <HAL_GPIO_Init+0x1aa>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a47      	ldr	r2, [pc, #284]	; (800077c <HAL_GPIO_Init+0x2b0>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d007      	beq.n	8000672 <HAL_GPIO_Init+0x1a6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a46      	ldr	r2, [pc, #280]	; (8000780 <HAL_GPIO_Init+0x2b4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d101      	bne.n	800066e <HAL_GPIO_Init+0x1a2>
 800066a:	2303      	movs	r3, #3
 800066c:	e006      	b.n	800067c <HAL_GPIO_Init+0x1b0>
 800066e:	2304      	movs	r3, #4
 8000670:	e004      	b.n	800067c <HAL_GPIO_Init+0x1b0>
 8000672:	2302      	movs	r3, #2
 8000674:	e002      	b.n	800067c <HAL_GPIO_Init+0x1b0>
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <HAL_GPIO_Init+0x1b0>
 800067a:	2300      	movs	r3, #0
 800067c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800067e:	f002 0203 	and.w	r2, r2, #3
 8000682:	0092      	lsls	r2, r2, #2
 8000684:	4093      	lsls	r3, r2
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	4313      	orrs	r3, r2
 800068a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800068c:	4938      	ldr	r1, [pc, #224]	; (8000770 <HAL_GPIO_Init+0x2a4>)
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	089b      	lsrs	r3, r3, #2
 8000692:	3302      	adds	r3, #2
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80006a6:	4937      	ldr	r1, [pc, #220]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	600b      	str	r3, [r1, #0]
 80006b2:	e006      	b.n	80006c2 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80006b4:	4933      	ldr	r1, [pc, #204]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	43db      	mvns	r3, r3
 80006be:	4013      	ands	r3, r2
 80006c0:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d006      	beq.n	80006dc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80006ce:	492d      	ldr	r1, [pc, #180]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	604b      	str	r3, [r1, #4]
 80006da:	e006      	b.n	80006ea <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80006dc:	4929      	ldr	r1, [pc, #164]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80006f6:	4923      	ldr	r1, [pc, #140]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	4313      	orrs	r3, r2
 8000700:	608b      	str	r3, [r1, #8]
 8000702:	e006      	b.n	8000712 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000704:	491f      	ldr	r1, [pc, #124]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	43db      	mvns	r3, r3
 800070e:	4013      	ands	r3, r2
 8000710:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800071e:	4919      	ldr	r1, [pc, #100]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	4313      	orrs	r3, r2
 8000728:	60cb      	str	r3, [r1, #12]
 800072a:	e006      	b.n	800073a <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800072c:	4915      	ldr	r1, [pc, #84]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_GPIO_Init+0x2b8>)
 8000730:	68da      	ldr	r2, [r3, #12]
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	43db      	mvns	r3, r3
 8000736:	4013      	ands	r3, r2
 8000738:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	3301      	adds	r3, #1
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	2b0f      	cmp	r3, #15
 8000744:	f67f aed4 	bls.w	80004f0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000748:	bf00      	nop
 800074a:	372c      	adds	r7, #44	; 0x2c
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	10210000 	.word	0x10210000
 8000758:	10110000 	.word	0x10110000
 800075c:	10120000 	.word	0x10120000
 8000760:	10310000 	.word	0x10310000
 8000764:	10320000 	.word	0x10320000
 8000768:	10220000 	.word	0x10220000
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000
 8000774:	40010800 	.word	0x40010800
 8000778:	40010c00 	.word	0x40010c00
 800077c:	40011000 	.word	0x40011000
 8000780:	40011400 	.word	0x40011400
 8000784:	40010400 	.word	0x40010400

08000788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	887b      	ldrh	r3, [r7, #2]
 800079a:	4013      	ands	r3, r2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e001      	b.n	80007aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	460b      	mov	r3, r1
 80007c0:	807b      	strh	r3, [r7, #2]
 80007c2:	4613      	mov	r3, r2
 80007c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c6:	787b      	ldrb	r3, [r7, #1]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007cc:	887a      	ldrh	r2, [r7, #2]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007d2:	e003      	b.n	80007dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	041a      	lsls	r2, r3, #16
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	611a      	str	r2, [r3, #16]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	405a      	eors	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60da      	str	r2, [r3, #12]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	4013      	ands	r3, r2
 800081a:	2b00      	cmp	r3, #0
 800081c:	d006      	beq.n	800082c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	4618      	mov	r0, r3
 8000828:	f006 f832 	bl	8006890 <HAL_GPIO_EXTI_Callback>
  }
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40010400 	.word	0x40010400

08000838 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af06      	add	r7, sp, #24
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e0ca      	b.n	80009e4 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f006 fa40 	bl	8006ce8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2203      	movs	r2, #3
 800086c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fa43 	bl	8002d00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	687e      	ldr	r6, [r7, #4]
 8000882:	466d      	mov	r5, sp
 8000884:	f106 0410 	add.w	r4, r6, #16
 8000888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	602b      	str	r3, [r5, #0]
 8000890:	1d33      	adds	r3, r6, #4
 8000892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f002 fa09 	bl	8002cac <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fa49 	bl	8002d38 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e037      	b.n	800091c <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	4413      	add	r3, r2
 80008b4:	3329      	adds	r3, #41	; 0x29
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	4413      	add	r3, r2
 80008c6:	3328      	adds	r3, #40	; 0x28
 80008c8:	460a      	mov	r2, r1
 80008ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	b299      	uxth	r1, r3
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	4413      	add	r3, r2
 80008d8:	3334      	adds	r3, #52	; 0x34
 80008da:	460a      	mov	r2, r1
 80008dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	015b      	lsls	r3, r3, #5
 80008e4:	4413      	add	r3, r2
 80008e6:	332b      	adds	r3, #43	; 0x2b
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	015b      	lsls	r3, r3, #5
 80008f2:	4413      	add	r3, r2
 80008f4:	3338      	adds	r3, #56	; 0x38
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	015b      	lsls	r3, r3, #5
 8000900:	4413      	add	r3, r2
 8000902:	333c      	adds	r3, #60	; 0x3c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3302      	adds	r3, #2
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3301      	adds	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b0e      	cmp	r3, #14
 8000920:	d9c4      	bls.n	80008ac <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	e03c      	b.n	80009a2 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	015b      	lsls	r3, r3, #5
 800092e:	4413      	add	r3, r2
 8000930:	f203 2329 	addw	r3, r3, #553	; 0x229
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	015b      	lsls	r3, r3, #5
 8000942:	4413      	add	r3, r2
 8000944:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000948:	460a      	mov	r2, r1
 800094a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	b299      	uxth	r1, r3
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	015b      	lsls	r3, r3, #5
 8000956:	4413      	add	r3, r2
 8000958:	3334      	adds	r3, #52	; 0x34
 800095a:	460a      	mov	r2, r1
 800095c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	015b      	lsls	r3, r3, #5
 8000964:	4413      	add	r3, r2
 8000966:	f203 232b 	addw	r3, r3, #555	; 0x22b
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	015b      	lsls	r3, r3, #5
 8000974:	4413      	add	r3, r2
 8000976:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	4413      	add	r3, r2
 8000986:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3312      	adds	r3, #18
 8000994:	015b      	lsls	r3, r3, #5
 8000996:	4413      	add	r3, r2
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b0e      	cmp	r3, #14
 80009a6:	d9bf      	bls.n	8000928 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	687e      	ldr	r6, [r7, #4]
 80009b0:	466d      	mov	r5, sp
 80009b2:	f106 0410 	add.w	r4, r6, #16
 80009b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	602b      	str	r3, [r5, #0]
 80009be:	1d33      	adds	r3, r6, #4
 80009c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c2:	6838      	ldr	r0, [r7, #0]
 80009c4:	f002 f9c4 	bl	8002d50 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 f9ae 	bl	8003d3e <USB_DevDisconnect>
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ec <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d101      	bne.n	8000a02 <HAL_PCD_Start+0x16>
 80009fe:	2302      	movs	r3, #2
 8000a00:	e016      	b.n	8000a30 <HAL_PCD_Start+0x44>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f006 fc98 	bl	8007342 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 f987 	bl	8003d2a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 f953 	bl	8002ccc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 f984 	bl	8003d52 <USB_ReadInterrupts>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a54:	d102      	bne.n	8000a5c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 fad8 	bl	800100c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 f976 	bl	8003d52 <USB_ReadInterrupts>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a70:	d112      	bne.n	8000a98 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	6812      	ldr	r2, [r2, #0]
 8000a7a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a84:	b292      	uxth	r2, r2
 8000a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f006 f9a1 	bl	8006dd2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000a90:	2100      	movs	r1, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f8d2 	bl	8000c3c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 f958 	bl	8003d52 <USB_ReadInterrupts>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aac:	d10b      	bne.n	8000ac6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000aba:	b292      	uxth	r2, r2
 8000abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ac0:	b292      	uxth	r2, r2
 8000ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 f941 	bl	8003d52 <USB_ReadInterrupts>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ada:	d10b      	bne.n	8000af4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000aee:	b292      	uxth	r2, r2
 8000af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f92a 	bl	8003d52 <USB_ReadInterrupts>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b08:	d126      	bne.n	8000b58 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000b16:	b292      	uxth	r2, r2
 8000b18:	f022 0204 	bic.w	r2, r2, #4
 8000b1c:	b292      	uxth	r2, r2
 8000b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000b2e:	b292      	uxth	r2, r2
 8000b30:	f022 0208 	bic.w	r2, r2, #8
 8000b34:	b292      	uxth	r2, r2
 8000b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f006 f986 	bl	8006e4c <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b52:	b292      	uxth	r2, r2
 8000b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 f8f8 	bl	8003d52 <USB_ReadInterrupts>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b6c:	d131      	bne.n	8000bd2 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000b7a:	b292      	uxth	r2, r2
 8000b7c:	f042 0208 	orr.w	r2, r2, #8
 8000b80:	b292      	uxth	r2, r2
 8000b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000b92:	b292      	uxth	r2, r2
 8000b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8000baa:	b292      	uxth	r2, r2
 8000bac:	f042 0204 	orr.w	r2, r2, #4
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 f8c9 	bl	8003d52 <USB_ReadInterrupts>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bca:	d002      	beq.n	8000bd2 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f006 f923 	bl	8006e18 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 f8bb 	bl	8003d52 <USB_ReadInterrupts>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be6:	d10e      	bne.n	8000c06 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000bf4:	b292      	uxth	r2, r2
 8000bf6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bfa:	b292      	uxth	r2, r2
 8000bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f006 f8d8 	bl	8006db6 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 f8a1 	bl	8003d52 <USB_ReadInterrupts>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c1a:	d10b      	bne.n	8000c34 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000c28:	b292      	uxth	r2, r2
 8000c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_PCD_SetAddress+0x1a>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e013      	b.n	8000c7e <HAL_PCD_SetAddress+0x42>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	78fa      	ldrb	r2, [r7, #3]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f848 	bl	8003d04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	4611      	mov	r1, r2
 8000c92:	461a      	mov	r2, r3
 8000c94:	4603      	mov	r3, r0
 8000c96:	70fb      	strb	r3, [r7, #3]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	803b      	strh	r3, [r7, #0]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	da08      	bge.n	8000cc2 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	3328      	adds	r3, #40	; 0x28
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e008      	b.n	8000cd4 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	09db      	lsrs	r3, r3, #7
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8000cf0:	883a      	ldrh	r2, [r7, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	78ba      	ldrb	r2, [r7, #2]
 8000cfa:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_PCD_EP_Open+0x84>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e00e      	b.n	8000d28 <HAL_PCD_EP_Open+0xa2>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68f9      	ldr	r1, [r7, #12]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 f83d 	bl	8002d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8000d26:	7afb      	ldrb	r3, [r7, #11]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	da08      	bge.n	8000d5a <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	3328      	adds	r3, #40	; 0x28
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e008      	b.n	8000d6c <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d60:	015b      	lsls	r3, r3, #5
 8000d62:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	09db      	lsrs	r3, r3, #7
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <HAL_PCD_EP_Close+0x66>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e00e      	b.n	8000db4 <HAL_PCD_EP_Close+0x84>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68f9      	ldr	r1, [r7, #12]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fab9 	bl	800331c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dd6:	015b      	lsls	r3, r3, #5
 8000dd8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2200      	movs	r2, #0
 8000df8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8000e06:	7afb      	ldrb	r3, [r7, #11]
 8000e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d106      	bne.n	8000e1e <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6979      	ldr	r1, [r7, #20]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fc08 	bl	800362c <USB_EPStartXfer>
 8000e1c:	e005      	b.n	8000e2a <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6979      	ldr	r1, [r7, #20]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fc01 	bl	800362c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	3312      	adds	r3, #18
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3304      	adds	r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e78:	015b      	lsls	r3, r3, #5
 8000e7a:	3328      	adds	r3, #40	; 0x28
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2201      	movs	r2, #1
 8000e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8000e9a:	7afb      	ldrb	r3, [r7, #11]
 8000e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8000ea6:	7afb      	ldrb	r3, [r7, #11]
 8000ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d106      	bne.n	8000ebe <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6979      	ldr	r1, [r7, #20]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fbb8 	bl	800362c <USB_EPStartXfer>
 8000ebc:	e005      	b.n	8000eca <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6979      	ldr	r1, [r7, #20]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 fbb1 	bl	800362c <USB_EPStartXfer>
  }

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8000ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	da08      	bge.n	8000efe <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ef2:	015b      	lsls	r3, r3, #5
 8000ef4:	3328      	adds	r3, #40	; 0x28
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e006      	b.n	8000f0c <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	015b      	lsls	r3, r3, #5
 8000f02:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	09db      	lsrs	r3, r3, #7
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_PCD_EP_SetStall+0x68>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e01c      	b.n	8000f76 <HAL_PCD_EP_SetStall+0xa2>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68f9      	ldr	r1, [r7, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fdf0 	bl	8003b30 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d108      	bne.n	8000f6c <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f002 ff04 	bl	8003d74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8000f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da08      	bge.n	8000fa8 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f9c:	015b      	lsls	r3, r3, #5
 8000f9e:	3328      	adds	r3, #40	; 0x28
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e006      	b.n	8000fb6 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	015b      	lsls	r3, r3, #5
 8000fac:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	09db      	lsrs	r3, r3, #7
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_PCD_EP_ClrStall+0x68>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e00e      	b.n	8001004 <HAL_PCD_EP_ClrStall+0x86>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68f9      	ldr	r1, [r7, #12]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 fdfb 	bl	8003bf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	83fb      	strh	r3, [r7, #30]
  uint8_t epindex = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	75fb      	strb	r3, [r7, #23]
  __IO uint16_t wIstr = 0;  
 8001020:	2300      	movs	r3, #0
 8001022:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001028:	e308      	b.n	800163c <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	75fb      	strb	r3, [r7, #23]
    
    if (epindex == 0)
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 812a 	bne.w	8001292 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	b29b      	uxth	r3, r3
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	d14d      	bne.n	80010e6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800105a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800105e:	b29b      	uxth	r3, r3
 8001060:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3328      	adds	r3, #40	; 0x28
 8001066:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001070:	b29b      	uxth	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	3302      	adds	r3, #2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	4413      	add	r3, r2
 8001086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	441a      	add	r2, r3
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f005 fe6e 	bl	8006d88 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 82c1 	beq.w	800163c <PCD_EP_ISR_Handler+0x630>
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 82bc 	bne.w	800163c <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	b292      	uxth	r2, r2
 80010d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010e4:	e2aa      	b.n	800163c <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80010ec:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80010f8:	89bb      	ldrh	r3, [r7, #12]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001100:	2b00      	cmp	r3, #0
 8001102:	d031      	beq.n	8001168 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	3306      	adds	r3, #6
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	4413      	add	r3, r2
 8001122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	889a      	ldrh	r2, [r3, #4]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	b29b      	uxth	r3, r3
 8001146:	f002 fe66 	bl	8003e16 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b299      	uxth	r1, r3
 8001156:	f640 738f 	movw	r3, #3983	; 0xf8f
 800115a:	400b      	ands	r3, r1
 800115c:	b29b      	uxth	r3, r3
 800115e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f005 fde7 	bl	8006d34 <HAL_PCD_SetupStageCallback>
 8001166:	e269      	b.n	800163c <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	b29b      	uxth	r3, r3
 800116c:	b21b      	sxth	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	f280 8264 	bge.w	800163c <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b299      	uxth	r1, r3
 8001180:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001184:	400b      	ands	r3, r1
 8001186:	b29b      	uxth	r3, r3
 8001188:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001192:	b29b      	uxth	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	3306      	adds	r3, #6
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d011      	beq.n	80011e4 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6959      	ldr	r1, [r3, #20]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	889a      	ldrh	r2, [r3, #4]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f002 fe20 	bl	8003e16 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	441a      	add	r2, r3
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011e4:	2100      	movs	r1, #0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f005 fdb6 	bl	8006d58 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3306      	adds	r3, #6
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b3e      	cmp	r3, #62	; 0x3e
 800120c:	d918      	bls.n	8001240 <PCD_EP_ISR_Handler+0x234>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	83bb      	strh	r3, [r7, #28]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <PCD_EP_ISR_Handler+0x21c>
 8001222:	8bbb      	ldrh	r3, [r7, #28]
 8001224:	3b01      	subs	r3, #1
 8001226:	83bb      	strh	r3, [r7, #28]
 8001228:	8bbb      	ldrh	r3, [r7, #28]
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	b29b      	uxth	r3, r3
 800122e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e012      	b.n	8001266 <PCD_EP_ISR_Handler+0x25a>
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	83bb      	strh	r3, [r7, #28]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <PCD_EP_ISR_Handler+0x24e>
 8001254:	8bbb      	ldrh	r3, [r7, #28]
 8001256:	3301      	adds	r3, #1
 8001258:	83bb      	strh	r3, [r7, #28]
 800125a:	8bbb      	ldrh	r3, [r7, #28]
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001276:	b29c      	uxth	r4, r3
 8001278:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800127c:	b29c      	uxth	r4, r3
 800127e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001282:	b29c      	uxth	r4, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b98      	ldr	r3, [pc, #608]	; (80014ec <PCD_EP_ISR_Handler+0x4e0>)
 800128a:	4323      	orrs	r3, r4
 800128c:	b29b      	uxth	r3, r3
 800128e:	8013      	strh	r3, [r2, #0]
 8001290:	e1d4      	b.n	800163c <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012a4:	89bb      	ldrh	r3, [r7, #12]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f280 80d0 	bge.w	8001450 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	441a      	add	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b299      	uxth	r1, r3
 80012cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012d0:	400b      	ands	r3, r1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	7a9b      	ldrb	r3, [r3, #10]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d122      	bne.n	8001332 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	3306      	adds	r3, #6
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4413      	add	r3, r2
 800130a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001316:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001318:	8bfb      	ldrh	r3, [r7, #30]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d073      	beq.n	8001406 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6959      	ldr	r1, [r3, #20]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	889a      	ldrh	r2, [r3, #4]
 800132a:	8bfb      	ldrh	r3, [r7, #30]
 800132c:	f002 fd73 	bl	8003e16 <USB_ReadPMA>
 8001330:	e069      	b.n	8001406 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d022      	beq.n	8001392 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	3302      	adds	r3, #2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001376:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001378:	8bfb      	ldrh	r3, [r7, #30]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d02b      	beq.n	80013d6 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6959      	ldr	r1, [r3, #20]
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	88da      	ldrh	r2, [r3, #6]
 800138a:	8bfb      	ldrh	r3, [r7, #30]
 800138c:	f002 fd43 	bl	8003e16 <USB_ReadPMA>
 8001390:	e021      	b.n	80013d6 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	3306      	adds	r3, #6
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013bc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80013be:	8bfb      	ldrh	r3, [r7, #30]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6959      	ldr	r1, [r3, #20]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	891a      	ldrh	r2, [r3, #8]
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	f002 fd20 	bl	8003e16 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	441a      	add	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b299      	uxth	r1, r3
 80013f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80013fa:	400b      	ands	r3, r1
 80013fc:	b299      	uxth	r1, r3
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <PCD_EP_ISR_Handler+0x4e4>)
 8001400:	430b      	orrs	r3, r1
 8001402:	b29b      	uxth	r3, r3
 8001404:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	8bfb      	ldrh	r3, [r7, #30]
 800140c:	441a      	add	r2, r3
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	441a      	add	r2, r3
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <PCD_EP_ISR_Handler+0x424>
 8001426:	8bfa      	ldrh	r2, [r7, #30]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d206      	bcs.n	800143e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f005 fc8e 	bl	8006d58 <HAL_PCD_DataOutStageCallback>
 800143c:	e008      	b.n	8001450 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	7819      	ldrb	r1, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fcb6 	bl	8000dbc <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80ef 	beq.w	800163c <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	015b      	lsls	r3, r3, #5
 8001462:	3328      	adds	r3, #40	; 0x28
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800148a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800148e:	b29b      	uxth	r3, r3
 8001490:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	7a9b      	ldrb	r3, [r3, #10]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d12c      	bne.n	80014f4 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	3302      	adds	r3, #2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8083 	beq.w	80015d8 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6959      	ldr	r1, [r3, #20]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	889a      	ldrh	r2, [r3, #4]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f002 fc51 	bl	8003d8a <USB_WritePMA>
 80014e8:	e076      	b.n	80015d8 <PCD_EP_ISR_Handler+0x5cc>
 80014ea:	bf00      	nop
 80014ec:	ffff8080 	.word	0xffff8080
 80014f0:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d026      	beq.n	800155c <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	3302      	adds	r3, #2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d031      	beq.n	80015a8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6959      	ldr	r1, [r3, #20]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	88da      	ldrh	r2, [r3, #6]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	b29b      	uxth	r3, r3
 8001556:	f002 fc18 	bl	8003d8a <USB_WritePMA>
 800155a:	e025      	b.n	80015a8 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	3306      	adds	r3, #6
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00a      	beq.n	80015a8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6959      	ldr	r1, [r3, #20]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	891a      	ldrh	r2, [r3, #8]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f002 fbf1 	bl	8003d8a <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	441a      	add	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b299      	uxth	r1, r3
 80015c8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80015cc:	400b      	ands	r3, r1
 80015ce:	b299      	uxth	r1, r3
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <PCD_EP_ISR_Handler+0x650>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	3302      	adds	r3, #2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	441a      	add	r2, r3
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d106      	bne.n	800162a <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f005 fbb0 	bl	8006d88 <HAL_PCD_DataInStageCallback>
 8001628:	e008      	b.n	800163c <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fc11 	bl	8000e5e <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	81fa      	strh	r2, [r7, #14]
 800164a:	b21b      	sxth	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f6ff acec 	blt.w	800102a <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3724      	adds	r7, #36	; 0x24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	ffffc080 	.word	0xffffc080

08001660 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	817b      	strh	r3, [r7, #10]
 800166e:	4613      	mov	r3, r2
 8001670:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	3328      	adds	r3, #40	; 0x28
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e006      	b.n	80016a0 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80016a0:	893b      	ldrh	r3, [r7, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2200      	movs	r2, #0
 80016aa:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	809a      	strh	r2, [r3, #4]
 80016b4:	e00b      	b.n	80016ce <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2201      	movs	r2, #1
 80016ba:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8087 	beq.w	8001804 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016f6:	4b92      	ldr	r3, [pc, #584]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d00c      	beq.n	800171c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001702:	4b8f      	ldr	r3, [pc, #572]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x58>
 800170e:	4b8c      	ldr	r3, [pc, #560]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d10b      	bne.n	8001734 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d06c      	beq.n	8001802 <HAL_RCC_OscConfig+0x126>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d168      	bne.n	8001802 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e22d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x70>
 800173e:	4a80      	ldr	r2, [pc, #512]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001740:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e02e      	b.n	80017aa <HAL_RCC_OscConfig+0xce>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x92>
 8001754:	4a7a      	ldr	r2, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001756:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4a77      	ldr	r2, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e01d      	b.n	80017aa <HAL_RCC_OscConfig+0xce>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0xb6>
 8001778:	4a71      	ldr	r2, [pc, #452]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800177a:	4b71      	ldr	r3, [pc, #452]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001786:	4b6e      	ldr	r3, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0xce>
 8001792:	4a6b      	ldr	r2, [pc, #428]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4a68      	ldr	r2, [pc, #416]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 80017a0:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d013      	beq.n	80017da <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7fe fd0b 	bl	80001cc <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ba:	f7fe fd07 	bl	80001cc <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1e1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0xde>
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7fe fcf7 	bl	80001cc <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e2:	f7fe fcf3 	bl	80001cc <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1cd      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x106>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d063      	beq.n	80018d8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00b      	beq.n	8001834 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d11c      	bne.n	8001862 <HAL_RCC_OscConfig+0x186>
 8001828:	4b45      	ldr	r3, [pc, #276]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d116      	bne.n	8001862 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_OscConfig+0x170>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e1a1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	493c      	ldr	r1, [pc, #240]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001860:	e03a      	b.n	80018d8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d020      	beq.n	80018ac <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x268>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7fe fcac 	bl	80001cc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001878:	f7fe fca8 	bl	80001cc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e182      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	492a      	ldr	r1, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e015      	b.n	80018d8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x268>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7fe fc8b 	bl	80001cc <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ba:	f7fe fc87 	bl	80001cc <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e161      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d039      	beq.n	8001958 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d019      	beq.n	8001920 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe fc6b 	bl	80001cc <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7fe fc67 	bl	80001cc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e141      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_RCC_OscConfig+0x264>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001918:	2001      	movs	r0, #1
 800191a:	f000 facb 	bl	8001eb4 <RCC_Delay>
 800191e:	e01b      	b.n	8001958 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7fe fc51 	bl	80001cc <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e00e      	b.n	800194c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7fe fc4d 	bl	80001cc <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d907      	bls.n	800194c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e127      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
 8001940:	40021000 	.word	0x40021000
 8001944:	42420000 	.word	0x42420000
 8001948:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b92      	ldr	r3, [pc, #584]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ea      	bne.n	800192e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a6 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4a88      	ldr	r2, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001978:	4b87      	ldr	r3, [pc, #540]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <HAL_RCC_OscConfig+0x4c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x4c0>)
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <HAL_RCC_OscConfig+0x4c0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7fe fc0f 	bl	80001cc <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7fe fc0b 	bl	80001cc <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0e5      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x30a>
 80019d8:	4a6f      	ldr	r2, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 80019da:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e02d      	b.n	8001a42 <HAL_RCC_OscConfig+0x366>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x32c>
 80019ee:	4a6a      	ldr	r2, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 80019f0:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	4a67      	ldr	r2, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x366>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x34e>
 8001a10:	4a61      	ldr	r2, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6213      	str	r3, [r2, #32]
 8001a1c:	4a5e      	ldr	r2, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x366>
 8001a2a:	4a5b      	ldr	r2, [pc, #364]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a38:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe fbbf 	bl	80001cc <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7fe fbbb 	bl	80001cc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e093      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ee      	beq.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7fe fba9 	bl	80001cc <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7fe fba5 	bl	80001cc <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e07d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa6:	4a3c      	ldr	r2, [pc, #240]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d069      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d061      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d146      	bne.n	8001b5c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fb7a 	bl	80001cc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe fb76 	bl	80001cc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e050      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b02:	d108      	bne.n	8001b16 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b04:	4924      	ldr	r1, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b16:	4820      	ldr	r0, [pc, #128]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a19      	ldr	r1, [r3, #32]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7fe fb4a 	bl	80001cc <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe fb46 	bl	80001cc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e020      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x460>
 8001b5a:	e018      	b.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7fe fb33 	bl	80001cc <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7fe fb2f 	bl	80001cc <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e009      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x4bc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x48e>
 8001b88:	e001      	b.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42420060 	.word	0x42420060

08001ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bb2:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0207 	and.w	r2, r3, #7
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d210      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc0:	496e      	ldr	r1, [pc, #440]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001bc2:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0207 	and.w	r2, r3, #7
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0c8      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bee:	4964      	ldr	r1, [pc, #400]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d06a      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c14:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0a7      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2c:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e09b      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e093      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4c:	494c      	ldr	r1, [pc, #304]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5e:	f7fe fab5 	bl	80001cc <HAL_GetTick>
 8001c62:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7fe faad 	bl	80001cc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e077      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xca>
 8001c90:	e027      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d11d      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe fa96 	bl	80001cc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e060      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
 8001cbe:	e010      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe fa84 	bl	80001cc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04e      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0207 	and.w	r2, r3, #7
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d910      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf0:	4922      	ldr	r1, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCC_ClockConfig+0x1d8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e030      	b.n	8001d74 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1e:	4918      	ldr	r1, [pc, #96]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3c:	4910      	ldr	r1, [pc, #64]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d50:	f000 f81c 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d54:	4601      	mov	r1, r0
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1dc>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_ClockConfig+0x1e0>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	fa21 f303 	lsr.w	r3, r1, r3
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_RCC_ClockConfig+0x1e4>)
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d6c:	2005      	movs	r0, #5
 8001d6e:	f7fe fa03 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080076dc 	.word	0x080076dc
 8001d88:	2000013c 	.word	0x2000013c

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b490      	push	{r4, r7}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d94:	1d3c      	adds	r4, r7, #4
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d002      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dca:	e02d      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dce:	623b      	str	r3, [r7, #32]
      break;
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	0c9b      	lsrs	r3, r3, #18
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001de4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c5b      	lsrs	r3, r3, #17
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dfe:	4413      	add	r3, r2
 8001e00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e04:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	e004      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	623b      	str	r3, [r7, #32]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2a:	623b      	str	r3, [r7, #32]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc90      	pop	{r4, r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	08007598 	.word	0x08007598
 8001e40:	080075a8 	.word	0x080075a8
 8001e44:	40021000 	.word	0x40021000
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	003d0900 	.word	0x003d0900

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	2000013c 	.word	0x2000013c

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff2 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	080076ec 	.word	0x080076ec

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e94:	4601      	mov	r1, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0adb      	lsrs	r3, r3, #11
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080076ec 	.word	0x080076ec

08001eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <RCC_Delay+0x34>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <RCC_Delay+0x38>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a5b      	lsrs	r3, r3, #9
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ed0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	60fa      	str	r2, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <RCC_Delay+0x1c>
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000013c 	.word	0x2000013c
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d07d      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f26:	61d3      	str	r3, [r2, #28]
 8001f28:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f34:	2301      	movs	r3, #1
 8001f36:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d118      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f44:	4a43      	ldr	r2, [pc, #268]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f50:	f7fe f93c 	bl	80001cc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	e008      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe f938 	bl	80001cc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e06d      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02e      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d027      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe f907 	bl	80001cc <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe f903 	bl	80001cc <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e036      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fe4:	491a      	ldr	r1, [pc, #104]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002032:	4907      	ldr	r1, [pc, #28]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	42420440 	.word	0x42420440

0800205c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_SPI_Transmit+0x26>
 800207e:	2302      	movs	r3, #2
 8002080:	e123      	b.n	80022ca <HAL_SPI_Transmit+0x26e>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800208a:	f7fe f89f 	bl	80001cc <HAL_GetTick>
 800208e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d002      	beq.n	80020a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800209c:	2302      	movs	r3, #2
 800209e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020a0:	e10a      	b.n	80022b8 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_SPI_Transmit+0x52>
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020b2:	e101      	b.n	80022b8 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fa:	d107      	bne.n	800210c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d007      	beq.n	800212a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002132:	d147      	bne.n	80021c4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_SPI_Transmit+0xea>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d138      	bne.n	80021b8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3302      	adds	r3, #2
 8002154:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002164:	e028      	b.n	80021b8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b02      	cmp	r3, #2
 8002172:	d10f      	bne.n	8002194 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	8812      	ldrh	r2, [r2, #0]
 800217c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3302      	adds	r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	86da      	strh	r2, [r3, #54]	; 0x36
 8002192:	e011      	b.n	80021b8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_SPI_Transmit+0x156>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d00a      	beq.n	80021b8 <HAL_SPI_Transmit+0x15c>
 80021a2:	f7fe f813 	bl	80001cc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d302      	bcc.n	80021b8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021b6:	e07f      	b.n	80022b8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1d1      	bne.n	8002166 <HAL_SPI_Transmit+0x10a>
 80021c2:	e048      	b.n	8002256 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_SPI_Transmit+0x17a>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d13a      	bne.n	800224c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	330c      	adds	r3, #12
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021f6:	e029      	b.n	800224c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d110      	bne.n	8002228 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	86da      	strh	r2, [r3, #54]	; 0x36
 8002226:	e011      	b.n	800224c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_SPI_Transmit+0x1ea>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d00a      	beq.n	800224c <HAL_SPI_Transmit+0x1f0>
 8002236:	f7fd ffc9 	bl	80001cc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	77fb      	strb	r3, [r7, #31]
          goto error;
 800224a:	e035      	b.n	80022b8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1d0      	bne.n	80021f8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	2102      	movs	r1, #2
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9e2 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002270:	e022      	b.n	80022b8 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	6839      	ldr	r1, [r7, #0]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa40 	bl	80026fc <SPI_CheckFlag_BSY>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800228c:	e014      	b.n	80022b8 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08c      	sub	sp, #48	; 0x30
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x32>
 8002300:	2302      	movs	r3, #2
 8002302:	e181      	b.n	8002608 <HAL_SPI_TransmitReceive+0x336>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800230c:	f7fd ff5e 	bl	80001cc <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002318:	b2db      	uxtb	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d00e      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x74>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232e:	d106      	bne.n	800233e <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_TransmitReceive+0x6c>
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d003      	beq.n	8002346 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002344:	e156      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x86>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x86>
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800235e:	e149      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d103      	bne.n	8002374 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	887a      	ldrh	r2, [r7, #2]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d007      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d0:	d171      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x112>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d15d      	bne.n	80024a0 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3302      	adds	r3, #2
 80023f2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002402:	e04d      	b.n	80024a0 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01c      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x172>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x172>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d110      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	8812      	ldrh	r2, [r2, #0]
 800242a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3302      	adds	r3, #2
 8002430:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <HAL_SPI_TransmitReceive+0x1ae>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d111      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3302      	adds	r3, #2
 800246c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800247c:	2301      	movs	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d00b      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x1ce>
 8002488:	f7fd fea0 	bl	80001cc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	429a      	cmp	r2, r3
 8002496:	d303      	bcc.n	80024a0 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800249e:	e0a9      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ac      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x132>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1a7      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x132>
 80024b4:	e071      	b.n	800259a <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_SPI_TransmitReceive+0x1f6>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d15e      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e8:	e04d      	b.n	8002586 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01d      	beq.n	800252c <HAL_SPI_TransmitReceive+0x25a>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <HAL_SPI_TransmitReceive+0x25a>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d111      	bne.n	800252c <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f103 020c 	add.w	r2, r3, #12
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1c59      	adds	r1, r3, #1
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d017      	beq.n	8002566 <HAL_SPI_TransmitReceive+0x294>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d110      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	68d2      	ldr	r2, [r2, #12]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002562:	2301      	movs	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d00b      	beq.n	8002586 <HAL_SPI_TransmitReceive+0x2b4>
 800256e:	f7fd fe2d 	bl	80001cc <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	429a      	cmp	r2, r3
 800257c:	d303      	bcc.n	8002586 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002584:	e036      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ac      	bne.n	80024ea <HAL_SPI_TransmitReceive+0x218>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1a7      	bne.n	80024ea <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	2201      	movs	r2, #1
 80025a2:	2102      	movs	r1, #2
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f840 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80025b6:	e01d      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f89d 	bl	80026fc <SPI_CheckFlag_BSY>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025d4:	e00e      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002608:	4618      	mov	r0, r3
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800261e:	b2db      	uxtb	r3, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002638:	e04d      	b.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d049      	beq.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002648:	f7fd fdc0 	bl	80001cc <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad2      	subs	r2, r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d33e      	bcc.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	6852      	ldr	r2, [r2, #4]
 8002662:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002666:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002670:	d111      	bne.n	8002696 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267a:	d004      	beq.n	8002686 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002684:	d107      	bne.n	8002696 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002694:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269e:	d110      	bne.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80026ae:	400b      	ands	r3, r1
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e00e      	b.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d101      	bne.n	80026ea <SPI_WaitFlagStateUntilTimeout+0xc0>
 80026e6:	2201      	movs	r2, #1
 80026e8:	e000      	b.n	80026ec <SPI_WaitFlagStateUntilTimeout+0xc2>
 80026ea:	2200      	movs	r2, #0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d1a3      	bne.n	800263a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff ff89 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e000      	b.n	8002730 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e056      	b.n	80027f8 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f004 f92d 	bl	80069bc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002778:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6851      	ldr	r1, [r2, #4]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6892      	ldr	r2, [r2, #8]
 8002786:	4311      	orrs	r1, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68d2      	ldr	r2, [r2, #12]
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6912      	ldr	r2, [r2, #16]
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6952      	ldr	r2, [r2, #20]
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6992      	ldr	r2, [r2, #24]
 800279e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	69d2      	ldr	r2, [r2, #28]
 80027a8:	4311      	orrs	r1, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a12      	ldr	r2, [r2, #32]
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6992      	ldr	r2, [r2, #24]
 80027c0:	0c12      	lsrs	r2, r2, #16
 80027c2:	f002 0104 	and.w	r1, r2, #4
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027d6:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	69d2      	ldr	r2, [r2, #28]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e6:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e03f      	b.n	8002892 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f004 f900 	bl	8006a2c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002842:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f919 	bl	8002a7c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	6912      	ldr	r2, [r2, #16]
 8002854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	6952      	ldr	r2, [r2, #20]
 8002864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002868:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	68d2      	ldr	r2, [r2, #12]
 8002874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002878:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b088      	sub	sp, #32
 800289e:	af02      	add	r7, sp, #8
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	f040 8090 	bne.w	80029dc <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_UART_Receive+0x2e>
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e088      	b.n	80029de <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_UART_Receive+0x40>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e081      	b.n	80029de <HAL_UART_Receive+0x144>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2222      	movs	r2, #34	; 0x22
 80028ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028f0:	f7fd fc6c 	bl	80001cc <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8002902:	e05c      	b.n	80029be <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d12b      	bne.n	8002974 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	2120      	movs	r1, #32
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f85d 	bl	80029e6 <UART_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e053      	b.n	80029de <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	b29a      	uxth	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3302      	adds	r3, #2
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	e030      	b.n	80029be <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	b29b      	uxth	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	b29a      	uxth	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3301      	adds	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	e024      	b.n	80029be <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	2120      	movs	r1, #32
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f831 	bl	80029e6 <UART_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e027      	b.n	80029de <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	60ba      	str	r2, [r7, #8]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	6852      	ldr	r2, [r2, #4]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e00a      	b.n	80029be <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	60ba      	str	r2, [r7, #8]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	6852      	ldr	r2, [r2, #4]
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d19d      	bne.n	8002904 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80029f6:	e02c      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d028      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a06:	f7fd fbe1 	bl	80001cc <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d91d      	bls.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68d2      	ldr	r2, [r2, #12]
 8002a20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a24:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	6952      	ldr	r2, [r2, #20]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e00f      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0c3      	beq.n	80029f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	6912      	ldr	r2, [r2, #16]
 8002a92:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ac2:	f023 030c 	bic.w	r3, r3, #12
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	6952      	ldr	r2, [r2, #20]
 8002ad6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6992      	ldr	r2, [r2, #24]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <UART_SetConfig+0x228>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d16b      	bne.n	8002bc4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681c      	ldr	r4, [r3, #0]
 8002af0:	f7ff f9cc 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	011d      	lsls	r5, r3, #4
 8002b14:	f7ff f9ba 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b2e:	f7ff f9ad 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009a      	lsls	r2, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	4a57      	ldr	r2, [pc, #348]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2264      	movs	r2, #100	; 0x64
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	1af3      	subs	r3, r6, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	; 0x32
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	441d      	add	r5, r3
 8002b6a:	f7ff f98f 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b84:	f7ff f982 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4a42      	ldr	r2, [pc, #264]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	2264      	movs	r2, #100	; 0x64
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	1af3      	subs	r3, r6, r3
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	3332      	adds	r3, #50	; 0x32
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	442b      	add	r3, r5
 8002bc0:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002bc2:	e06a      	b.n	8002c9a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	f7ff f94c 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	011d      	lsls	r5, r3, #4
 8002bec:	f7ff f93a 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009a      	lsls	r2, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c06:	f7ff f92d 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009a      	lsls	r2, r3, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2264      	movs	r2, #100	; 0x64
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	1af3      	subs	r3, r6, r3
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	3332      	adds	r3, #50	; 0x32
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c40:	441d      	add	r5, r3
 8002c42:	f7ff f90f 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009a      	lsls	r2, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c5c:	f7ff f902 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2264      	movs	r2, #100	; 0x64
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	1af3      	subs	r3, r6, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <UART_SetConfig+0x22c>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	442b      	add	r3, r5
 8002c98:	60a3      	str	r3, [r4, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	51eb851f 	.word	0x51eb851f

08002cac <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002cac:	b084      	sub	sp, #16
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	f107 0014 	add.w	r0, r7, #20
 8002cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	b004      	add	sp, #16
 8002cca:	4770      	bx	lr

08002ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002cd8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cdc:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002d0c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8002d10:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d50:	b084      	sub	sp, #16
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	f107 0014 	add.w	r0, r7, #20
 8002d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffa2 	bl	8002ccc <USB_EnableGlobalInt>
    
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d94:	b004      	add	sp, #16
 8002d96:	4770      	bx	lr

08002d98 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d98:	b490      	push	{r4, r7}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	78db      	ldrb	r3, [r3, #3]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d85f      	bhi.n	8002e6a <USB_ActivateEndpoint+0xd2>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <USB_ActivateEndpoint+0x18>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002e3f 	.word	0x08002e3f
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002e13 	.word	0x08002e13
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]
    break;
 8002dea:	e03f      	b.n	8002e6c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]
    break;
 8002e10:	e02c      	b.n	8002e6c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	441a      	add	r2, r3
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	8013      	strh	r3, [r2, #0]
    break;
 8002e3c:	e016      	b.n	8002e6c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	8013      	strh	r3, [r2, #0]
    break;
 8002e68:	e000      	b.n	8002e6c <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8002e6a:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b299      	uxth	r1, r3
 8002e84:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002e88:	400b      	ands	r3, r1
 8002e8a:	b299      	uxth	r1, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	430b      	orrs	r3, r1
 8002e94:	b299      	uxth	r1, r3
 8002e96:	4b75      	ldr	r3, [pc, #468]	; (800306c <USB_ActivateEndpoint+0x2d4>)
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7a9b      	ldrb	r3, [r3, #10]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 80e8 	bne.w	8003078 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04c      	beq.n	8002f4a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	005a      	lsls	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ecc:	461a      	mov	r2, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	889b      	ldrh	r3, [r3, #4]
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <USB_ActivateEndpoint+0x180>
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b299      	uxth	r1, r3
 8002f08:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	4b57      	ldr	r3, [pc, #348]	; (8003070 <USB_ActivateEndpoint+0x2d8>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2e:	b29c      	uxth	r4, r3
 8002f30:	f084 0320 	eor.w	r3, r4, #32
 8002f34:	b29c      	uxth	r4, r3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	441a      	add	r2, r3
 8002f40:	4b4a      	ldr	r3, [pc, #296]	; (800306c <USB_ActivateEndpoint+0x2d4>)
 8002f42:	4323      	orrs	r3, r4
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	8013      	strh	r3, [r2, #0]
 8002f48:	e1d9      	b.n	80032fe <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	005a      	lsls	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f68:	461a      	mov	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	889b      	ldrh	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	3306      	adds	r3, #6
 8002f8a:	005a      	lsls	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9c:	d918      	bls.n	8002fd0 <USB_ActivateEndpoint+0x238>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	81fb      	strh	r3, [r7, #14]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <USB_ActivateEndpoint+0x220>
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	81fb      	strh	r3, [r7, #14]
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e012      	b.n	8002ff6 <USB_ActivateEndpoint+0x25e>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	81fb      	strh	r3, [r7, #14]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <USB_ActivateEndpoint+0x252>
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	81fb      	strh	r3, [r7, #14]
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	029b      	lsls	r3, r3, #10
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <USB_ActivateEndpoint+0x29c>
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b299      	uxth	r1, r3
 8003024:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003028:	400b      	ands	r3, r1
 800302a:	b299      	uxth	r1, r3
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <USB_ActivateEndpoint+0x2dc>)
 800302e:	430b      	orrs	r3, r1
 8003030:	b29b      	uxth	r3, r3
 8003032:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	b29c      	uxth	r4, r3
 800304c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003050:	b29c      	uxth	r4, r3
 8003052:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003056:	b29c      	uxth	r4, r3
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	4b02      	ldr	r3, [pc, #8]	; (800306c <USB_ActivateEndpoint+0x2d4>)
 8003064:	4323      	orrs	r3, r4
 8003066:	b29b      	uxth	r3, r3
 8003068:	8013      	strh	r3, [r2, #0]
 800306a:	e148      	b.n	80032fe <USB_ActivateEndpoint+0x566>
 800306c:	ffff8080 	.word	0xffff8080
 8003070:	ffff80c0 	.word	0xffff80c0
 8003074:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b299      	uxth	r1, r3
 8003090:	f640 630f 	movw	r3, #3599	; 0xe0f
 8003094:	400b      	ands	r3, r1
 8003096:	b299      	uxth	r1, r3
 8003098:	4b9c      	ldr	r3, [pc, #624]	; (800330c <USB_ActivateEndpoint+0x574>)
 800309a:	430b      	orrs	r3, r1
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	005a      	lsls	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030bc:	461a      	mov	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	88db      	ldrh	r3, [r3, #6]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	005a      	lsls	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e8:	461a      	mov	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	891b      	ldrh	r3, [r3, #8]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8083 	bne.w	8003206 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d013      	beq.n	800313e <USB_ActivateEndpoint+0x3a6>
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	441a      	add	r2, r3
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b299      	uxth	r1, r3
 800312e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003132:	400b      	ands	r3, r1
 8003134:	b299      	uxth	r1, r3
 8003136:	4b76      	ldr	r3, [pc, #472]	; (8003310 <USB_ActivateEndpoint+0x578>)
 8003138:	430b      	orrs	r3, r1
 800313a:	b29b      	uxth	r3, r3
 800313c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <USB_ActivateEndpoint+0x3e4>
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b299      	uxth	r1, r3
 800316c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003170:	400b      	ands	r3, r1
 8003172:	b299      	uxth	r1, r3
 8003174:	4b67      	ldr	r3, [pc, #412]	; (8003314 <USB_ActivateEndpoint+0x57c>)
 8003176:	430b      	orrs	r3, r1
 8003178:	b29b      	uxth	r3, r3
 800317a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	441a      	add	r2, r3
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b299      	uxth	r1, r3
 8003194:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003198:	400b      	ands	r3, r1
 800319a:	b299      	uxth	r1, r3
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <USB_ActivateEndpoint+0x57c>)
 800319e:	430b      	orrs	r3, r1
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	b29c      	uxth	r4, r3
 80031bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031c0:	b29c      	uxth	r4, r3
 80031c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031c6:	b29c      	uxth	r4, r3
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <USB_ActivateEndpoint+0x580>)
 80031d4:	4323      	orrs	r3, r4
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	b29c      	uxth	r4, r3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <USB_ActivateEndpoint+0x580>)
 80031fe:	4323      	orrs	r3, r4
 8003200:	b29b      	uxth	r3, r3
 8003202:	8013      	strh	r3, [r2, #0]
 8003204:	e07b      	b.n	80032fe <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <USB_ActivateEndpoint+0x4ac>
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b299      	uxth	r1, r3
 8003234:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003238:	400b      	ands	r3, r1
 800323a:	b299      	uxth	r1, r3
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <USB_ActivateEndpoint+0x578>)
 800323e:	430b      	orrs	r3, r1
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d013      	beq.n	8003282 <USB_ActivateEndpoint+0x4ea>
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	441a      	add	r2, r3
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b299      	uxth	r1, r3
 8003272:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003276:	400b      	ands	r3, r1
 8003278:	b299      	uxth	r1, r3
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <USB_ActivateEndpoint+0x57c>)
 800327c:	430b      	orrs	r3, r1
 800327e:	b29b      	uxth	r3, r3
 8003280:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b299      	uxth	r1, r3
 800329a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800329e:	400b      	ands	r3, r1
 80032a0:	b299      	uxth	r1, r3
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <USB_ActivateEndpoint+0x578>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c0:	b29c      	uxth	r4, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <USB_ActivateEndpoint+0x580>)
 80032ce:	4323      	orrs	r3, r4
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	b29c      	uxth	r4, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <USB_ActivateEndpoint+0x580>)
 80032f8:	4323      	orrs	r3, r4
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bc90      	pop	{r4, r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	ffff8180 	.word	0xffff8180
 8003310:	ffffc080 	.word	0xffffc080
 8003314:	ffff80c0 	.word	0xffff80c0
 8003318:	ffff8080 	.word	0xffff8080

0800331c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800331c:	b490      	push	{r4, r7}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	7a9b      	ldrb	r3, [r3, #10]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d16d      	bne.n	800340a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d034      	beq.n	80033a0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <USB_DeactivateEndpoint+0x58>
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b299      	uxth	r1, r3
 8003364:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003368:	400b      	ands	r3, r1
 800336a:	b299      	uxth	r1, r3
 800336c:	4b68      	ldr	r3, [pc, #416]	; (8003510 <USB_DeactivateEndpoint+0x1f4>)
 800336e:	430b      	orrs	r3, r1
 8003370:	b29b      	uxth	r3, r3
 8003372:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800338a:	b29c      	uxth	r4, r3
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <USB_DeactivateEndpoint+0x1f8>)
 8003398:	4323      	orrs	r3, r4
 800339a:	b29b      	uxth	r3, r3
 800339c:	8013      	strh	r3, [r2, #0]
 800339e:	e139      	b.n	8003614 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d013      	beq.n	80033de <USB_DeactivateEndpoint+0xc2>
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b299      	uxth	r1, r3
 80033ce:	f640 730f 	movw	r3, #3855	; 0xf0f
 80033d2:	400b      	ands	r3, r1
 80033d4:	b299      	uxth	r1, r3
 80033d6:	4b50      	ldr	r3, [pc, #320]	; (8003518 <USB_DeactivateEndpoint+0x1fc>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f4:	b29c      	uxth	r4, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	4b44      	ldr	r3, [pc, #272]	; (8003514 <USB_DeactivateEndpoint+0x1f8>)
 8003402:	4323      	orrs	r3, r4
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]
 8003408:	e104      	b.n	8003614 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8084 	bne.w	800351c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d013      	beq.n	8003452 <USB_DeactivateEndpoint+0x136>
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	441a      	add	r2, r3
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b299      	uxth	r1, r3
 8003442:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003446:	400b      	ands	r3, r1
 8003448:	b299      	uxth	r1, r3
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <USB_DeactivateEndpoint+0x1fc>)
 800344c:	430b      	orrs	r3, r1
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <USB_DeactivateEndpoint+0x174>
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b299      	uxth	r1, r3
 8003480:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003484:	400b      	ands	r3, r1
 8003486:	b299      	uxth	r1, r3
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <USB_DeactivateEndpoint+0x1f4>)
 800348a:	430b      	orrs	r3, r1
 800348c:	b29b      	uxth	r3, r3
 800348e:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b299      	uxth	r1, r3
 80034a8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034ac:	400b      	ands	r3, r1
 80034ae:	b299      	uxth	r1, r3
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <USB_DeactivateEndpoint+0x1f4>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	b29c      	uxth	r4, r3
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	441a      	add	r2, r3
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <USB_DeactivateEndpoint+0x1f8>)
 80034dc:	4323      	orrs	r3, r4
 80034de:	b29b      	uxth	r3, r3
 80034e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f8:	b29c      	uxth	r4, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	441a      	add	r2, r3
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <USB_DeactivateEndpoint+0x1f8>)
 8003506:	4323      	orrs	r3, r4
 8003508:	b29b      	uxth	r3, r3
 800350a:	8013      	strh	r3, [r2, #0]
 800350c:	e082      	b.n	8003614 <USB_DeactivateEndpoint+0x2f8>
 800350e:	bf00      	nop
 8003510:	ffff80c0 	.word	0xffff80c0
 8003514:	ffff8080 	.word	0xffff8080
 8003518:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <USB_DeactivateEndpoint+0x23e>
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b299      	uxth	r1, r3
 800354a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800354e:	400b      	ands	r3, r1
 8003550:	b299      	uxth	r1, r3
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <USB_DeactivateEndpoint+0x304>)
 8003554:	430b      	orrs	r3, r1
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <USB_DeactivateEndpoint+0x27c>
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b299      	uxth	r1, r3
 8003588:	f640 730f 	movw	r3, #3855	; 0xf0f
 800358c:	400b      	ands	r3, r1
 800358e:	b299      	uxth	r1, r3
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <USB_DeactivateEndpoint+0x308>)
 8003592:	430b      	orrs	r3, r1
 8003594:	b29b      	uxth	r3, r3
 8003596:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b299      	uxth	r1, r3
 80035b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035b4:	400b      	ands	r3, r1
 80035b6:	b299      	uxth	r1, r3
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <USB_DeactivateEndpoint+0x304>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	b29b      	uxth	r3, r3
 80035be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d6:	b29c      	uxth	r4, r3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <USB_DeactivateEndpoint+0x30c>)
 80035e4:	4323      	orrs	r3, r4
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	b29c      	uxth	r4, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <USB_DeactivateEndpoint+0x30c>)
 800360e:	4323      	orrs	r3, r4
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bc90      	pop	{r4, r7}
 800361e:	4770      	bx	lr
 8003620:	ffffc080 	.word	0xffffc080
 8003624:	ffff80c0 	.word	0xffff80c0
 8003628:	ffff8080 	.word	0xffff8080

0800362c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b08d      	sub	sp, #52	; 0x34
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	785b      	ldrb	r3, [r3, #1]
 8003644:	2b01      	cmp	r3, #1
 8003646:	f040 8149 	bne.w	80038dc <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	429a      	cmp	r2, r3
 8003654:	d909      	bls.n	800366a <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	619a      	str	r2, [r3, #24]
 8003668:	e005      	b.n	8003676 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	7a9b      	ldrb	r3, [r3, #10]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11b      	bne.n	80036b6 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6959      	ldr	r1, [r3, #20]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	889a      	ldrh	r2, [r3, #4]
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	b29b      	uxth	r3, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fb7d 	bl	8003d8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	3302      	adds	r3, #2
 80036a4:	005a      	lsls	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ae:	461a      	mov	r2, r3
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e0f6      	b.n	80038a4 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d059      	beq.n	8003780 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13b      	bne.n	800374c <USB_EPStartXfer+0x120>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	3306      	adds	r3, #6
 80036e8:	005a      	lsls	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b3e      	cmp	r3, #62	; 0x3e
 80036f8:	d916      	bls.n	8003728 <USB_EPStartXfer+0xfc>
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <USB_EPStartXfer+0xe4>
 800370a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800370c:	3b01      	subs	r3, #1
 800370e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	b29b      	uxth	r3, r3
 8003716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e027      	b.n	8003778 <USB_EPStartXfer+0x14c>
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <USB_EPStartXfer+0x112>
 8003738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800373a:	3301      	adds	r3, #1
 800373c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800373e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e015      	b.n	8003778 <USB_EPStartXfer+0x14c>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d111      	bne.n	8003778 <USB_EPStartXfer+0x14c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	3302      	adds	r3, #2
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003772:	461a      	mov	r2, r3
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	891b      	ldrh	r3, [r3, #8]
 800377c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800377e:	e058      	b.n	8003832 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d13b      	bne.n	8003800 <USB_EPStartXfer+0x1d4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378e:	b29b      	uxth	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	3302      	adds	r3, #2
 800379c:	005a      	lsls	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b3e      	cmp	r3, #62	; 0x3e
 80037ac:	d916      	bls.n	80037dc <USB_EPStartXfer+0x1b0>
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <USB_EPStartXfer+0x198>
 80037be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037c0:	3b01      	subs	r3, #1
 80037c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037c6:	029b      	lsls	r3, r3, #10
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e027      	b.n	800382c <USB_EPStartXfer+0x200>
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <USB_EPStartXfer+0x1c6>
 80037ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037ee:	3301      	adds	r3, #1
 80037f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e015      	b.n	800382c <USB_EPStartXfer+0x200>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d111      	bne.n	800382c <USB_EPStartXfer+0x200>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	3302      	adds	r3, #2
 800381c:	005a      	lsls	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003826:	461a      	mov	r2, r3
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	88db      	ldrh	r3, [r3, #6]
 8003830:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	b29b      	uxth	r3, r3
 800383a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 faa4 	bl	8003d8a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d114      	bne.n	8003874 <USB_EPStartXfer+0x248>
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b299      	uxth	r1, r3
 8003862:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003866:	400b      	ands	r3, r1
 8003868:	b299      	uxth	r1, r3
 800386a:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <USB_EPStartXfer+0x488>)
 800386c:	430b      	orrs	r3, r1
 800386e:	b29b      	uxth	r3, r3
 8003870:	8013      	strh	r3, [r2, #0]
 8003872:	e017      	b.n	80038a4 <USB_EPStartXfer+0x278>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d113      	bne.n	80038a4 <USB_EPStartXfer+0x278>
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b299      	uxth	r1, r3
 8003894:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003898:	400b      	ands	r3, r1
 800389a:	b299      	uxth	r1, r3
 800389c:	4b86      	ldr	r3, [pc, #536]	; (8003ab8 <USB_EPStartXfer+0x48c>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ba:	b29c      	uxth	r4, r3
 80038bc:	f084 0310 	eor.w	r3, r4, #16
 80038c0:	b29c      	uxth	r4, r3
 80038c2:	f084 0320 	eor.w	r3, r4, #32
 80038c6:	b29c      	uxth	r4, r3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	441a      	add	r2, r3
 80038d2:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <USB_EPStartXfer+0x490>)
 80038d4:	4323      	orrs	r3, r4
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8013      	strh	r3, [r2, #0]
 80038da:	e122      	b.n	8003b22 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d909      	bls.n	80038fc <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	1ad2      	subs	r2, r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	619a      	str	r2, [r3, #24]
 80038fa:	e005      	b.n	8003908 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	7a9b      	ldrb	r3, [r3, #10]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d13b      	bne.n	8003988 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003916:	b29b      	uxth	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	3306      	adds	r3, #6
 8003924:	005a      	lsls	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	2b3e      	cmp	r3, #62	; 0x3e
 8003934:	d916      	bls.n	8003964 <USB_EPStartXfer+0x338>
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	847b      	strh	r3, [r7, #34]	; 0x22
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <USB_EPStartXfer+0x320>
 8003946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003948:	3b01      	subs	r3, #1
 800394a:	847b      	strh	r3, [r7, #34]	; 0x22
 800394c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e0c3      	b.n	8003aec <USB_EPStartXfer+0x4c0>
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	847b      	strh	r3, [r7, #34]	; 0x22
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <USB_EPStartXfer+0x34e>
 8003974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003976:	3301      	adds	r3, #1
 8003978:	847b      	strh	r3, [r7, #34]	; 0x22
 800397a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e0b1      	b.n	8003aec <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d13b      	bne.n	8003a08 <USB_EPStartXfer+0x3dc>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	3302      	adds	r3, #2
 80039a4:	005a      	lsls	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b3e      	cmp	r3, #62	; 0x3e
 80039b4:	d916      	bls.n	80039e4 <USB_EPStartXfer+0x3b8>
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	843b      	strh	r3, [r7, #32]
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <USB_EPStartXfer+0x3a0>
 80039c6:	8c3b      	ldrh	r3, [r7, #32]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	843b      	strh	r3, [r7, #32]
 80039cc:	8c3b      	ldrh	r3, [r7, #32]
 80039ce:	029b      	lsls	r3, r3, #10
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e027      	b.n	8003a34 <USB_EPStartXfer+0x408>
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	843b      	strh	r3, [r7, #32]
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <USB_EPStartXfer+0x3ce>
 80039f4:	8c3b      	ldrh	r3, [r7, #32]
 80039f6:	3301      	adds	r3, #1
 80039f8:	843b      	strh	r3, [r7, #32]
 80039fa:	8c3b      	ldrh	r3, [r7, #32]
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e015      	b.n	8003a34 <USB_EPStartXfer+0x408>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d111      	bne.n	8003a34 <USB_EPStartXfer+0x408>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	3302      	adds	r3, #2
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d141      	bne.n	8003ac0 <USB_EPStartXfer+0x494>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3306      	adds	r3, #6
 8003a50:	005a      	lsls	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8003a60:	d916      	bls.n	8003a90 <USB_EPStartXfer+0x464>
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	83fb      	strh	r3, [r7, #30]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <USB_EPStartXfer+0x44c>
 8003a72:	8bfb      	ldrh	r3, [r7, #30]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	83fb      	strh	r3, [r7, #30]
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	029b      	lsls	r3, r3, #10
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e02d      	b.n	8003aec <USB_EPStartXfer+0x4c0>
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	83fb      	strh	r3, [r7, #30]
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <USB_EPStartXfer+0x47a>
 8003aa0:	8bfb      	ldrh	r3, [r7, #30]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	83fb      	strh	r3, [r7, #30]
 8003aa6:	8bfb      	ldrh	r3, [r7, #30]
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e01b      	b.n	8003aec <USB_EPStartXfer+0x4c0>
 8003ab4:	ffff80c0 	.word	0xffff80c0
 8003ab8:	ffffc080 	.word	0xffffc080
 8003abc:	ffff8080 	.word	0xffff8080
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d111      	bne.n	8003aec <USB_EPStartXfer+0x4c0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3302      	adds	r3, #2
 8003adc:	005a      	lsls	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	b29c      	uxth	r4, r3
 8003b04:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b08:	b29c      	uxth	r4, r3
 8003b0a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b0e:	b29c      	uxth	r4, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <USB_EPStartXfer+0x500>)
 8003b1c:	4323      	orrs	r3, r4
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3734      	adds	r7, #52	; 0x34
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	ffff8080 	.word	0xffff8080

08003b30 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003b30:	b490      	push	{r4, r7}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d118      	bne.n	8003b74 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003b54:	401c      	ands	r4, r3
 8003b56:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003b5a:	f084 0410 	eor.w	r4, r4, #16
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	b2a1      	uxth	r1, r4
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <USB_EPSetStall+0xbc>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	8013      	strh	r3, [r2, #0]
 8003b72:	e034      	b.n	8003bde <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d018      	beq.n	8003bae <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b92:	b29c      	uxth	r4, r3
 8003b94:	f084 0310 	eor.w	r3, r4, #16
 8003b98:	b29c      	uxth	r4, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <USB_EPSetStall+0xbc>)
 8003ba6:	4323      	orrs	r3, r4
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]
 8003bac:	e017      	b.n	8003bde <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	b29c      	uxth	r4, r3
 8003bc6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <USB_EPSetStall+0xbc>)
 8003bd8:	4323      	orrs	r3, r4
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc90      	pop	{r4, r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	ffff8080 	.word	0xffff8080

08003bf0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bf0:	b490      	push	{r4, r7}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d03a      	beq.n	8003c78 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <USB_EPClearStall+0x50>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003c34:	400b      	ands	r3, r1
 8003c36:	b299      	uxth	r1, r3
 8003c38:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <USB_EPClearStall+0x108>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c56:	b29c      	uxth	r4, r3
 8003c58:	f084 0310 	eor.w	r3, r4, #16
 8003c5c:	b29c      	uxth	r4, r3
 8003c5e:	f084 0320 	eor.w	r3, r4, #32
 8003c62:	b29c      	uxth	r4, r3
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <USB_EPClearStall+0x10c>)
 8003c70:	4323      	orrs	r3, r4
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
 8003c76:	e039      	b.n	8003cec <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <USB_EPClearStall+0xc6>
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b299      	uxth	r1, r3
 8003ca6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003caa:	400b      	ands	r3, r1
 8003cac:	b299      	uxth	r1, r3
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <USB_EPClearStall+0x110>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ccc:	b29c      	uxth	r4, r3
 8003cce:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003cd2:	b29c      	uxth	r4, r3
 8003cd4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003cd8:	b29c      	uxth	r4, r3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <USB_EPClearStall+0x10c>)
 8003ce6:	4323      	orrs	r3, r4
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc90      	pop	{r4, r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	ffff80c0 	.word	0xffff80c0
 8003cfc:	ffff8080 	.word	0xffff8080
 8003d00:	ffffc080 	.word	0xffffc080

08003d04 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b08b      	sub	sp, #44	; 0x2c
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	4611      	mov	r1, r2
 8003d96:	461a      	mov	r2, r3
 8003d98:	460b      	mov	r3, r1
 8003d9a:	80fb      	strh	r3, [r7, #6]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8003da0:	88bb      	ldrh	r3, [r7, #4]
 8003da2:	3301      	adds	r3, #1
 8003da4:	105b      	asrs	r3, r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc6:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	e01b      	b.n	8003e06 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	461a      	mov	r2, r3
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	623a      	str	r2, [r7, #32]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	b292      	uxth	r2, r2
 8003df2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	3302      	adds	r3, #2
 8003df8:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3b01      	subs	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e0      	bne.n	8003dce <USB_WritePMA+0x44>
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	372c      	adds	r7, #44	; 0x2c
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b089      	sub	sp, #36	; 0x24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	4611      	mov	r1, r2
 8003e22:	461a      	mov	r2, r3
 8003e24:	460b      	mov	r3, r1
 8003e26:	80fb      	strh	r3, [r7, #6]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003e2c:	88bb      	ldrh	r3, [r7, #4]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	105b      	asrs	r3, r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	461a      	mov	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4a:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	e00e      	b.n	8003e70 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	60ba      	str	r2, [r7, #8]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	1d11      	adds	r1, r2, #4
 8003e5c:	61b9      	str	r1, [r7, #24]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	b292      	uxth	r2, r2
 8003e62:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1ed      	bne.n	8003e52 <USB_ReadPMA+0x3c>
  }
}
 8003e76:	bf00      	nop
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	7c1b      	ldrb	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10e      	bne.n	8003eb6 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	2181      	movs	r1, #129	; 0x81
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f003 f875 	bl	8006f90 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eaa:	2202      	movs	r2, #2
 8003eac:	2101      	movs	r1, #1
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f003 f86e 	bl	8006f90 <USBD_LL_OpenEP>
 8003eb4:	e00b      	b.n	8003ece <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003eb6:	2340      	movs	r3, #64	; 0x40
 8003eb8:	2202      	movs	r2, #2
 8003eba:	2181      	movs	r1, #129	; 0x81
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f003 f867 	bl	8006f90 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003ec2:	2340      	movs	r3, #64	; 0x40
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f003 f861 	bl	8006f90 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003ece:	2308      	movs	r3, #8
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	2182      	movs	r1, #130	; 0x82
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f003 f85b 	bl	8006f90 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003eda:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003ede:	f003 fa1b 	bl	8007318 <USBD_static_malloc>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e026      	b.n	8003f48 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f00:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7c1b      	ldrb	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f2e:	2101      	movs	r1, #1
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f003 f9a3 	bl	800727c <USBD_LL_PrepareReceive>
 8003f36:	e007      	b.n	8003f48 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f3e:	2340      	movs	r3, #64	; 0x40
 8003f40:	2101      	movs	r1, #1
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f003 f99a 	bl	800727c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003f62:	2181      	movs	r1, #129	; 0x81
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f003 f851 	bl	800700c <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f003 f84d 	bl	800700c <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003f72:	2182      	movs	r1, #130	; 0x82
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f003 f849 	bl	800700c <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 f9cb 	bl	8007330 <USBD_static_free>
    pdev->pClassData = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fbc:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d03a      	beq.n	8004040 <USBD_CDC_Setup+0x94>
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d000      	beq.n	8003fd0 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8003fce:	e043      	b.n	8004058 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	88db      	ldrh	r3, [r3, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d029      	beq.n	800402c <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da11      	bge.n	8004006 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8003fee:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	88d2      	ldrh	r2, [r2, #6]
 8003ff4:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8003ff6:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	88db      	ldrh	r3, [r3, #6]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 ffe4 	bl	8004fcc <USBD_CtlSendData>
    break;
 8004004:	e029      	b.n	800405a <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	785a      	ldrb	r2, [r3, #1]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	88db      	ldrh	r3, [r3, #6]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800401c:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	88db      	ldrh	r3, [r3, #6]
 8004022:	461a      	mov	r2, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 ffff 	bl	8005028 <USBD_CtlPrepareRx>
    break;
 800402a:	e016      	b.n	800405a <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	7850      	ldrb	r0, [r2, #1]
 8004038:	2200      	movs	r2, #0
 800403a:	6839      	ldr	r1, [r7, #0]
 800403c:	4798      	blx	r3
    break;
 800403e:	e00c      	b.n	800405a <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b0a      	cmp	r3, #10
 8004046:	d001      	beq.n	800404c <USBD_CDC_Setup+0xa0>
 8004048:	2b0b      	cmp	r3, #11
      break;
 800404a:	e005      	b.n	8004058 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800404c:	2201      	movs	r2, #1
 800404e:	4905      	ldr	r1, [pc, #20]	; (8004064 <USBD_CDC_Setup+0xb8>)
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 ffbb 	bl	8004fcc <USBD_CtlSendData>
      break;
 8004056:	bf00      	nop
    break;
 8004058:	bf00      	nop
  }
  return USBD_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	200001a4 	.word	0x200001a4

08004068 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800407a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040b0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f003 f91a 	bl	80072f0 <USBD_LL_GetRxDataSize>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80040e2:	4611      	mov	r1, r2
 80040e4:	4798      	blx	r3

    return USBD_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004102:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d015      	beq.n	800413a <USBD_CDC_EP0_RxReady+0x46>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004114:	2bff      	cmp	r3, #255	; 0xff
 8004116:	d010      	beq.n	800413a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004126:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800412e:	b292      	uxth	r2, r2
 8004130:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2243      	movs	r2, #67	; 0x43
 8004150:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004152:	4b03      	ldr	r3, [pc, #12]	; (8004160 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000088 	.word	0x20000088

08004164 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2243      	movs	r2, #67	; 0x43
 8004170:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004172:	4b03      	ldr	r3, [pc, #12]	; (8004180 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000044 	.word	0x20000044

08004184 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2243      	movs	r2, #67	; 0x43
 8004190:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004192:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	200000cc 	.word	0x200000cc

080041a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	220a      	movs	r2, #10
 80041b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80041b2:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000000 	.word	0x20000000

080041c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80041ce:	2302      	movs	r3, #2
 80041d0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004204:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004232:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004256:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7c1b      	ldrb	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004274:	2101      	movs	r1, #1
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f003 f800 	bl	800727c <USBD_LL_PrepareReceive>
 800427c:	e007      	b.n	800428e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004284:	2340      	movs	r3, #64	; 0x40
 8004286:	2101      	movs	r1, #1
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f002 fff7 	bl	800727c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80042b0:	2302      	movs	r3, #2
 80042b2:	e01a      	b.n	80042ea <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	79fa      	ldrb	r2, [r7, #7]
 80042e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f002 fdc0 	bl	8006e68 <USBD_LL_Init>
  
  return USBD_OK; 
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	e001      	b.n	8004318 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004314:	2302      	movs	r3, #2
 8004316:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f002 fdfd 	bl	8006f2c <USBD_LL_Start>
  
  return USBD_OK;  
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800435c:	2302      	movs	r3, #2
 800435e:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	4611      	mov	r1, r2
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
  return USBD_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd59 	bl	8004e7e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d00b      	beq.n	8004408 <USBD_LL_SetupStage+0x54>
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d011      	beq.n	8004418 <USBD_LL_SetupStage+0x64>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d117      	bne.n	8004428 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f987 	bl	8004714 <USBD_StdDevReq>
    break;
 8004406:	e01a      	b.n	800443e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f9cf 	bl	80047b4 <USBD_StdItfReq>
    break;
 8004416:	e012      	b.n	800443e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f9fa 	bl	800481a <USBD_StdEPReq>
    break;
 8004426:	e00a      	b.n	800443e <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800442e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f002 fe1e 	bl	8007078 <USBD_LL_StallEP>
    break;
 800443c:	bf00      	nop
  }  
  return USBD_OK;  
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	460b      	mov	r3, r1
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d138      	bne.n	80044ce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004462:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800446a:	2b03      	cmp	r3, #3
 800446c:	d142      	bne.n	80044f4 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	429a      	cmp	r2, r3
 8004478:	d914      	bls.n	80044a4 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4293      	cmp	r3, r2
 8004492:	bf28      	it	cs
 8004494:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004496:	b29b      	uxth	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fde1 	bl	8005064 <USBD_CtlContinueRx>
 80044a2:	e027      	b.n	80044f4 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d105      	bne.n	80044c6 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fdde 	bl	8005088 <USBD_CtlSendStatus>
 80044cc:	e012      	b.n	80044f4 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d107      	bne.n	80044f4 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	7afa      	ldrb	r2, [r7, #11]
 80044ee:	4611      	mov	r1, r2
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	4798      	blx	r3
  }  
  return USBD_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	460b      	mov	r3, r1
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d16c      	bne.n	80045ec <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3314      	adds	r3, #20
 8004516:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800451e:	2b02      	cmp	r3, #2
 8004520:	d157      	bne.n	80045d2 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	429a      	cmp	r2, r3
 800452c:	d915      	bls.n	800455a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004540:	b29b      	uxth	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fd5c 	bl	8005004 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800454c:	2300      	movs	r3, #0
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f002 fe92 	bl	800727c <USBD_LL_PrepareReceive>
 8004558:	e03b      	b.n	80045d2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	fbb3 f1f2 	udiv	r1, r3, r2
 8004566:	fb02 f201 	mul.w	r2, r2, r1
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11c      	bne.n	80045aa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004578:	429a      	cmp	r2, r3
 800457a:	d316      	bcc.n	80045aa <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004586:	429a      	cmp	r2, r3
 8004588:	d20f      	bcs.n	80045aa <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fd38 	bl	8005004 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800459c:	2300      	movs	r3, #0
 800459e:	2200      	movs	r2, #0
 80045a0:	2100      	movs	r1, #0
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f002 fe6a 	bl	800727c <USBD_LL_PrepareReceive>
 80045a8:	e013      	b.n	80045d2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d105      	bne.n	80045cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fd6e 	bl	80050ae <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11a      	bne.n	8004612 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fead 	bl	800433c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80045ea:	e012      	b.n	8004612 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00c      	beq.n	8004612 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d107      	bne.n	8004612 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	7afa      	ldrb	r2, [r7, #11]
 800460c:	4611      	mov	r1, r2
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	4798      	blx	r3
  }  
  return USBD_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004624:	2340      	movs	r3, #64	; 0x40
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f002 fcb0 	bl	8006f90 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2240      	movs	r2, #64	; 0x40
 8004634:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	2200      	movs	r2, #0
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f002 fca6 	bl	8006f90 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6852      	ldr	r2, [r2, #4]
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	4611      	mov	r1, r2
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
 
  
  return USBD_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2204      	movs	r2, #4
 80046b0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d10b      	bne.n	800470a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b09      	cmp	r3, #9
 8004728:	d839      	bhi.n	800479e <USBD_StdDevReq+0x8a>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <USBD_StdDevReq+0x1c>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004781 	.word	0x08004781
 8004734:	08004795 	.word	0x08004795
 8004738:	0800479f 	.word	0x0800479f
 800473c:	0800478b 	.word	0x0800478b
 8004740:	0800479f 	.word	0x0800479f
 8004744:	08004763 	.word	0x08004763
 8004748:	08004759 	.word	0x08004759
 800474c:	0800479f 	.word	0x0800479f
 8004750:	08004777 	.word	0x08004777
 8004754:	0800476d 	.word	0x0800476d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f936 	bl	80049cc <USBD_GetDescriptor>
    break;
 8004760:	e022      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fa25 	bl	8004bb4 <USBD_SetAddress>
    break;
 800476a:	e01d      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa5e 	bl	8004c30 <USBD_SetConfig>
    break;
 8004774:	e018      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fae1 	bl	8004d40 <USBD_GetConfig>
    break;
 800477e:	e013      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb0e 	bl	8004da4 <USBD_GetStatus>
    break;
 8004788:	e00e      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fb33 	bl	8004df8 <USBD_SetFeature>
    break;
 8004792:	e009      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fb49 	bl	8004e2e <USBD_ClrFeature>
    break;
 800479c:	e004      	b.n	80047a8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fba8 	bl	8004ef6 <USBD_CtlError>
    break;
 80047a6:	bf00      	nop
  }
  
  return ret;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop

080047b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d11b      	bne.n	8004804 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	889b      	ldrh	r3, [r3, #4]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d811      	bhi.n	80047fa <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	88db      	ldrh	r3, [r3, #6]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <USBD_StdItfReq+0x5a>
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fc48 	bl	8005088 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80047f8:	e009      	b.n	800480e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb7a 	bl	8004ef6 <USBD_CtlError>
    break;
 8004802:	e004      	b.n	800480e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fb75 	bl	8004ef6 <USBD_CtlError>
    break;
 800480c:	e000      	b.n	8004810 <USBD_StdItfReq+0x5c>
    break;
 800480e:	bf00      	nop
  }
  return USBD_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	889b      	ldrh	r3, [r3, #4]
 800482c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004836:	2b20      	cmp	r3, #32
 8004838:	d108      	bne.n	800484c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
    
    return USBD_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e0ba      	b.n	80049c2 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d039      	beq.n	80048c8 <USBD_StdEPReq+0xae>
 8004854:	2b03      	cmp	r3, #3
 8004856:	d002      	beq.n	800485e <USBD_StdEPReq+0x44>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d06b      	beq.n	8004934 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800485c:	e0b0      	b.n	80049c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004864:	2b02      	cmp	r3, #2
 8004866:	d002      	beq.n	800486e <USBD_StdEPReq+0x54>
 8004868:	2b03      	cmp	r3, #3
 800486a:	d00c      	beq.n	8004886 <USBD_StdEPReq+0x6c>
 800486c:	e025      	b.n	80048ba <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800486e:	7bbb      	ldrb	r3, [r7, #14]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d027      	beq.n	80048c4 <USBD_StdEPReq+0xaa>
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d024      	beq.n	80048c4 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800487a:	7bbb      	ldrb	r3, [r7, #14]
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f002 fbfa 	bl	8007078 <USBD_LL_StallEP>
      break;	
 8004884:	e01e      	b.n	80048c4 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	885b      	ldrh	r3, [r3, #2]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <USBD_StdEPReq+0x8a>
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d004      	beq.n	80048a4 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800489a:	7bbb      	ldrb	r3, [r7, #14]
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f002 fbea 	bl	8007078 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fbe8 	bl	8005088 <USBD_CtlSendStatus>
      break;
 80048b8:	e005      	b.n	80048c6 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb1a 	bl	8004ef6 <USBD_CtlError>
      break;    
 80048c2:	e000      	b.n	80048c6 <USBD_StdEPReq+0xac>
      break;	
 80048c4:	bf00      	nop
    break;
 80048c6:	e07b      	b.n	80049c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d002      	beq.n	80048d8 <USBD_StdEPReq+0xbe>
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d00c      	beq.n	80048f0 <USBD_StdEPReq+0xd6>
 80048d6:	e024      	b.n	8004922 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80048d8:	7bbb      	ldrb	r3, [r7, #14]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d026      	beq.n	800492c <USBD_StdEPReq+0x112>
 80048de:	7bbb      	ldrb	r3, [r7, #14]
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d023      	beq.n	800492c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f002 fbc5 	bl	8007078 <USBD_LL_StallEP>
      break;	
 80048ee:	e01d      	b.n	800492c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	885b      	ldrh	r3, [r3, #2]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11b      	bne.n	8004930 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f002 fbec 	bl	80070e4 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fbb4 	bl	8005088 <USBD_CtlSendStatus>
      break;
 8004920:	e006      	b.n	8004930 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fae6 	bl	8004ef6 <USBD_CtlError>
      break;    
 800492a:	e002      	b.n	8004932 <USBD_StdEPReq+0x118>
      break;	
 800492c:	bf00      	nop
 800492e:	e047      	b.n	80049c0 <USBD_StdEPReq+0x1a6>
      break;
 8004930:	bf00      	nop
    break;
 8004932:	e045      	b.n	80049c0 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800493a:	2b02      	cmp	r3, #2
 800493c:	d002      	beq.n	8004944 <USBD_StdEPReq+0x12a>
 800493e:	2b03      	cmp	r3, #3
 8004940:	d00b      	beq.n	800495a <USBD_StdEPReq+0x140>
 8004942:	e036      	b.n	80049b2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004944:	7bbb      	ldrb	r3, [r7, #14]
 8004946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494a:	2b00      	cmp	r3, #0
 800494c:	d036      	beq.n	80049bc <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800494e:	7bbb      	ldrb	r3, [r7, #14]
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f002 fb90 	bl	8007078 <USBD_LL_StallEP>
      break;	
 8004958:	e030      	b.n	80049bc <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800495a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da08      	bge.n	8004974 <USBD_StdEPReq+0x15a>
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	3301      	adds	r3, #1
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	3304      	adds	r3, #4
 8004972:	e007      	b.n	8004984 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004974:	7bbb      	ldrb	r3, [r7, #14]
 8004976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800497a:	3310      	adds	r3, #16
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	3304      	adds	r3, #4
 8004984:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f002 fbe0 	bl	8007150 <USBD_LL_IsStallEP>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e002      	b.n	80049a4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80049a4:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80049a6:	2202      	movs	r2, #2
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fb0e 	bl	8004fcc <USBD_CtlSendData>
      break;
 80049b0:	e005      	b.n	80049be <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa9e 	bl	8004ef6 <USBD_CtlError>
      break;
 80049ba:	e000      	b.n	80049be <USBD_StdEPReq+0x1a4>
      break;	
 80049bc:	bf00      	nop
    break;
 80049be:	bf00      	nop
  }
  return ret;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	885b      	ldrh	r3, [r3, #2]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	2b06      	cmp	r3, #6
 80049e2:	f200 80c9 	bhi.w	8004b78 <USBD_GetDescriptor+0x1ac>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <USBD_GetDescriptor+0x20>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a09 	.word	0x08004a09
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a61 	.word	0x08004a61
 80049f8:	08004b79 	.word	0x08004b79
 80049fc:	08004b79 	.word	0x08004b79
 8004a00:	08004b25 	.word	0x08004b25
 8004a04:	08004b4b 	.word	0x08004b4b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	7c12      	ldrb	r2, [r2, #16]
 8004a14:	f107 010a 	add.w	r1, r7, #10
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4798      	blx	r3
 8004a1c:	60f8      	str	r0, [r7, #12]
    break;
 8004a1e:	e0b0      	b.n	8004b82 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	7c1b      	ldrb	r3, [r3, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10d      	bne.n	8004a44 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f107 020a 	add.w	r2, r7, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4798      	blx	r3
 8004a38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004a42:	e09e      	b.n	8004b82 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f107 020a 	add.w	r2, r7, #10
 8004a50:	4610      	mov	r0, r2
 8004a52:	4798      	blx	r3
 8004a54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	701a      	strb	r2, [r3, #0]
    break;
 8004a5e:	e090      	b.n	8004b82 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	885b      	ldrh	r3, [r3, #2]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d856      	bhi.n	8004b18 <USBD_GetDescriptor+0x14c>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <USBD_GetDescriptor+0xa4>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004ae9 	.word	0x08004ae9
 8004a84:	08004b01 	.word	0x08004b01
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	7c12      	ldrb	r2, [r2, #16]
 8004a94:	f107 010a 	add.w	r1, r7, #10
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
 8004a9c:	60f8      	str	r0, [r7, #12]
      break;
 8004a9e:	e040      	b.n	8004b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	7c12      	ldrb	r2, [r2, #16]
 8004aac:	f107 010a 	add.w	r1, r7, #10
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4798      	blx	r3
 8004ab4:	60f8      	str	r0, [r7, #12]
      break;
 8004ab6:	e034      	b.n	8004b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	7c12      	ldrb	r2, [r2, #16]
 8004ac4:	f107 010a 	add.w	r1, r7, #10
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
 8004acc:	60f8      	str	r0, [r7, #12]
      break;
 8004ace:	e028      	b.n	8004b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	7c12      	ldrb	r2, [r2, #16]
 8004adc:	f107 010a 	add.w	r1, r7, #10
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4798      	blx	r3
 8004ae4:	60f8      	str	r0, [r7, #12]
      break;
 8004ae6:	e01c      	b.n	8004b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	7c12      	ldrb	r2, [r2, #16]
 8004af4:	f107 010a 	add.w	r1, r7, #10
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
 8004afc:	60f8      	str	r0, [r7, #12]
      break;
 8004afe:	e010      	b.n	8004b22 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	7c12      	ldrb	r2, [r2, #16]
 8004b0c:	f107 010a 	add.w	r1, r7, #10
 8004b10:	4610      	mov	r0, r2
 8004b12:	4798      	blx	r3
 8004b14:	60f8      	str	r0, [r7, #12]
      break;
 8004b16:	e004      	b.n	8004b22 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9eb 	bl	8004ef6 <USBD_CtlError>
      return;
 8004b20:	e044      	b.n	8004bac <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8004b22:	e02e      	b.n	8004b82 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7c1b      	ldrb	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	f107 020a 	add.w	r2, r7, #10
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4798      	blx	r3
 8004b3c:	60f8      	str	r0, [r7, #12]
      break;
 8004b3e:	e020      	b.n	8004b82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f9d7 	bl	8004ef6 <USBD_CtlError>
      return;
 8004b48:	e030      	b.n	8004bac <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7c1b      	ldrb	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10d      	bne.n	8004b6e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f107 020a 	add.w	r2, r7, #10
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4798      	blx	r3
 8004b62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	2207      	movs	r2, #7
 8004b6a:	701a      	strb	r2, [r3, #0]
      break; 
 8004b6c:	e009      	b.n	8004b82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f9c0 	bl	8004ef6 <USBD_CtlError>
      return;
 8004b76:	e019      	b.n	8004bac <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9bb 	bl	8004ef6 <USBD_CtlError>
    return;
 8004b80:	e014      	b.n	8004bac <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d011      	beq.n	8004bac <USBD_GetDescriptor+0x1e0>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	88da      	ldrh	r2, [r3, #6]
 8004b94:	897b      	ldrh	r3, [r7, #10]
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bf28      	it	cs
 8004b9a:	4613      	movcs	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa10 	bl	8004fcc <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop

08004bb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	889b      	ldrh	r3, [r3, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d12c      	bne.n	8004c20 <USBD_SetAddress+0x6c>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	88db      	ldrh	r3, [r3, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d128      	bne.n	8004c20 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	885b      	ldrh	r3, [r3, #2]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd8:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d104      	bne.n	8004bee <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f985 	bl	8004ef6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004bec:	e01c      	b.n	8004c28 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f002 face 	bl	800719c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fa41 	bl	8005088 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004c14:	e008      	b.n	8004c28 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004c1e:	e003      	b.n	8004c28 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f967 	bl	8004ef6 <USBD_CtlError>
  } 
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	885b      	ldrh	r3, [r3, #2]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004c42:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004c44:	4b3d      	ldr	r3, [pc, #244]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d904      	bls.n	8004c56 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f951 	bl	8004ef6 <USBD_CtlError>
 8004c54:	e06f      	b.n	8004d36 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d002      	beq.n	8004c66 <USBD_SetConfig+0x36>
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d023      	beq.n	8004cac <USBD_SetConfig+0x7c>
 8004c64:	e062      	b.n	8004d2c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004c66:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004c80:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fb62 	bl	8004350 <USBD_SetClassConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d104      	bne.n	8004c9c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f92e 	bl	8004ef6 <USBD_CtlError>
          return;
 8004c9a:	e04c      	b.n	8004d36 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f9f3 	bl	8005088 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004ca2:	e048      	b.n	8004d36 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f9ef 	bl	8005088 <USBD_CtlSendStatus>
      break;
 8004caa:	e044      	b.n	8004d36 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004cac:	4b23      	ldr	r3, [pc, #140]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d112      	bne.n	8004cda <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fb5e 	bl	800438e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9d8 	bl	8005088 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004cd8:	e02d      	b.n	8004d36 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8004cda:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d01d      	beq.n	8004d24 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fb4c 	bl	800438e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <USBD_SetConfig+0x10c>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fb22 	bl	8004350 <USBD_SetClassConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d104      	bne.n	8004d1c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f8ee 	bl	8004ef6 <USBD_CtlError>
          return;
 8004d1a:	e00c      	b.n	8004d36 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f9b3 	bl	8005088 <USBD_CtlSendStatus>
      break;
 8004d22:	e008      	b.n	8004d36 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f9af 	bl	8005088 <USBD_CtlSendStatus>
      break;
 8004d2a:	e004      	b.n	8004d36 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8e1 	bl	8004ef6 <USBD_CtlError>
      break;
 8004d34:	bf00      	nop
    }
  }
}
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	200001a5 	.word	0x200001a5

08004d40 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	88db      	ldrh	r3, [r3, #6]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d004      	beq.n	8004d5c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8004d52:	6839      	ldr	r1, [r7, #0]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f8ce 	bl	8004ef6 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004d5a:	e01f      	b.n	8004d9c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d002      	beq.n	8004d6c <USBD_GetConfig+0x2c>
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d00b      	beq.n	8004d82 <USBD_GetConfig+0x42>
 8004d6a:	e012      	b.n	8004d92 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8004d76:	2201      	movs	r2, #1
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f926 	bl	8004fcc <USBD_CtlSendData>
      break;
 8004d80:	e00c      	b.n	8004d9c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8004d86:	2201      	movs	r2, #1
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f91e 	bl	8004fcc <USBD_CtlSendData>
      break;
 8004d90:	e004      	b.n	8004d9c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8ae 	bl	8004ef6 <USBD_CtlError>
      break;
 8004d9a:	bf00      	nop
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004db4:	3b02      	subs	r3, #2
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d815      	bhi.n	8004de6 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f043 0202 	orr.w	r2, r3, #2
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8004dda:	2202      	movs	r2, #2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8f4 	bl	8004fcc <USBD_CtlSendData>
                      2);
    break;
 8004de4:	e004      	b.n	8004df0 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f884 	bl	8004ef6 <USBD_CtlError>
    break;
 8004dee:	bf00      	nop
  }
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	885b      	ldrh	r3, [r3, #2]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10d      	bne.n	8004e26 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f931 	bl	8005088 <USBD_CtlSendStatus>
  }

}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e3e:	3b02      	subs	r3, #2
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d812      	bhi.n	8004e6a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	885b      	ldrh	r3, [r3, #2]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d113      	bne.n	8004e74 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f910 	bl	8005088 <USBD_CtlSendStatus>
    }
    break;
 8004e68:	e004      	b.n	8004e74 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f842 	bl	8004ef6 <USBD_CtlError>
    break;
 8004e72:	e000      	b.n	8004e76 <USBD_ClrFeature+0x48>
    break;
 8004e74:	bf00      	nop
  }
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	785a      	ldrb	r2, [r3, #1]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3305      	adds	r3, #5
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	3306      	adds	r3, #6
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	3307      	adds	r3, #7
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	80da      	strh	r2, [r3, #6]

}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f002 f8b8 	bl	8007078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f002 f8b4 	bl	8007078 <USBD_LL_StallEP>
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d033      	beq.n	8004f96 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f835 	bl	8004f9e <USBD_GetLen>
 8004f34:	4603      	mov	r3, r0
 8004f36:	3301      	adds	r3, #1
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	75fa      	strb	r2, [r7, #23]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	75fa      	strb	r2, [r7, #23]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	2203      	movs	r2, #3
 8004f64:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8004f66:	e012      	b.n	8004f8e <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	75fa      	strb	r2, [r7, #23]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	441a      	add	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	60f9      	str	r1, [r7, #12]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	75fa      	strb	r2, [r7, #23]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e8      	bne.n	8004f68 <USBD_GetString+0x50>
    }
  } 
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8004faa:	e005      	b.n	8004fb8 <USBD_GetLen+0x1a>
    {
        len++;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
        buf++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f5      	bne.n	8004fac <USBD_GetLen+0xe>
    }

    return len;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f002 f907 	bl	8007208 <USBD_LL_Transmit>
  
  return USBD_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	2100      	movs	r1, #0
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f002 f8f5 	bl	8007208 <USBD_LL_Transmit>
  
  return USBD_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2203      	movs	r2, #3
 800503a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	2100      	movs	r1, #0
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f002 f911 	bl	800727c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	2100      	movs	r1, #0
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f002 f8ff 	bl	800727c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005098:	2300      	movs	r3, #0
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f002 f8b2 	bl	8007208 <USBD_LL_Transmit>
  
  return USBD_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2205      	movs	r2, #5
 80050ba:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80050be:	2300      	movs	r3, #0
 80050c0:	2200      	movs	r2, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f002 f8d9 	bl	800727c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
    uint16 otp_addr = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]

    dw1000local.dblbuffon = 0; // Double buffer mode off by default
 80050e6:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <dwt_initialise+0x144>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	745a      	strb	r2, [r3, #17]
    dw1000local.wait4resp = 0;
 80050ec:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <dwt_initialise+0x144>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	769a      	strb	r2, [r3, #26]
    dw1000local.sleep_mode = 0;
 80050f2:	4b49      	ldr	r3, [pc, #292]	; (8005218 <dwt_initialise+0x144>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	831a      	strh	r2, [r3, #24]

    dw1000local.cbTxDone = NULL;
 80050f8:	4b47      	ldr	r3, [pc, #284]	; (8005218 <dwt_initialise+0x144>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
    dw1000local.cbRxOk = NULL;
 80050fe:	4b46      	ldr	r3, [pc, #280]	; (8005218 <dwt_initialise+0x144>)
 8005100:	2200      	movs	r2, #0
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c
    dw1000local.cbRxTo = NULL;
 8005104:	4b44      	ldr	r3, [pc, #272]	; (8005218 <dwt_initialise+0x144>)
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
    dw1000local.cbRxErr = NULL;
 800510a:	4b43      	ldr	r3, [pc, #268]	; (8005218 <dwt_initialise+0x144>)
 800510c:	2200      	movs	r2, #0
 800510e:	635a      	str	r2, [r3, #52]	; 0x34

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8005110:	f000 f886 	bl	8005220 <dwt_readdevid>
 8005114:	4602      	mov	r2, r0
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <dwt_initialise+0x148>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d002      	beq.n	8005122 <dwt_initialise+0x4e>
    {
        return DWT_ERROR ;
 800511c:	f04f 33ff 	mov.w	r3, #4294967295
 8005120:	e076      	b.n	8005210 <dwt_initialise+0x13c>
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
 8005122:	f000 fe97 	bl	8005e54 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8005126:	2000      	movs	r0, #0
 8005128:	f000 fcee 	bl	8005b08 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800512c:	2204      	movs	r2, #4
 800512e:	2100      	movs	r1, #0
 8005130:	2024      	movs	r0, #36	; 0x24
 8005132:	f000 fb65 	bl	8005800 <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8005136:	201e      	movs	r0, #30
 8005138:	f000 fbb8 	bl	80058ac <_dwt_otpread>
 800513c:	4603      	mov	r3, r0
 800513e:	82fb      	strh	r3, [r7, #22]
    dw1000local.otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
 8005140:	8afb      	ldrh	r3, [r7, #22]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	b29b      	uxth	r3, r3
 8005146:	b2da      	uxtb	r2, r3
 8005148:	4b33      	ldr	r3, [pc, #204]	; (8005218 <dwt_initialise+0x144>)
 800514a:	725a      	strb	r2, [r3, #9]

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800514c:	2004      	movs	r0, #4
 800514e:	f000 fbad 	bl	80058ac <_dwt_otpread>
 8005152:	6138      	str	r0, [r7, #16]
    if((ldo_tune & 0xFF) != 0)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <dwt_initialise+0xa0>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
 800515c:	2202      	movs	r2, #2
 800515e:	2112      	movs	r1, #18
 8005160:	202d      	movs	r0, #45	; 0x2d
 8005162:	f000 fb4d 	bl	8005800 <dwt_write8bitoffsetreg>
        dw1000local.sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <dwt_initialise+0x144>)
 8005168:	8b1b      	ldrh	r3, [r3, #24]
 800516a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800516e:	b29a      	uxth	r2, r3
 8005170:	4b29      	ldr	r3, [pc, #164]	; (8005218 <dwt_initialise+0x144>)
 8005172:	831a      	strh	r2, [r3, #24]
    }

    // Load Part and Lot ID from OTP
    dw1000local.partID = _dwt_otpread(PARTID_ADDRESS);
 8005174:	2006      	movs	r0, #6
 8005176:	f000 fb99 	bl	80058ac <_dwt_otpread>
 800517a:	4602      	mov	r2, r0
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <dwt_initialise+0x144>)
 800517e:	601a      	str	r2, [r3, #0]
    dw1000local.lotID = _dwt_otpread(LOTID_ADDRESS);
 8005180:	2007      	movs	r0, #7
 8005182:	f000 fb93 	bl	80058ac <_dwt_otpread>
 8005186:	4602      	mov	r2, r0
 8005188:	4b23      	ldr	r3, [pc, #140]	; (8005218 <dwt_initialise+0x144>)
 800518a:	605a      	str	r2, [r3, #4]

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    dw1000local.init_xtrim = otp_addr & 0x1F;
 800518c:	8afb      	ldrh	r3, [r7, #22]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	b2da      	uxtb	r2, r3
 8005196:	4b20      	ldr	r3, [pc, #128]	; (8005218 <dwt_initialise+0x144>)
 8005198:	741a      	strb	r2, [r3, #16]
    if (!dw1000local.init_xtrim) // A value of 0 means that the crystal has not been trimmed
 800519a:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <dwt_initialise+0x144>)
 800519c:	7c1b      	ldrb	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <dwt_initialise+0xd4>
    {
        dw1000local.init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <dwt_initialise+0x144>)
 80051a4:	2210      	movs	r2, #16
 80051a6:	741a      	strb	r2, [r3, #16]
    }
    // Configure XTAL trim
    dwt_setxtaltrim(dw1000local.init_xtrim);
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <dwt_initialise+0x144>)
 80051aa:	7c1b      	ldrb	r3, [r3, #16]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fe75 	bl	8005e9c <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <dwt_initialise+0xfc>
    {
        _dwt_loaducodefromrom();
 80051bc:	f000 fbc3 	bl	8005946 <_dwt_loaducodefromrom>
        dw1000local.sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
 80051c0:	4b15      	ldr	r3, [pc, #84]	; (8005218 <dwt_initialise+0x144>)
 80051c2:	8b1b      	ldrh	r3, [r3, #24]
 80051c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	4b13      	ldr	r3, [pc, #76]	; (8005218 <dwt_initialise+0x144>)
 80051cc:	831a      	strh	r2, [r3, #24]
 80051ce:	e00f      	b.n	80051f0 <dwt_initialise+0x11c>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80051d0:	2105      	movs	r1, #5
 80051d2:	2036      	movs	r0, #54	; 0x36
 80051d4:	f000 fae4 	bl	80057a0 <dwt_read16bitoffsetreg>
 80051d8:	4603      	mov	r3, r0
 80051da:	81fb      	strh	r3, [r7, #14]
        rega &= 0xFDFF ; // Clear LDERUN bit
 80051dc:	89fb      	ldrh	r3, [r7, #14]
 80051de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e2:	81fb      	strh	r3, [r7, #14]
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	461a      	mov	r2, r3
 80051e8:	2105      	movs	r1, #5
 80051ea:	2036      	movs	r0, #54	; 0x36
 80051ec:	f000 fb1b 	bl	8005826 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80051f0:	2001      	movs	r0, #1
 80051f2:	f000 fc89 	bl	8005b08 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80051f6:	2200      	movs	r2, #0
 80051f8:	210a      	movs	r1, #10
 80051fa:	202c      	movs	r0, #44	; 0x2c
 80051fc:	f000 fb00 	bl	8005800 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    dw1000local.sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8005200:	2100      	movs	r1, #0
 8005202:	2004      	movs	r0, #4
 8005204:	f000 faa5 	bl	8005752 <dwt_read32bitoffsetreg>
 8005208:	4602      	mov	r2, r0
 800520a:	4b03      	ldr	r3, [pc, #12]	; (8005218 <dwt_initialise+0x144>)
 800520c:	615a      	str	r2, [r3, #20]

    return DWT_SUCCESS ;
 800520e:	2300      	movs	r3, #0

} // end dwt_initialise()
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200001a8 	.word	0x200001a8
 800521c:	deca0130 	.word	0xdeca0130

08005220 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8005224:	2100      	movs	r1, #0
 8005226:	2000      	movs	r0, #0
 8005228:	f000 fa93 	bl	8005752 <dwt_read32bitoffsetreg>
 800522c:	4603      	mov	r3, r0
}
 800522e:	4618      	mov	r0, r3
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	795b      	ldrb	r3, [r3, #5]
 800524e:	461a      	mov	r2, r3
 8005250:	4b9b      	ldr	r3, [pc, #620]	; (80054c0 <dwt_configure+0x28c>)
 8005252:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005256:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	3b01      	subs	r3, #1
 800525e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d002      	beq.n	800526c <dwt_configure+0x38>
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b07      	cmp	r3, #7
 800526a:	d101      	bne.n	8005270 <dwt_configure+0x3c>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <dwt_configure+0x3e>
 8005270:	2300      	movs	r3, #0
 8005272:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	79db      	ldrb	r3, [r3, #7]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <dwt_configure+0x5c>
    {
        dw1000local.sysCFGreg |= SYS_CFG_RXM110K ;
 800527c:	4b91      	ldr	r3, [pc, #580]	; (80054c4 <dwt_configure+0x290>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005284:	4a8f      	ldr	r2, [pc, #572]	; (80054c4 <dwt_configure+0x290>)
 8005286:	6153      	str	r3, [r2, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8005288:	8abb      	ldrh	r3, [r7, #20]
 800528a:	08db      	lsrs	r3, r3, #3
 800528c:	82bb      	strh	r3, [r7, #20]
 800528e:	e005      	b.n	800529c <dwt_configure+0x68>
    }
    else
    {
        dw1000local.sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8005290:	4b8c      	ldr	r3, [pc, #560]	; (80054c4 <dwt_configure+0x290>)
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005298:	4a8a      	ldr	r2, [pc, #552]	; (80054c4 <dwt_configure+0x290>)
 800529a:	6153      	str	r3, [r2, #20]
    }

    dw1000local.longFrames = config->phrMode ;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	7a1a      	ldrb	r2, [r3, #8]
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <dwt_configure+0x290>)
 80052a2:	721a      	strb	r2, [r3, #8]

    dw1000local.sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80052a4:	4b87      	ldr	r3, [pc, #540]	; (80054c4 <dwt_configure+0x290>)
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80052ac:	4a85      	ldr	r2, [pc, #532]	; (80054c4 <dwt_configure+0x290>)
 80052ae:	6153      	str	r3, [r2, #20]
    dw1000local.sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80052b0:	4b84      	ldr	r3, [pc, #528]	; (80054c4 <dwt_configure+0x290>)
 80052b2:	695a      	ldr	r2, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7a1b      	ldrb	r3, [r3, #8]
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052be:	4313      	orrs	r3, r2
 80052c0:	4a80      	ldr	r2, [pc, #512]	; (80054c4 <dwt_configure+0x290>)
 80052c2:	6153      	str	r3, [r2, #20]

    dwt_write32bitreg(SYS_CFG_ID,dw1000local.sysCFGreg) ;
 80052c4:	4b7f      	ldr	r3, [pc, #508]	; (80054c4 <dwt_configure+0x290>)
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	461a      	mov	r2, r3
 80052ca:	2100      	movs	r1, #0
 80052cc:	2004      	movs	r0, #4
 80052ce:	f000 fac6 	bl	800585e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80052d2:	8abb      	ldrh	r3, [r7, #20]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f642 0104 	movw	r1, #10244	; 0x2804
 80052da:	202e      	movs	r0, #46	; 0x2e
 80052dc:	f000 faa3 	bl	8005826 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80052e0:	7cbb      	ldrb	r3, [r7, #18]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb0f 	bl	8005906 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	4a77      	ldr	r2, [pc, #476]	; (80054c8 <dwt_configure+0x294>)
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b76      	ldr	r3, [pc, #472]	; (80054cc <dwt_configure+0x298>)
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	461a      	mov	r2, r3
 80052f8:	2107      	movs	r1, #7
 80052fa:	202b      	movs	r0, #43	; 0x2b
 80052fc:	f000 faaf 	bl	800585e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	4a71      	ldr	r2, [pc, #452]	; (80054c8 <dwt_configure+0x294>)
 8005304:	5cd3      	ldrb	r3, [r2, r3]
 8005306:	461a      	mov	r2, r3
 8005308:	4b71      	ldr	r3, [pc, #452]	; (80054d0 <dwt_configure+0x29c>)
 800530a:	5c9b      	ldrb	r3, [r3, r2]
 800530c:	461a      	mov	r2, r3
 800530e:	210b      	movs	r1, #11
 8005310:	202b      	movs	r0, #43	; 0x2b
 8005312:	f000 fa75 	bl	8005800 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8005316:	7c7b      	ldrb	r3, [r7, #17]
 8005318:	4a6e      	ldr	r2, [pc, #440]	; (80054d4 <dwt_configure+0x2a0>)
 800531a:	5cd3      	ldrb	r3, [r2, r3]
 800531c:	461a      	mov	r2, r3
 800531e:	210b      	movs	r1, #11
 8005320:	2028      	movs	r0, #40	; 0x28
 8005322:	f000 fa6d 	bl	8005800 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	4a67      	ldr	r2, [pc, #412]	; (80054c8 <dwt_configure+0x294>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	461a      	mov	r2, r3
 800532e:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <dwt_configure+0x2a4>)
 8005330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005334:	461a      	mov	r2, r3
 8005336:	210c      	movs	r1, #12
 8005338:	2028      	movs	r0, #40	; 0x28
 800533a:	f000 fa90 	bl	800585e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	79db      	ldrb	r3, [r3, #7]
 8005342:	4618      	mov	r0, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	799b      	ldrb	r3, [r3, #6]
 8005348:	4619      	mov	r1, r3
 800534a:	4a64      	ldr	r2, [pc, #400]	; (80054dc <dwt_configure+0x2a8>)
 800534c:	0043      	lsls	r3, r0, #1
 800534e:	440b      	add	r3, r1
 8005350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005354:	461a      	mov	r2, r3
 8005356:	2102      	movs	r1, #2
 8005358:	2027      	movs	r0, #39	; 0x27
 800535a:	f000 fa64 	bl	8005826 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800535e:	7cbb      	ldrb	r3, [r7, #18]
 8005360:	4a5f      	ldr	r2, [pc, #380]	; (80054e0 <dwt_configure+0x2ac>)
 8005362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005366:	461a      	mov	r2, r3
 8005368:	2104      	movs	r1, #4
 800536a:	2027      	movs	r0, #39	; 0x27
 800536c:	f000 fa5b 	bl	8005826 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	79db      	ldrb	r3, [r3, #7]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <dwt_configure+0x150>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8005378:	2264      	movs	r2, #100	; 0x64
 800537a:	2106      	movs	r1, #6
 800537c:	2027      	movs	r0, #39	; 0x27
 800537e:	f000 fa52 	bl	8005826 <dwt_write16bitoffsetreg>
 8005382:	e018      	b.n	80053b6 <dwt_configure+0x182>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d10a      	bne.n	80053a2 <dwt_configure+0x16e>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800538c:	2210      	movs	r2, #16
 800538e:	2106      	movs	r1, #6
 8005390:	2027      	movs	r0, #39	; 0x27
 8005392:	f000 fa48 	bl	8005826 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8005396:	2210      	movs	r2, #16
 8005398:	2126      	movs	r1, #38	; 0x26
 800539a:	2027      	movs	r0, #39	; 0x27
 800539c:	f000 fa30 	bl	8005800 <dwt_write8bitoffsetreg>
 80053a0:	e009      	b.n	80053b6 <dwt_configure+0x182>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80053a2:	2220      	movs	r2, #32
 80053a4:	2106      	movs	r1, #6
 80053a6:	2027      	movs	r0, #39	; 0x27
 80053a8:	f000 fa3d 	bl	8005826 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80053ac:	2228      	movs	r2, #40	; 0x28
 80053ae:	2126      	movs	r1, #38	; 0x26
 80053b0:	2027      	movs	r0, #39	; 0x27
 80053b2:	f000 fa25 	bl	8005800 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80053b6:	7cbb      	ldrb	r3, [r7, #18]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	78d2      	ldrb	r2, [r2, #3]
 80053bc:	4611      	mov	r1, r2
 80053be:	4a49      	ldr	r2, [pc, #292]	; (80054e4 <dwt_configure+0x2b0>)
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c8:	461a      	mov	r2, r3
 80053ca:	2108      	movs	r1, #8
 80053cc:	2027      	movs	r0, #39	; 0x27
 80053ce:	f000 fa46 	bl	800585e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	895b      	ldrh	r3, [r3, #10]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <dwt_configure+0x1ae>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f241 0241 	movw	r2, #4161	; 0x1041
 80053e0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	895b      	ldrh	r3, [r3, #10]
 80053e6:	461a      	mov	r2, r3
 80053e8:	2120      	movs	r1, #32
 80053ea:	2027      	movs	r0, #39	; 0x27
 80053ec:	f000 fa1b 	bl	8005826 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <dwt_configure+0x2b4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	210c      	movs	r1, #12
 80053f8:	2023      	movs	r0, #35	; 0x23
 80053fa:	f000 fa30 	bl	800585e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80053fe:	7cbb      	ldrb	r3, [r7, #18]
 8005400:	4a39      	ldr	r2, [pc, #228]	; (80054e8 <dwt_configure+0x2b4>)
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	889b      	ldrh	r3, [r3, #4]
 8005408:	461a      	mov	r2, r3
 800540a:	2104      	movs	r1, #4
 800540c:	2023      	movs	r0, #35	; 0x23
 800540e:	f000 fa0a 	bl	8005826 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	799b      	ldrb	r3, [r3, #6]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <dwt_configure+0x202>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	79db      	ldrb	r3, [r3, #7]
 800541e:	461a      	mov	r2, r3
 8005420:	4b32      	ldr	r3, [pc, #200]	; (80054ec <dwt_configure+0x2b8>)
 8005422:	5c9b      	ldrb	r3, [r3, r2]
 8005424:	461a      	mov	r2, r3
 8005426:	2100      	movs	r1, #0
 8005428:	2021      	movs	r0, #33	; 0x21
 800542a:	f000 f9e9 	bl	8005800 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800542e:	2303      	movs	r3, #3
 8005430:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8005432:	2301      	movs	r3, #1
 8005434:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8005442:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	049b      	lsls	r3, r3, #18
 800544a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800544e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	051b      	lsls	r3, r3, #20
 8005454:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8005458:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800545a:	7dbb      	ldrb	r3, [r7, #22]
 800545c:	045b      	lsls	r3, r3, #17
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8005462:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	791b      	ldrb	r3, [r3, #4]
 8005468:	059b      	lsls	r3, r3, #22
 800546a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800546e:	4313      	orrs	r3, r2
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	7952      	ldrb	r2, [r2, #5]
 8005474:	06d2      	lsls	r2, r2, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	2100      	movs	r1, #0
 800547e:	201f      	movs	r0, #31
 8005480:	f000 f9ed 	bl	800585e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    dw1000local.txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	789a      	ldrb	r2, [r3, #2]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	4313      	orrs	r3, r2
 800548e:	b2db      	uxtb	r3, r3
 8005490:	041a      	lsls	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	79db      	ldrb	r3, [r3, #7]
 8005496:	035b      	lsls	r3, r3, #13
 8005498:	4313      	orrs	r3, r2
 800549a:	461a      	mov	r2, r3
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <dwt_configure+0x290>)
 800549e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, dw1000local.txFCTRL);
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <dwt_configure+0x290>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	461a      	mov	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	2008      	movs	r0, #8
 80054aa:	f000 f9d8 	bl	800585e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80054ae:	2242      	movs	r2, #66	; 0x42
 80054b0:	2100      	movs	r1, #0
 80054b2:	200d      	movs	r0, #13
 80054b4:	f000 f9a4 	bl	8005800 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	080076a8 	.word	0x080076a8
 80054c4:	200001a8 	.word	0x200001a8
 80054c8:	08007628 	.word	0x08007628
 80054cc:	08007648 	.word	0x08007648
 80054d0:	08007660 	.word	0x08007660
 80054d4:	08007668 	.word	0x08007668
 80054d8:	08007630 	.word	0x08007630
 80054dc:	08007678 	.word	0x08007678
 80054e0:	08007684 	.word	0x08007684
 80054e4:	08007688 	.word	0x08007688
 80054e8:	0800766c 	.word	0x0800766c
 80054ec:	08007674 	.word	0x08007674

080054f0 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	461a      	mov	r2, r3
 80054fe:	f641 0104 	movw	r1, #6148	; 0x1804
 8005502:	202e      	movs	r0, #46	; 0x2e
 8005504:	f000 f98f 	bl	8005826 <dwt_write16bitoffsetreg>
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	461a      	mov	r2, r3
 800551e:	2100      	movs	r1, #0
 8005520:	2018      	movs	r0, #24
 8005522:	f000 f980 	bl	8005826 <dwt_write16bitoffsetreg>
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	6039      	str	r1, [r7, #0]
 8005538:	80fb      	strh	r3, [r7, #6]
 800553a:	4613      	mov	r3, r2
 800553c:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((dw1000local.longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 800553e:	88ba      	ldrh	r2, [r7, #4]
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	4413      	add	r3, r2
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	dc09      	bgt.n	800555e <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	3b02      	subs	r3, #2
 800554e:	461a      	mov	r2, r3
 8005550:	88b9      	ldrh	r1, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2009      	movs	r0, #9
 8005556:	f000 f847 	bl	80055e8 <dwt_writetodevice>
        return DWT_SUCCESS;
 800555a:	2300      	movs	r3, #0
 800555c:	e001      	b.n	8005562 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 800555e:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	603a      	str	r2, [r7, #0]
 8005576:	80fb      	strh	r3, [r7, #6]
 8005578:	460b      	mov	r3, r1
 800557a:	80bb      	strh	r3, [r7, #4]
    assert((dw1000local.longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
#endif

    // Write the frame length to the TX frame control register
    // dw1000local.txFCTRL has kept configured bit rate information
    uint32 reg32 = dw1000local.txFCTRL | txFrameLength | (txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | (ranging << TX_FCTRL_TR_SHFT);
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <dwt_writetxfctrl+0x38>)
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	4313      	orrs	r3, r2
 8005584:	88ba      	ldrh	r2, [r7, #4]
 8005586:	0592      	lsls	r2, r2, #22
 8005588:	4313      	orrs	r3, r2
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	03d2      	lsls	r2, r2, #15
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	2100      	movs	r1, #0
 8005596:	2008      	movs	r0, #8
 8005598:	f000 f961 	bl	800585e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	200001a8 	.word	0x200001a8

080055a8 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
 80055b4:	4613      	mov	r3, r2
 80055b6:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 80055b8:	887a      	ldrh	r2, [r7, #2]
 80055ba:	8839      	ldrh	r1, [r7, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2011      	movs	r0, #17
 80055c0:	f000 f86e 	bl	80056a0 <dwt_readfromdevice>
}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2205      	movs	r2, #5
 80055d8:	2100      	movs	r1, #0
 80055da:	2015      	movs	r0, #21
 80055dc:	f000 f860 	bl	80056a0 <dwt_readfromdevice>
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <dwt_writetodevice>:
    uint16      recordNumber,
    uint16      index,
    uint32      length,
    const uint8 *buffer
)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60ba      	str	r2, [r7, #8]
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	4603      	mov	r3, r0
 80055f4:	81fb      	strh	r3, [r7, #14]
 80055f6:	460b      	mov	r3, r1
 80055f8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80055fe:	89bb      	ldrh	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	617a      	str	r2, [r7, #20]
 800560a:	89fa      	ldrh	r2, [r7, #14]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	f107 0118 	add.w	r1, r7, #24
 8005618:	440b      	add	r3, r1
 800561a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800561e:	e033      	b.n	8005688 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	617a      	str	r2, [r7, #20]
 8005626:	89fa      	ldrh	r2, [r7, #14]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	f107 0118 	add.w	r1, r7, #24
 8005634:	440b      	add	r3, r1
 8005636:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800563a:	89bb      	ldrh	r3, [r7, #12]
 800563c:	2b7f      	cmp	r3, #127	; 0x7f
 800563e:	d80a      	bhi.n	8005656 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	617a      	str	r2, [r7, #20]
 8005646:	89ba      	ldrh	r2, [r7, #12]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	f107 0118 	add.w	r1, r7, #24
 800564e:	440b      	add	r3, r1
 8005650:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005654:	e018      	b.n	8005688 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	617a      	str	r2, [r7, #20]
 800565c:	89ba      	ldrh	r2, [r7, #12]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	f107 0118 	add.w	r1, r7, #24
 800566a:	440b      	add	r3, r1
 800566c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	617a      	str	r2, [r7, #20]
 8005676:	89ba      	ldrh	r2, [r7, #12]
 8005678:	09d2      	lsrs	r2, r2, #7
 800567a:	b292      	uxth	r2, r2
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	f107 0118 	add.w	r1, r7, #24
 8005682:	440b      	add	r3, r1
 8005684:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	b298      	uxth	r0, r3
 800568c:	f107 0110 	add.w	r1, r7, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	f000 ff9e 	bl	80065d4 <writetospi>
} // end dwt_writetodevice()
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32  length,
    uint8   *buffer
)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60ba      	str	r2, [r7, #8]
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	4603      	mov	r3, r0
 80056ac:	81fb      	strh	r3, [r7, #14]
 80056ae:	460b      	mov	r3, r1
 80056b0:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80056b6:	89bb      	ldrh	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	617a      	str	r2, [r7, #20]
 80056c2:	89fa      	ldrh	r2, [r7, #14]
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	f107 0118 	add.w	r1, r7, #24
 80056ca:	440b      	add	r3, r1
 80056cc:	f803 2c08 	strb.w	r2, [r3, #-8]
 80056d0:	e033      	b.n	800573a <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	617a      	str	r2, [r7, #20]
 80056d8:	89fa      	ldrh	r2, [r7, #14]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	f107 0118 	add.w	r1, r7, #24
 80056e6:	440b      	add	r3, r1
 80056e8:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80056ec:	89bb      	ldrh	r3, [r7, #12]
 80056ee:	2b7f      	cmp	r3, #127	; 0x7f
 80056f0:	d80a      	bhi.n	8005708 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	617a      	str	r2, [r7, #20]
 80056f8:	89ba      	ldrh	r2, [r7, #12]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	f107 0118 	add.w	r1, r7, #24
 8005700:	440b      	add	r3, r1
 8005702:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005706:	e018      	b.n	800573a <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	617a      	str	r2, [r7, #20]
 800570e:	89ba      	ldrh	r2, [r7, #12]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	f107 0118 	add.w	r1, r7, #24
 800571c:	440b      	add	r3, r1
 800571e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	617a      	str	r2, [r7, #20]
 8005728:	89ba      	ldrh	r2, [r7, #12]
 800572a:	09d2      	lsrs	r2, r2, #7
 800572c:	b292      	uxth	r2, r2
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	f107 0118 	add.w	r1, r7, #24
 8005734:	440b      	add	r3, r1
 8005736:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	b298      	uxth	r0, r3
 800573e:	f107 0110 	add.w	r1, r7, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	f000 ff71 	bl	800662c <readfromspi>
} // end dwt_readfromdevice()
 800574a:	bf00      	nop
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID,int regOffset)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	b298      	uxth	r0, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	b299      	uxth	r1, r3
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	2204      	movs	r2, #4
 800576e:	f7ff ff97 	bl	80056a0 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8005772:	2303      	movs	r3, #3
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	e00b      	b.n	8005790 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	f107 010c 	add.w	r1, r7, #12
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	440a      	add	r2, r1
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	4413      	add	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3b01      	subs	r3, #1
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	daf0      	bge.n	8005778 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8005796:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 80057aa:	2300      	movs	r3, #0
 80057ac:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	b298      	uxth	r0, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	b299      	uxth	r1, r3
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	2202      	movs	r2, #2
 80057bc:	f7ff ff70 	bl	80056a0 <dwt_readfromdevice>

    regval = (buffer[1] << 8) + buffer[0] ;
 80057c0:	7b7b      	ldrb	r3, [r7, #13]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	7b3b      	ldrb	r3, [r7, #12]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80057d0:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	b298      	uxth	r0, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	b299      	uxth	r1, r3
 80057ec:	f107 030f 	add.w	r3, r7, #15
 80057f0:	2201      	movs	r2, #1
 80057f2:	f7ff ff55 	bl	80056a0 <dwt_readfromdevice>

    return regval ;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	b298      	uxth	r0, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	b299      	uxth	r1, r3
 8005816:	1dfb      	adds	r3, r7, #7
 8005818:	2201      	movs	r2, #1
 800581a:	f7ff fee5 	bl	80055e8 <dwt_writetodevice>
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16 regval)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	4613      	mov	r3, r2
 8005832:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	b29b      	uxth	r3, r3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	b298      	uxth	r0, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	b299      	uxth	r1, r3
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	2202      	movs	r2, #2
 8005852:	f7ff fec9 	bl	80055e8 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8005856:	bf00      	nop
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32 regval)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e00d      	b.n	800588c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	b2d9      	uxtb	r1, r3
 8005874:	f107 0210 	add.w	r2, r7, #16
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	460a      	mov	r2, r1
 800587e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	3301      	adds	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b03      	cmp	r3, #3
 8005890:	ddee      	ble.n	8005870 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	b298      	uxth	r0, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	b299      	uxth	r1, r3
 800589a:	f107 0310 	add.w	r3, r7, #16
 800589e:	2204      	movs	r2, #4
 80058a0:	f7ff fea2 	bl	80055e8 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint32 address)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	2104      	movs	r1, #4
 80058bc:	202d      	movs	r0, #45	; 0x2d
 80058be:	f7ff ffb2 	bl	8005826 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80058c2:	2203      	movs	r2, #3
 80058c4:	2106      	movs	r1, #6
 80058c6:	202d      	movs	r0, #45	; 0x2d
 80058c8:	f7ff ff9a 	bl	8005800 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80058cc:	2200      	movs	r2, #0
 80058ce:	2106      	movs	r1, #6
 80058d0:	202d      	movs	r0, #45	; 0x2d
 80058d2:	f7ff ff95 	bl	8005800 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80058d6:	210a      	movs	r1, #10
 80058d8:	202d      	movs	r0, #45	; 0x2d
 80058da:	f7ff ff3a 	bl	8005752 <dwt_read32bitoffsetreg>
 80058de:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 80058e0:	68fb      	ldr	r3, [r7, #12]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80058ee:	2200      	movs	r2, #0
 80058f0:	2102      	movs	r1, #2
 80058f2:	202c      	movs	r0, #44	; 0x2c
 80058f4:	f7ff ff84 	bl	8005800 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80058f8:	2202      	movs	r2, #2
 80058fa:	2102      	movs	r1, #2
 80058fc:	202c      	movs	r0, #44	; 0x2c
 80058fe:	f7ff ff7f 	bl	8005800 <dwt_write8bitoffsetreg>
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}

08005906 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800590e:	226d      	movs	r2, #109	; 0x6d
 8005910:	f640 0106 	movw	r1, #2054	; 0x806
 8005914:	202e      	movs	r0, #46	; 0x2e
 8005916:	f7ff ff73 	bl	8005800 <dwt_write8bitoffsetreg>

    if(prfIndex)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8005920:	f240 6207 	movw	r2, #1543	; 0x607
 8005924:	f641 0106 	movw	r1, #6150	; 0x1806
 8005928:	202e      	movs	r0, #46	; 0x2e
 800592a:	f7ff ff7c 	bl	8005826 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800592e:	e006      	b.n	800593e <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8005930:	f241 6207 	movw	r2, #5639	; 0x1607
 8005934:	f641 0106 	movw	r1, #6150	; 0x1806
 8005938:	202e      	movs	r0, #46	; 0x2e
 800593a:	f7ff ff74 	bl	8005826 <dwt_write16bitoffsetreg>
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 800594a:	200e      	movs	r0, #14
 800594c:	f000 f8dc 	bl	8005b08 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8005950:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005954:	2106      	movs	r1, #6
 8005956:	202d      	movs	r0, #45	; 0x2d
 8005958:	f7ff ff65 	bl	8005826 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800595c:	2001      	movs	r0, #1
 800595e:	f000 fe2d 	bl	80065bc <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8005962:	2001      	movs	r0, #1
 8005964:	f000 f8d0 	bl	8005b08 <_dwt_enableclocks>
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}

0800596c <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
    uint32 status = dw1000local.cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 8005972:	2100      	movs	r1, #0
 8005974:	200f      	movs	r0, #15
 8005976:	f7ff feec 	bl	8005752 <dwt_read32bitoffsetreg>
 800597a:	4602      	mov	r2, r0
 800597c:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <dwt_isr+0x18c>)
 800597e:	61da      	str	r2, [r3, #28]
 8005980:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <dwt_isr+0x18c>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	60bb      	str	r3, [r7, #8]

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05c      	beq.n	8005a4a <dwt_isr+0xde>
    {
        uint16 finfo16;
        uint16 len;

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 8005990:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 8005994:	2100      	movs	r1, #0
 8005996:	200f      	movs	r0, #15
 8005998:	f7ff ff61 	bl	800585e <dwt_write32bitoffsetreg>

        dw1000local.cbData.rx_flags = 0;
 800599c:	4b56      	ldr	r3, [pc, #344]	; (8005af8 <dwt_isr+0x18c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 80059a4:	2100      	movs	r1, #0
 80059a6:	2010      	movs	r0, #16
 80059a8:	f7ff fefa 	bl	80057a0 <dwt_read16bitoffsetreg>
 80059ac:	4603      	mov	r3, r0
 80059ae:	80fb      	strh	r3, [r7, #6]

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b6:	81fb      	strh	r3, [r7, #14]
        if(dw1000local.longFrames == 0)
 80059b8:	4b4f      	ldr	r3, [pc, #316]	; (8005af8 <dwt_isr+0x18c>)
 80059ba:	7a1b      	ldrb	r3, [r3, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <dwt_isr+0x5c>
        {
            len &= RX_FINFO_RXFLEN_MASK;
 80059c0:	89fb      	ldrh	r3, [r7, #14]
 80059c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c6:	81fb      	strh	r3, [r7, #14]
        }
        dw1000local.cbData.datalength = len;
 80059c8:	4a4b      	ldr	r2, [pc, #300]	; (8005af8 <dwt_isr+0x18c>)
 80059ca:	89fb      	ldrh	r3, [r7, #14]
 80059cc:	8413      	strh	r3, [r2, #32]

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
 80059ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da08      	bge.n	80059e8 <dwt_isr+0x7c>
        {
            dw1000local.cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 80059d6:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <dwt_isr+0x18c>)
 80059d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b45      	ldr	r3, [pc, #276]	; (8005af8 <dwt_isr+0x18c>)
 80059e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, dw1000local.cbData.fctrl);
 80059e8:	4b44      	ldr	r3, [pc, #272]	; (8005afc <dwt_isr+0x190>)
 80059ea:	2202      	movs	r2, #2
 80059ec:	2100      	movs	r1, #0
 80059ee:	2011      	movs	r0, #17
 80059f0:	f7ff fe56 	bl	80056a0 <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((dw1000local.cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d014      	beq.n	8005a28 <dwt_isr+0xbc>
 80059fe:	4b3e      	ldr	r3, [pc, #248]	; (8005af8 <dwt_isr+0x18c>)
 8005a00:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10d      	bne.n	8005a28 <dwt_isr+0xbc>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	2100      	movs	r1, #0
 8005a10:	200f      	movs	r0, #15
 8005a12:	f7ff ff24 	bl	800585e <dwt_write32bitoffsetreg>
            dw1000local.cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8005a16:	4b38      	ldr	r3, [pc, #224]	; (8005af8 <dwt_isr+0x18c>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f023 0308 	bic.w	r3, r3, #8
 8005a1e:	4a36      	ldr	r2, [pc, #216]	; (8005af8 <dwt_isr+0x18c>)
 8005a20:	61d3      	str	r3, [r2, #28]
            dw1000local.wait4resp = 0;
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <dwt_isr+0x18c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	769a      	strb	r2, [r3, #26]
        }

        // Call the corresponding callback if present
        if(dw1000local.cbRxOk != NULL)
 8005a28:	4b33      	ldr	r3, [pc, #204]	; (8005af8 <dwt_isr+0x18c>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <dwt_isr+0xcc>
        {
            dw1000local.cbRxOk(&dw1000local.cbData);
 8005a30:	4b31      	ldr	r3, [pc, #196]	; (8005af8 <dwt_isr+0x18c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	4832      	ldr	r0, [pc, #200]	; (8005b00 <dwt_isr+0x194>)
 8005a36:	4798      	blx	r3
        }

        if (dw1000local.dblbuffon)
 8005a38:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <dwt_isr+0x18c>)
 8005a3a:	7c5b      	ldrb	r3, [r3, #17]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <dwt_isr+0xde>
        {
            // Toggle the Host side Receive Buffer Pointer
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 8005a40:	2201      	movs	r2, #1
 8005a42:	2103      	movs	r1, #3
 8005a44:	200d      	movs	r0, #13
 8005a46:	f7ff fedb 	bl	8005800 <dwt_write8bitoffsetreg>
        }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d019      	beq.n	8005a88 <dwt_isr+0x11c>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 8005a54:	22f8      	movs	r2, #248	; 0xf8
 8005a56:	2100      	movs	r1, #0
 8005a58:	200f      	movs	r0, #15
 8005a5a:	f7ff ff00 	bl	800585e <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && dw1000local.wait4resp)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <dwt_isr+0x10c>
 8005a68:	4b23      	ldr	r3, [pc, #140]	; (8005af8 <dwt_isr+0x18c>)
 8005a6a:	7e9b      	ldrb	r3, [r3, #26]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <dwt_isr+0x10c>
        {
            dwt_forcetrxoff(); // Turn the RX off
 8005a70:	f000 f956 	bl	8005d20 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 8005a74:	f000 f9e0 	bl	8005e38 <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(dw1000local.cbTxDone != NULL)
 8005a78:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <dwt_isr+0x18c>)
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <dwt_isr+0x11c>
        {
            dw1000local.cbTxDone(&dw1000local.cbData);
 8005a80:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <dwt_isr+0x18c>)
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	481e      	ldr	r0, [pc, #120]	; (8005b00 <dwt_isr+0x194>)
 8005a86:	4798      	blx	r3
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f403 1308 	and.w	r3, r3, #2228224	; 0x220000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <dwt_isr+0x150>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 8005a92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a96:	2100      	movs	r1, #0
 8005a98:	200f      	movs	r0, #15
 8005a9a:	f7ff fee0 	bl	800585e <dwt_write32bitoffsetreg>

        dw1000local.wait4resp = 0;
 8005a9e:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <dwt_isr+0x18c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	769a      	strb	r2, [r3, #26]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
 8005aa4:	f000 f93c 	bl	8005d20 <dwt_forcetrxoff>
        dwt_rxreset();
 8005aa8:	f000 f9c6 	bl	8005e38 <dwt_rxreset>

        // Call the corresponding callback if present
        if(dw1000local.cbRxTo != NULL)
 8005aac:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <dwt_isr+0x18c>)
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <dwt_isr+0x150>
        {
            dw1000local.cbRxTo(&dw1000local.cbData);
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <dwt_isr+0x18c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	4811      	ldr	r0, [pc, #68]	; (8005b00 <dwt_isr+0x194>)
 8005aba:	4798      	blx	r3
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <dwt_isr+0x198>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <dwt_isr+0x182>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 8005ac6:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <dwt_isr+0x198>)
 8005ac8:	2100      	movs	r1, #0
 8005aca:	200f      	movs	r0, #15
 8005acc:	f7ff fec7 	bl	800585e <dwt_write32bitoffsetreg>

        dw1000local.wait4resp = 0;
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <dwt_isr+0x18c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	769a      	strb	r2, [r3, #26]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
 8005ad6:	f000 f923 	bl	8005d20 <dwt_forcetrxoff>
        dwt_rxreset();
 8005ada:	f000 f9ad 	bl	8005e38 <dwt_rxreset>

        // Call the corresponding callback if present
        if(dw1000local.cbRxErr != NULL)
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <dwt_isr+0x18c>)
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <dwt_isr+0x182>
        {
            dw1000local.cbRxErr(&dw1000local.cbData);
 8005ae6:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <dwt_isr+0x18c>)
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aea:	4805      	ldr	r0, [pc, #20]	; (8005b00 <dwt_isr+0x194>)
 8005aec:	4798      	blx	r3
        }
    }
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200001a8 	.word	0x200001a8
 8005afc:	200001ca 	.word	0x200001ca
 8005b00:	200001c4 	.word	0x200001c4
 8005b04:	24059000 	.word	0x24059000

08005b08 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8005b10:	f107 030c 	add.w	r3, r7, #12
 8005b14:	2202      	movs	r2, #2
 8005b16:	2100      	movs	r1, #0
 8005b18:	2036      	movs	r0, #54	; 0x36
 8005b1a:	f7ff fdc1 	bl	80056a0 <dwt_readfromdevice>
    switch(clocks)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b0e      	cmp	r3, #14
 8005b22:	d876      	bhi.n	8005c12 <_dwt_enableclocks+0x10a>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <_dwt_enableclocks+0x24>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b79 	.word	0x08005b79
 8005b30:	08005b69 	.word	0x08005b69
 8005b34:	08005b8f 	.word	0x08005b8f
 8005b38:	08005c13 	.word	0x08005c13
 8005b3c:	08005c13 	.word	0x08005c13
 8005b40:	08005c13 	.word	0x08005c13
 8005b44:	08005c13 	.word	0x08005c13
 8005b48:	08005ba5 	.word	0x08005ba5
 8005b4c:	08005bc5 	.word	0x08005bc5
 8005b50:	08005c13 	.word	0x08005c13
 8005b54:	08005c13 	.word	0x08005c13
 8005b58:	08005bdb 	.word	0x08005bdb
 8005b5c:	08005be7 	.word	0x08005be7
 8005b60:	08005bf3 	.word	0x08005bf3
 8005b64:	08005c09 	.word	0x08005c09
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8005b6c:	7b7b      	ldrb	r3, [r7, #13]
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	737b      	strb	r3, [r7, #13]
        }
        break;
 8005b76:	e04d      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8005b78:	7b3b      	ldrb	r3, [r7, #12]
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	f023 0303 	bic.w	r3, r3, #3
 8005b80:	b25b      	sxtb	r3, r3
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	733b      	strb	r3, [r7, #12]
        }
        break;
 8005b8c:	e042      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8005b8e:	7b3b      	ldrb	r3, [r7, #12]
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	f043 0302 	orr.w	r3, r3, #2
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8005ba2:	e037      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8005ba4:	7b3b      	ldrb	r3, [r7, #12]
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8005bb8:	7b7b      	ldrb	r3, [r7, #13]
 8005bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	737b      	strb	r3, [r7, #13]
        }
        break;
 8005bc2:	e027      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8005bc4:	7b3b      	ldrb	r3, [r7, #12]
 8005bc6:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8005bce:	7b7b      	ldrb	r3, [r7, #13]
 8005bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8005bd8:	e01c      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8005bda:	7b7b      	ldrb	r3, [r7, #13]
 8005bdc:	f043 0302 	orr.w	r3, r3, #2
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8005be4:	e016      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8005be6:	7b7b      	ldrb	r3, [r7, #13]
 8005be8:	f023 0302 	bic.w	r3, r3, #2
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	737b      	strb	r3, [r7, #13]
        }
        break;
 8005bf0:	e010      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8005bf2:	7b3b      	ldrb	r3, [r7, #12]
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005bfa:	b25b      	sxtb	r3, r3
 8005bfc:	f043 0320 	orr.w	r3, r3, #32
 8005c00:	b25b      	sxtb	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	733b      	strb	r3, [r7, #12]
        }
        break;
 8005c06:	e005      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8005c10:	e000      	b.n	8005c14 <_dwt_enableclocks+0x10c>
        default:
        break;
 8005c12:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	2036      	movs	r0, #54	; 0x36
 8005c1e:	f7ff fce3 	bl	80055e8 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8005c22:	f107 030c 	add.w	r3, r7, #12
 8005c26:	3301      	adds	r3, #1
 8005c28:	2201      	movs	r2, #1
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	2036      	movs	r0, #54	; 0x36
 8005c2e:	f7ff fcdb 	bl	80055e8 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop

08005c3c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8005c40:	2000      	movs	r0, #0
 8005c42:	f7ff ff61 	bl	8005b08 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8005c46:	2200      	movs	r2, #0
 8005c48:	2104      	movs	r1, #4
 8005c4a:	2036      	movs	r0, #54	; 0x36
 8005c4c:	f7ff fdeb 	bl	8005826 <dwt_write16bitoffsetreg>
}
 8005c50:	bf00      	nop
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	2101      	movs	r1, #1
 8005c60:	200a      	movs	r0, #10
 8005c62:	f7ff fdfc 	bl	800585e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <dwt_starttx>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will fail if the delayed time has passed)
 */
int dwt_starttx(uint8 mode)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8005c82:	2300      	movs	r3, #0
 8005c84:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <dwt_starttx+0x36>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	461a      	mov	r2, r3
 8005c98:	2100      	movs	r1, #0
 8005c9a:	200d      	movs	r0, #13
 8005c9c:	f7ff fdb0 	bl	8005800 <dwt_write8bitoffsetreg>
        dw1000local.wait4resp = 1;
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <dwt_starttx+0xac>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	769a      	strb	r2, [r3, #26]
    }

    if (mode & DWT_START_TX_DELAYED)
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d026      	beq.n	8005cfe <dwt_starttx+0x8e>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	f043 0306 	orr.w	r3, r3, #6
 8005cb6:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	200d      	movs	r0, #13
 8005cc0:	f7ff fd9e 	bl	8005800 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8005cc4:	2103      	movs	r1, #3
 8005cc6:	200f      	movs	r0, #15
 8005cc8:	f7ff fd6a 	bl	80057a0 <dwt_read16bitoffsetreg>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8005cd0:	893b      	ldrh	r3, [r7, #8]
 8005cd2:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <dwt_starttx+0x70>
        {
            retval = DWT_SUCCESS ; // All okay
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e018      	b.n	8005d12 <dwt_starttx+0xa2>
        }
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
 8005ce0:	2340      	movs	r3, #64	; 0x40
 8005ce2:	72fb      	strb	r3, [r7, #11]
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	2100      	movs	r1, #0
 8005cea:	200d      	movs	r0, #13
 8005cec:	f7ff fd88 	bl	8005800 <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            dw1000local.wait4resp = 0;
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <dwt_starttx+0xac>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	769a      	strb	r2, [r3, #26]
            retval = DWT_ERROR ; // Failed !
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e009      	b.n	8005d12 <dwt_starttx+0xa2>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	200d      	movs	r0, #13
 8005d0e:	f7ff fd77 	bl	8005800 <dwt_write8bitoffsetreg>
    }

    return retval;
 8005d12:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	200001a8 	.word	0x200001a8

08005d20 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8005d26:	2100      	movs	r1, #0
 8005d28:	200e      	movs	r0, #14
 8005d2a:	f7ff fd12 	bl	8005752 <dwt_read32bitoffsetreg>
 8005d2e:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8005d30:	f000 fc26 	bl	8006580 <decamutexon>
 8005d34:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8005d36:	2200      	movs	r2, #0
 8005d38:	2100      	movs	r1, #0
 8005d3a:	200e      	movs	r0, #14
 8005d3c:	f7ff fd8f 	bl	800585e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8005d40:	2240      	movs	r2, #64	; 0x40
 8005d42:	2100      	movs	r1, #0
 8005d44:	200d      	movs	r0, #13
 8005d46:	f7ff fd5b 	bl	8005800 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8005d4a:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <dwt_forcetrxoff+0x58>)
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	200f      	movs	r0, #15
 8005d50:	f7ff fd85 	bl	800585e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8005d54:	f000 f814 	bl	8005d80 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	200e      	movs	r0, #14
 8005d5e:	f7ff fd7e 	bl	800585e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8005d62:	6838      	ldr	r0, [r7, #0]
 8005d64:	f000 fc1d 	bl	80065a2 <decamutexoff>
    dw1000local.wait4resp = 0;
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <dwt_forcetrxoff+0x5c>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	769a      	strb	r2, [r3, #26]

} // end deviceforcetrxoff()
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2427fff8 	.word	0x2427fff8
 8005d7c:	200001a8 	.word	0x200001a8

08005d80 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8005d86:	2103      	movs	r1, #3
 8005d88:	200f      	movs	r0, #15
 8005d8a:	f7ff fd26 	bl	80057da <dwt_read8bitoffsetreg>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8005d92:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8005d98:	4053      	eors	r3, r2
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8005da2:	2201      	movs	r2, #1
 8005da4:	2103      	movs	r1, #3
 8005da6:	200d      	movs	r0, #13
 8005da8:	f7ff fd2a 	bl	8005800 <dwt_write8bitoffsetreg>
    }
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8005dc6:	f7ff ffdb 	bl	8005d80 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8005dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dce:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8005dda:	89fb      	ldrh	r3, [r7, #14]
 8005ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005de0:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005de2:	89fb      	ldrh	r3, [r7, #14]
 8005de4:	461a      	mov	r2, r3
 8005de6:	2100      	movs	r1, #0
 8005de8:	200d      	movs	r0, #13
 8005dea:	f7ff fd1c 	bl	8005826 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01a      	beq.n	8005e2e <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8005df8:	2103      	movs	r1, #3
 8005dfa:	200f      	movs	r0, #15
 8005dfc:	f7ff fced 	bl	80057da <dwt_read8bitoffsetreg>
 8005e00:	4603      	mov	r3, r0
 8005e02:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8005e04:	7b7b      	ldrb	r3, [r7, #13]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00f      	beq.n	8005e2e <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8005e0e:	f7ff ff87 	bl	8005d20 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8005e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e20:	2100      	movs	r1, #0
 8005e22:	200d      	movs	r0, #13
 8005e24:	f7ff fcff 	bl	8005826 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	e000      	b.n	8005e30 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8005e2e:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8005e3c:	22e0      	movs	r2, #224	; 0xe0
 8005e3e:	2103      	movs	r1, #3
 8005e40:	2036      	movs	r0, #54	; 0x36
 8005e42:	f7ff fcdd 	bl	8005800 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8005e46:	22f0      	movs	r2, #240	; 0xf0
 8005e48:	2103      	movs	r1, #3
 8005e4a:	2036      	movs	r0, #54	; 0x36
 8005e4c:	f7ff fcd8 	bl	8005800 <dwt_write8bitoffsetreg>
}
 8005e50:	bf00      	nop
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8005e58:	f7ff fef0 	bl	8005c3c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2100      	movs	r1, #0
 8005e60:	202c      	movs	r0, #44	; 0x2c
 8005e62:	f7ff fce0 	bl	8005826 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8005e66:	2200      	movs	r2, #0
 8005e68:	2106      	movs	r1, #6
 8005e6a:	202c      	movs	r0, #44	; 0x2c
 8005e6c:	f7ff fcc8 	bl	8005800 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8005e70:	f7ff fd3b 	bl	80058ea <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8005e74:	2200      	movs	r2, #0
 8005e76:	2103      	movs	r1, #3
 8005e78:	2036      	movs	r0, #54	; 0x36
 8005e7a:	f7ff fcc1 	bl	8005800 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f000 fb9c 	bl	80065bc <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8005e84:	22f0      	movs	r2, #240	; 0xf0
 8005e86:	2103      	movs	r1, #3
 8005e88:	2036      	movs	r0, #54	; 0x36
 8005e8a:	f7ff fcb9 	bl	8005800 <dwt_write8bitoffsetreg>

    dw1000local.wait4resp = 0;
 8005e8e:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <dwt_softreset+0x44>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	769a      	strb	r2, [r3, #26]
}
 8005e94:	bf00      	nop
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200001a8 	.word	0x200001a8

08005e9c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	b25b      	sxtb	r3, r3
 8005eb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005eb4:	b25b      	sxtb	r3, r3
 8005eb6:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	210e      	movs	r1, #14
 8005ebe:	202b      	movs	r0, #43	; 0x2b
 8005ec0:	f7ff fc9e 	bl	8005800 <dwt_write8bitoffsetreg>
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <main>:
/* Declaration of static functions. */
static uint64 get_rx_timestamp_u64(void);
static void resp_msg_set_ts(uint8 *ts_field, const uint64 ts);

int main(void)
{
 8005ecc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
  HAL_Init();
 8005ed4:	f7fa f93a 	bl	800014c <HAL_Init>

  SystemClock_Config();
 8005ed8:	f000 f9dc 	bl	8006294 <SystemClock_Config>

  MX_GPIO_Init();
 8005edc:	f000 faaa 	bl	8006434 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005ee0:	f000 fa3e 	bl	8006360 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8005ee4:	f000 fe56 	bl	8006b94 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8005ee8:	f000 fa76 	bl	80063d8 <MX_USART1_UART_Init>

  setup_DW1000RSTnIRQ(0);
 8005eec:	2000      	movs	r0, #0
 8005eee:	f000 fc7d 	bl	80067ec <setup_DW1000RSTnIRQ>
  //port_DisableEXT_IRQ();
  //dw_main();
  /* Start with board specific hardware init. */
  peripherals_init();
 8005ef2:	f000 fc35 	bl	8006760 <peripherals_init>
  //  lcd_display_str(APP_NAME);

  /* Reset and initialise DW1000.
  * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
  * performance. */
  reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8005ef6:	f000 fc57 	bl	80067a8 <reset_DW1000>
  port_set_dw1000_slowrate();
 8005efa:	f000 fcb1 	bl	8006860 <port_set_dw1000_slowrate>
  if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8005efe:	2001      	movs	r0, #1
 8005f00:	f7ff f8e8 	bl	80050d4 <dwt_initialise>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d100      	bne.n	8005f0e <main+0x42>
  {
	  //lcd_display_str("INIT FAILED");
      while (1)
 8005f0c:	e7fe      	b.n	8005f0c <main+0x40>
      { };
  }
  port_set_dw1000_fastrate();
 8005f0e:	f000 fcb3 	bl	8006878 <port_set_dw1000_fastrate>

  /* Configure DW1000. See NOTE 5 below. */
  dwt_configure(&config);
 8005f12:	48a0      	ldr	r0, [pc, #640]	; (8006194 <main+0x2c8>)
 8005f14:	f7ff f98e 	bl	8005234 <dwt_configure>

  /* Apply default antenna delay value. See NOTE 2 below. */
  dwt_setrxantennadelay(RX_ANT_DLY);
 8005f18:	f244 0034 	movw	r0, #16436	; 0x4034
 8005f1c:	f7ff fae8 	bl	80054f0 <dwt_setrxantennadelay>
  dwt_settxantennadelay(TX_ANT_DLY);
 8005f20:	f244 0034 	movw	r0, #16436	; 0x4034
 8005f24:	f7ff faf4 	bl	8005510 <dwt_settxantennadelay>

  uint32_t timeStamp = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
  /* Loop forever responding to ranging requests. */
  while (1)
  {
      /* Activate reception immediately. */
      dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7ff ff41 	bl	8005db4 <dwt_rxenable>
       /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
      while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8005f32:	bf00      	nop
 8005f34:	2100      	movs	r1, #0
 8005f36:	200f      	movs	r0, #15
 8005f38:	f7ff fc0b 	bl	8005752 <dwt_read32bitoffsetreg>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b96      	ldr	r3, [pc, #600]	; (8006198 <main+0x2cc>)
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	4b95      	ldr	r3, [pc, #596]	; (8006198 <main+0x2cc>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b95      	ldr	r3, [pc, #596]	; (800619c <main+0x2d0>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f2      	beq.n	8005f34 <main+0x68>
      {}
      if (status_reg & SYS_STATUS_RXFCG)
 8005f4e:	4b92      	ldr	r3, [pc, #584]	; (8006198 <main+0x2cc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8090 	beq.w	800607c <main+0x1b0>
      {
    	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f60:	488f      	ldr	r0, [pc, #572]	; (80061a0 <main+0x2d4>)
 8005f62:	f7fa fc40 	bl	80007e6 <HAL_GPIO_TogglePin>
          uint32 frame_len;
          /* Clear good RX frame event in the DW1000 status register. */
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8005f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	200f      	movs	r0, #15
 8005f6e:	f7ff fc76 	bl	800585e <dwt_write32bitoffsetreg>
          /* A frame has been received, read it into the local buffer. */
          frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8005f72:	2100      	movs	r1, #0
 8005f74:	2010      	movs	r0, #16
 8005f76:	f7ff fbec 	bl	8005752 <dwt_read32bitoffsetreg>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f80:	613b      	str	r3, [r7, #16]
          if (frame_len <= RX_BUFFER_LEN)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d806      	bhi.n	8005f98 <main+0xcc>
          {
              dwt_readrxdata(rx_buffer, frame_len, 0);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4619      	mov	r1, r3
 8005f92:	4884      	ldr	r0, [pc, #528]	; (80061a4 <main+0x2d8>)
 8005f94:	f7ff fb08 	bl	80055a8 <dwt_readrxdata>
          }
          /* Check that the frame is a poll sent by "SS TWR initiator" example.
           * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
           rx_buffer[ALL_MSG_SN_IDX] = 0;
 8005f98:	4b82      	ldr	r3, [pc, #520]	; (80061a4 <main+0x2d8>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	709a      	strb	r2, [r3, #2]
           if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4981      	ldr	r1, [pc, #516]	; (80061a8 <main+0x2dc>)
 8005fa2:	4880      	ldr	r0, [pc, #512]	; (80061a4 <main+0x2d8>)
 8005fa4:	f001 fad2 	bl	800754c <memcmp>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d16d      	bne.n	800608a <main+0x1be>
           {
        	   uint32 resp_tx_time;
               int ret;

               /* Retrieve poll reception timestamp. */
               poll_rx_ts = get_rx_timestamp_u64();
 8005fae:	f000 f911 	bl	80061d4 <get_rx_timestamp_u64>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	497d      	ldr	r1, [pc, #500]	; (80061ac <main+0x2e0>)
 8005fb8:	e9c1 2300 	strd	r2, r3, [r1]

                /* Compute final message transmission time. See NOTE 7 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8005fbc:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <main+0x2e0>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f112 72fa 	adds.w	r2, r2, #32768000	; 0x1f40000
 8005fc6:	f143 0300 	adc.w	r3, r3, #0
 8005fca:	0a14      	lsrs	r4, r2, #8
 8005fcc:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8005fd0:	0a1d      	lsrs	r5, r3, #8
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	60fb      	str	r3, [r7, #12]
                dwt_setdelayedtrxtime(resp_tx_time);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff fe3c 	bl	8005c54 <dwt_setdelayedtrxtime>

                /* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
                resp_tx_ts = (((uint64)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8005fe8:	ea4f 2802 	mov.w	r8, r2, lsl #8
 8005fec:	4a70      	ldr	r2, [pc, #448]	; (80061b0 <main+0x2e4>)
 8005fee:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8005ff2:	ea02 0208 	and.w	r2, r2, r8
 8005ff6:	ea03 0309 	and.w	r3, r3, r9
 8005ffa:	f244 0034 	movw	r0, #16436	; 0x4034
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	1812      	adds	r2, r2, r0
 8006004:	eb43 0301 	adc.w	r3, r3, r1
 8006008:	496a      	ldr	r1, [pc, #424]	; (80061b4 <main+0x2e8>)
 800600a:	e9c1 2300 	strd	r2, r3, [r1]

                /* Write all timestamps in the final message. See NOTE 8 below. */
                resp_msg_set_ts(&tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX], poll_rx_ts);
 800600e:	4b67      	ldr	r3, [pc, #412]	; (80061ac <main+0x2e0>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	4868      	ldr	r0, [pc, #416]	; (80061b8 <main+0x2ec>)
 8006016:	f000 f911 	bl	800623c <resp_msg_set_ts>
                resp_msg_set_ts(&tx_resp_msg[RESP_MSG_RESP_TX_TS_IDX], resp_tx_ts);
 800601a:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <main+0x2e8>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	4866      	ldr	r0, [pc, #408]	; (80061bc <main+0x2f0>)
 8006022:	f000 f90b 	bl	800623c <resp_msg_set_ts>

                /* Write and send the response message. See NOTE 9 below. */
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8006026:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <main+0x2f4>)
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	4b66      	ldr	r3, [pc, #408]	; (80061c4 <main+0x2f8>)
 800602c:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 800602e:	2200      	movs	r2, #0
 8006030:	4964      	ldr	r1, [pc, #400]	; (80061c4 <main+0x2f8>)
 8006032:	2014      	movs	r0, #20
 8006034:	f7ff fa7b 	bl	800552e <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8006038:	2201      	movs	r2, #1
 800603a:	2100      	movs	r1, #0
 800603c:	2014      	movs	r0, #20
 800603e:	f7ff fa95 	bl	800556c <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 8006042:	2001      	movs	r0, #1
 8006044:	f7ff fe14 	bl	8005c70 <dwt_starttx>
 8006048:	60b8      	str	r0, [r7, #8]

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 10 below. */
                if (ret == DWT_SUCCESS)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d11c      	bne.n	800608a <main+0x1be>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 6 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8006050:	bf00      	nop
 8006052:	2100      	movs	r1, #0
 8006054:	200f      	movs	r0, #15
 8006056:	f7ff fb7c 	bl	8005752 <dwt_read32bitoffsetreg>
 800605a:	4603      	mov	r3, r0
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f6      	beq.n	8006052 <main+0x186>
                    { };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	2100      	movs	r1, #0
 8006068:	200f      	movs	r0, #15
 800606a:	f7ff fbf8 	bl	800585e <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the poll message (modulo 256). */
                    frame_seq_nb++;
 800606e:	4b54      	ldr	r3, [pc, #336]	; (80061c0 <main+0x2f4>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4b52      	ldr	r3, [pc, #328]	; (80061c0 <main+0x2f4>)
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e006      	b.n	800608a <main+0x1be>
           }
      }
      else
      {
    	  /* Clear RX error events in the DW1000 status register. */
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 800607c:	4a52      	ldr	r2, [pc, #328]	; (80061c8 <main+0x2fc>)
 800607e:	2100      	movs	r1, #0
 8006080:	200f      	movs	r0, #15
 8006082:	f7ff fbec 	bl	800585e <dwt_write32bitoffsetreg>

          /* Reset RX to properly reinitialise LDE operation. */
          dwt_rxreset();
 8006086:	f7ff fed7 	bl	8005e38 <dwt_rxreset>
      }
	  uint8_t receiveData;
      //if(USART_GetFlagStatus(USART1, USART_FLAG_RXNE)==SET){
	  if(HAL_UART_Receive(&huart1, &receiveData, (uint16_t) 1, (uint32_t) 1)==0){
 800608a:	1df9      	adds	r1, r7, #7
 800608c:	2301      	movs	r3, #1
 800608e:	2201      	movs	r2, #1
 8006090:	484e      	ldr	r0, [pc, #312]	; (80061cc <main+0x300>)
 8006092:	f7fc fc02 	bl	800289a <HAL_UART_Receive>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d159      	bne.n	8006150 <main+0x284>
    	  //uint8_t receiveData = USART_ReceiveData(USART1);
    	  if(receiveData == 97){
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	2b61      	cmp	r3, #97	; 0x61
 80060a0:	d11a      	bne.n	80060d8 <main+0x20c>
    		  timeStamp = HAL_GetTick();
 80060a2:	f7fa f893 	bl	80001cc <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060ae:	4848      	ldr	r0, [pc, #288]	; (80061d0 <main+0x304>)
 80060b0:	f7fa fb81 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ba:	4845      	ldr	r0, [pc, #276]	; (80061d0 <main+0x304>)
 80060bc:	f7fa fb7b 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80060c0:	2200      	movs	r2, #0
 80060c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060c6:	4842      	ldr	r0, [pc, #264]	; (80061d0 <main+0x304>)
 80060c8:	f7fa fb75 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80060cc:	2200      	movs	r2, #0
 80060ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d2:	483f      	ldr	r0, [pc, #252]	; (80061d0 <main+0x304>)
 80060d4:	f7fa fb6f 	bl	80007b6 <HAL_GPIO_WritePin>
    	  }
    	  //  for(i=4500000; i>0; i--);
    	  if(receiveData == 98){
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	2b62      	cmp	r3, #98	; 0x62
 80060dc:	d11a      	bne.n	8006114 <main+0x248>
    		  timeStamp = HAL_GetTick();
 80060de:	f7fa f875 	bl	80001cc <HAL_GetTick>
 80060e2:	6178      	str	r0, [r7, #20]
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80060e4:	2201      	movs	r2, #1
 80060e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060ea:	4839      	ldr	r0, [pc, #228]	; (80061d0 <main+0x304>)
 80060ec:	f7fa fb63 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060f6:	4836      	ldr	r0, [pc, #216]	; (80061d0 <main+0x304>)
 80060f8:	f7fa fb5d 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80060fc:	2201      	movs	r2, #1
 80060fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006102:	4833      	ldr	r0, [pc, #204]	; (80061d0 <main+0x304>)
 8006104:	f7fa fb57 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800610e:	4830      	ldr	r0, [pc, #192]	; (80061d0 <main+0x304>)
 8006110:	f7fa fb51 	bl	80007b6 <HAL_GPIO_WritePin>
    		  //for(i=4500000; i>0; i--);
    	  }
    	  if(receiveData == 99){
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b63      	cmp	r3, #99	; 0x63
 8006118:	d11a      	bne.n	8006150 <main+0x284>
    		  timeStamp = HAL_GetTick();
 800611a:	f7fa f857 	bl	80001cc <HAL_GetTick>
 800611e:	6178      	str	r0, [r7, #20]
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006120:	2200      	movs	r2, #0
 8006122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006126:	482a      	ldr	r0, [pc, #168]	; (80061d0 <main+0x304>)
 8006128:	f7fa fb45 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800612c:	2201      	movs	r2, #1
 800612e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006132:	4827      	ldr	r0, [pc, #156]	; (80061d0 <main+0x304>)
 8006134:	f7fa fb3f 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8006138:	2200      	movs	r2, #0
 800613a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800613e:	4824      	ldr	r0, [pc, #144]	; (80061d0 <main+0x304>)
 8006140:	f7fa fb39 	bl	80007b6 <HAL_GPIO_WritePin>
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8006144:	2201      	movs	r2, #1
 8006146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800614a:	4821      	ldr	r0, [pc, #132]	; (80061d0 <main+0x304>)
 800614c:	f7fa fb33 	bl	80007b6 <HAL_GPIO_WritePin>
    		  //for(i=4500000; i>0; i--);
    	  }
    	  //for(i=4500000; i>0; i--);
      }
	  if(HAL_GetTick() - timeStamp > 300){
 8006150:	f7fa f83c 	bl	80001cc <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800615e:	f67f aee5 	bls.w	8005f2c <main+0x60>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006162:	2200      	movs	r2, #0
 8006164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006168:	4819      	ldr	r0, [pc, #100]	; (80061d0 <main+0x304>)
 800616a:	f7fa fb24 	bl	80007b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800616e:	2200      	movs	r2, #0
 8006170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006174:	4816      	ldr	r0, [pc, #88]	; (80061d0 <main+0x304>)
 8006176:	f7fa fb1e 	bl	80007b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800617a:	2200      	movs	r2, #0
 800617c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006180:	4813      	ldr	r0, [pc, #76]	; (80061d0 <main+0x304>)
 8006182:	f7fa fb18 	bl	80007b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8006186:	2200      	movs	r2, #0
 8006188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800618c:	4810      	ldr	r0, [pc, #64]	; (80061d0 <main+0x304>)
 800618e:	f7fa fb12 	bl	80007b6 <HAL_GPIO_WritePin>
  {
 8006192:	e6cb      	b.n	8005f2c <main+0x60>
 8006194:	20000110 	.word	0x20000110
 8006198:	200001f0 	.word	0x200001f0
 800619c:	2405d000 	.word	0x2405d000
 80061a0:	40011000 	.word	0x40011000
 80061a4:	200001e4 	.word	0x200001e4
 80061a8:	2000011c 	.word	0x2000011c
 80061ac:	200001f8 	.word	0x200001f8
 80061b0:	fffffe00 	.word	0xfffffe00
 80061b4:	20000200 	.word	0x20000200
 80061b8:	20000132 	.word	0x20000132
 80061bc:	20000136 	.word	0x20000136
 80061c0:	200001e0 	.word	0x200001e0
 80061c4:	20000128 	.word	0x20000128
 80061c8:	24059000 	.word	0x24059000
 80061cc:	20000430 	.word	0x20000430
 80061d0:	40010c00 	.word	0x40010c00

080061d4 <get_rx_timestamp_u64>:
* @param  none
*
* @return  64-bit value of the read time-stamp.
*/
static uint64 get_rx_timestamp_u64(void)
{
 80061d4:	b5b0      	push	{r4, r5, r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
   uint8 ts_tab[5];
   uint64 ts = 0;
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
   int i;
   dwt_readrxtimestamp(ts_tab);
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff f9ef 	bl	80055cc <dwt_readrxtimestamp>
   for (i = 4; i >= 0; i--)
 80061ee:	2304      	movs	r3, #4
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	e019      	b.n	8006228 <get_rx_timestamp_u64+0x54>
   {
       ts <<= 8;
 80061f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061f8:	021d      	lsls	r5, r3, #8
 80061fa:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80061fe:	0214      	lsls	r4, r2, #8
 8006200:	e9c7 4504 	strd	r4, r5, [r7, #16]
       ts |= ts_tab[i];
 8006204:	1d3a      	adds	r2, r7, #4
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006216:	ea42 0200 	orr.w	r2, r2, r0
 800621a:	ea43 0301 	orr.w	r3, r3, r1
 800621e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   for (i = 4; i >= 0; i--)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b01      	subs	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dae2      	bge.n	80061f4 <get_rx_timestamp_u64+0x20>
   }
   return ts;
 800622e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8006232:	4618      	mov	r0, r3
 8006234:	4621      	mov	r1, r4
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bdb0      	pop	{r4, r5, r7, pc}

0800623c <resp_msg_set_ts>:
*         ts  timestamp value
*
* @return none
*/
static void resp_msg_set_ts(uint8 *ts_field, const uint64 ts)
{
 800623c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	e9c7 2300 	strd	r2, r3, [r7]
   int i;
   for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e01b      	b.n	8006286 <resp_msg_set_ts+0x4a>
   {
       ts_field[i] = (ts >> (i * 8)) & 0xFF;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	eb02 0e03 	add.w	lr, r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	00d9      	lsls	r1, r3, #3
 800625a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625e:	f1c1 0620 	rsb	r6, r1, #32
 8006262:	f1a1 0020 	sub.w	r0, r1, #32
 8006266:	fa22 f401 	lsr.w	r4, r2, r1
 800626a:	fa03 f606 	lsl.w	r6, r3, r6
 800626e:	4334      	orrs	r4, r6
 8006270:	fa23 f000 	lsr.w	r0, r3, r0
 8006274:	4304      	orrs	r4, r0
 8006276:	fa23 f501 	lsr.w	r5, r3, r1
 800627a:	b2e3      	uxtb	r3, r4
 800627c:	f88e 3000 	strb.w	r3, [lr]
   for (i = 0; i < RESP_MSG_TS_LEN; i++)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3301      	adds	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b03      	cmp	r3, #3
 800628a:	dde0      	ble.n	800624e <resp_msg_set_ts+0x12>
   }
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006294 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b094      	sub	sp, #80	; 0x50
 8006298:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800629a:	2301      	movs	r3, #1
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800629e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80062a4:	2300      	movs	r3, #0
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062a8:	2301      	movs	r3, #1
 80062aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062ac:	2302      	movs	r3, #2
 80062ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80062b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80062b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fb fa0b 	bl	80016dc <HAL_RCC_OscConfig>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80062cc:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80062d0:	4821      	ldr	r0, [pc, #132]	; (8006358 <SystemClock_Config+0xc4>)
 80062d2:	f000 f94f 	bl	8006574 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062d6:	230f      	movs	r3, #15
 80062d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062da:	2302      	movs	r3, #2
 80062dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80062e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80062ec:	f107 0314 	add.w	r3, r7, #20
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fb fc56 	bl	8001ba4 <HAL_RCC_ClockConfig>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <SystemClock_Config+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 80062fe:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8006302:	4815      	ldr	r0, [pc, #84]	; (8006358 <SystemClock_Config+0xc4>)
 8006304:	f000 f936 	bl	8006574 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006308:	2310      	movs	r3, #16
 800630a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f7fb fdec 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 800631e:	f240 1171 	movw	r1, #369	; 0x171
 8006322:	480d      	ldr	r0, [pc, #52]	; (8006358 <SystemClock_Config+0xc4>)
 8006324:	f000 f926 	bl	8006574 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006328:	f7fb fd92 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <SystemClock_Config+0xc8>)
 8006330:	fba3 2302 	umull	r2, r3, r3, r2
 8006334:	099b      	lsrs	r3, r3, #6
 8006336:	4618      	mov	r0, r3
 8006338:	f7fa f893 	bl	8000462 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800633c:	2004      	movs	r0, #4
 800633e:	f7fa f89d 	bl	800047c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0);
 8006342:	2200      	movs	r2, #0
 8006344:	2105      	movs	r1, #5
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	f7fa f852 	bl	80003f2 <HAL_NVIC_SetPriority>
}
 800634e:	bf00      	nop
 8006350:	3750      	adds	r7, #80	; 0x50
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	080075ac 	.word	0x080075ac
 800635c:	10624dd3 	.word	0x10624dd3

08006360 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <MX_SPI1_Init+0x6c>)
 8006366:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <MX_SPI1_Init+0x70>)
 8006368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800636a:	4b18      	ldr	r3, [pc, #96]	; (80063cc <MX_SPI1_Init+0x6c>)
 800636c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006372:	4b16      	ldr	r3, [pc, #88]	; (80063cc <MX_SPI1_Init+0x6c>)
 8006374:	2200      	movs	r2, #0
 8006376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006378:	4b14      	ldr	r3, [pc, #80]	; (80063cc <MX_SPI1_Init+0x6c>)
 800637a:	2200      	movs	r2, #0
 800637c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <MX_SPI1_Init+0x6c>)
 8006380:	2200      	movs	r2, #0
 8006382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <MX_SPI1_Init+0x6c>)
 8006386:	2200      	movs	r2, #0
 8006388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <MX_SPI1_Init+0x6c>)
 800638c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <MX_SPI1_Init+0x6c>)
 8006394:	2220      	movs	r2, #32
 8006396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <MX_SPI1_Init+0x6c>)
 800639a:	2200      	movs	r2, #0
 800639c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <MX_SPI1_Init+0x6c>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <MX_SPI1_Init+0x6c>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80063aa:	4b08      	ldr	r3, [pc, #32]	; (80063cc <MX_SPI1_Init+0x6c>)
 80063ac:	220a      	movs	r2, #10
 80063ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80063b0:	4806      	ldr	r0, [pc, #24]	; (80063cc <MX_SPI1_Init+0x6c>)
 80063b2:	f7fc f9c1 	bl	8002738 <HAL_SPI_Init>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <MX_SPI1_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80063bc:	f240 1193 	movw	r1, #403	; 0x193
 80063c0:	4804      	ldr	r0, [pc, #16]	; (80063d4 <MX_SPI1_Init+0x74>)
 80063c2:	f000 f8d7 	bl	8006574 <_Error_Handler>
  }

}
 80063c6:	bf00      	nop
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000470 	.word	0x20000470
 80063d0:	40013000 	.word	0x40013000
 80063d4:	080075ac 	.word	0x080075ac

080063d8 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <MX_USART1_UART_Init+0x50>)
 80063de:	4a13      	ldr	r2, [pc, #76]	; (800642c <MX_USART1_UART_Init+0x54>)
 80063e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <MX_USART1_UART_Init+0x50>)
 80063e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80063e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <MX_USART1_UART_Init+0x50>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80063f0:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <MX_USART1_UART_Init+0x50>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <MX_USART1_UART_Init+0x50>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <MX_USART1_UART_Init+0x50>)
 80063fe:	220c      	movs	r2, #12
 8006400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <MX_USART1_UART_Init+0x50>)
 8006404:	2200      	movs	r2, #0
 8006406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <MX_USART1_UART_Init+0x50>)
 800640a:	2200      	movs	r2, #0
 800640c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800640e:	4806      	ldr	r0, [pc, #24]	; (8006428 <MX_USART1_UART_Init+0x50>)
 8006410:	f7fc f9f6 	bl	8002800 <HAL_UART_Init>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <MX_USART1_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800641a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800641e:	4804      	ldr	r0, [pc, #16]	; (8006430 <MX_USART1_UART_Init+0x58>)
 8006420:	f000 f8a8 	bl	8006574 <_Error_Handler>
  }

}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000430 	.word	0x20000430
 800642c:	40013800 	.word	0x40013800
 8006430:	080075ac 	.word	0x080075ac

08006434 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800643a:	4a49      	ldr	r2, [pc, #292]	; (8006560 <MX_GPIO_Init+0x12c>)
 800643c:	4b48      	ldr	r3, [pc, #288]	; (8006560 <MX_GPIO_Init+0x12c>)
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f043 0310 	orr.w	r3, r3, #16
 8006444:	6193      	str	r3, [r2, #24]
 8006446:	4b46      	ldr	r3, [pc, #280]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006452:	4a43      	ldr	r2, [pc, #268]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006454:	4b42      	ldr	r3, [pc, #264]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f043 0320 	orr.w	r3, r3, #32
 800645c:	6193      	str	r3, [r2, #24]
 800645e:	4b40      	ldr	r3, [pc, #256]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800646a:	4a3d      	ldr	r2, [pc, #244]	; (8006560 <MX_GPIO_Init+0x12c>)
 800646c:	4b3c      	ldr	r3, [pc, #240]	; (8006560 <MX_GPIO_Init+0x12c>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f043 0304 	orr.w	r3, r3, #4
 8006474:	6193      	str	r3, [r2, #24]
 8006476:	4b3a      	ldr	r3, [pc, #232]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006482:	4a37      	ldr	r2, [pc, #220]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006484:	4b36      	ldr	r3, [pc, #216]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 0308 	orr.w	r3, r3, #8
 800648c:	6193      	str	r3, [r2, #24]
 800648e:	4b34      	ldr	r3, [pc, #208]	; (8006560 <MX_GPIO_Init+0x12c>)
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800649a:	2200      	movs	r2, #0
 800649c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064a0:	4830      	ldr	r0, [pc, #192]	; (8006564 <MX_GPIO_Init+0x130>)
 80064a2:	f7fa f988 	bl	80007b6 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80064a6:	2200      	movs	r2, #0
 80064a8:	2110      	movs	r1, #16
 80064aa:	482f      	ldr	r0, [pc, #188]	; (8006568 <MX_GPIO_Init+0x134>)
 80064ac:	f7fa f983 	bl	80007b6 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80064b0:	2200      	movs	r2, #0
 80064b2:	2101      	movs	r1, #1
 80064b4:	482d      	ldr	r0, [pc, #180]	; (800656c <MX_GPIO_Init+0x138>)
 80064b6:	f7fa f97e 	bl	80007b6 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PC13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80064ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064be:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064c4:	2302      	movs	r3, #2
 80064c6:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	4619      	mov	r1, r3
 80064ce:	4825      	ldr	r0, [pc, #148]	; (8006564 <MX_GPIO_Init+0x130>)
 80064d0:	f7f9 fffc 	bl	80004cc <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA0 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80064d4:	2301      	movs	r3, #1
 80064d6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80064d8:	4b25      	ldr	r3, [pc, #148]	; (8006570 <MX_GPIO_Init+0x13c>)
 80064da:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	4619      	mov	r1, r3
 80064e6:	4820      	ldr	r0, [pc, #128]	; (8006568 <MX_GPIO_Init+0x134>)
 80064e8:	f7f9 fff0 	bl	80004cc <HAL_GPIO_Init>

	  /*Configure GPIO pin : PA4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80064ec:	2310      	movs	r3, #16
 80064ee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f4:	2302      	movs	r3, #2
 80064f6:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064f8:	f107 0310 	add.w	r3, r7, #16
 80064fc:	4619      	mov	r1, r3
 80064fe:	481a      	ldr	r0, [pc, #104]	; (8006568 <MX_GPIO_Init+0x134>)
 8006500:	f7f9 ffe4 	bl	80004cc <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB12 PB13 PB14
	                             PB15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8006504:	f24f 0301 	movw	r3, #61441	; 0xf001
 8006508:	613b      	str	r3, [r7, #16]
	                            |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800650a:	2301      	movs	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800650e:	2302      	movs	r3, #2
 8006510:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006512:	f107 0310 	add.w	r3, r7, #16
 8006516:	4619      	mov	r1, r3
 8006518:	4814      	ldr	r0, [pc, #80]	; (800656c <MX_GPIO_Init+0x138>)
 800651a:	f7f9 ffd7 	bl	80004cc <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB5 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800651e:	2320      	movs	r3, #32
 8006520:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006522:	4b13      	ldr	r3, [pc, #76]	; (8006570 <MX_GPIO_Init+0x13c>)
 8006524:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800652a:	f107 0310 	add.w	r3, r7, #16
 800652e:	4619      	mov	r1, r3
 8006530:	480e      	ldr	r0, [pc, #56]	; (800656c <MX_GPIO_Init+0x138>)
 8006532:	f7f9 ffcb 	bl	80004cc <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8006536:	2200      	movs	r2, #0
 8006538:	2103      	movs	r1, #3
 800653a:	2006      	movs	r0, #6
 800653c:	f7f9 ff59 	bl	80003f2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006540:	2006      	movs	r0, #6
 8006542:	f7f9 ff72 	bl	800042a <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8006546:	2200      	movs	r2, #0
 8006548:	2103      	movs	r1, #3
 800654a:	2017      	movs	r0, #23
 800654c:	f7f9 ff51 	bl	80003f2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006550:	2017      	movs	r0, #23
 8006552:	f7f9 ff6a 	bl	800042a <HAL_NVIC_EnableIRQ>

}
 8006556:	bf00      	nop
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40021000 	.word	0x40021000
 8006564:	40011000 	.word	0x40011000
 8006568:	40010800 	.word	0x40010800
 800656c:	40010c00 	.word	0x40010c00
 8006570:	10110000 	.word	0x10110000

08006574 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800657e:	e7fe      	b.n	800657e <_Error_Handler+0xa>

08006580 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8006586:	f000 f9b5 	bl	80068f4 <port_GetEXT_IRQStatus>
 800658a:	4603      	mov	r3, r0
 800658c:	607b      	str	r3, [r7, #4]

	if(s) {
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8006594:	f000 f9a0 	bl	80068d8 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8006598:	687b      	ldr	r3, [r7, #4]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80065b0:	f000 f999 	bl	80068e6 <port_EnableEXT_IRQ>
	}
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f8c0 	bl	800674a <Sleep>
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
			   const	uint8_t *headerBuffer,
			   uint32_t bodyLength,
			   const	uint8_t *bodyBuffer)
{
 80065d4:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80065d8:	4682      	mov	sl, r0
 80065da:	4689      	mov	r9, r1
 80065dc:	4690      	mov	r8, r2
 80065de:	461e      	mov	r6, r3
//    decaIrqStatus_t  stat ;
//    stat = decamutexon() ;

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80065e0:	4d10      	ldr	r5, [pc, #64]	; (8006624 <writetospi+0x50>)
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7fc f814 	bl	8002610 <HAL_SPI_GetState>
 80065e8:	2801      	cmp	r0, #1
 80065ea:	4604      	mov	r4, r0
 80065ec:	d1f9      	bne.n	80065e2 <writetospi+0xe>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80065ee:	2200      	movs	r2, #0
 80065f0:	2110      	movs	r1, #16
 80065f2:	480d      	ldr	r0, [pc, #52]	; (8006628 <writetospi+0x54>)
 80065f4:	f7fa f8df 	bl	80007b6 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, 10);	/* Send header in polling mode */
 80065f8:	4652      	mov	r2, sl
 80065fa:	4649      	mov	r1, r9
 80065fc:	230a      	movs	r3, #10
 80065fe:	4809      	ldr	r0, [pc, #36]	; (8006624 <writetospi+0x50>)
 8006600:	f7fb fd2c 	bl	800205c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, 10);		/* Send data in polling mode */
 8006604:	fa1f f288 	uxth.w	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	230a      	movs	r3, #10
 800660c:	4805      	ldr	r0, [pc, #20]	; (8006624 <writetospi+0x50>)
 800660e:	f7fb fd25 	bl	800205c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8006612:	4622      	mov	r2, r4
 8006614:	2110      	movs	r1, #16
 8006616:	4804      	ldr	r0, [pc, #16]	; (8006628 <writetospi+0x54>)
 8006618:	f7fa f8cd 	bl	80007b6 <HAL_GPIO_WritePin>


//    decamutexoff(stat) ;

    return 0;
} // end writetospi()
 800661c:	2000      	movs	r0, #0
 800661e:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8006622:	bf00      	nop
 8006624:	20000470 	.word	0x20000470
 8006628:	40010800 	.word	0x40010800

0800662c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
				const uint8_t *headerBuffer,
				uint32_t readlength,
				uint8_t *readBuffer)
{
 800662c:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8006630:	4606      	mov	r6, r0
 8006632:	468a      	mov	sl, r1
 8006634:	4690      	mov	r8, r2
 8006636:	4699      	mov	r9, r3
 8006638:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
	
//    decaIrqStatus_t  stat ;
//    stat = decamutexon() ;

	/* Blocking: Check whether previous transfer has been finished */
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800663c:	4d13      	ldr	r5, [pc, #76]	; (800668c <readfromspi+0x60>)
{
 800663e:	b083      	sub	sp, #12
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8006640:	4628      	mov	r0, r5
 8006642:	f7fb ffe5 	bl	8002610 <HAL_SPI_GetState>
 8006646:	2801      	cmp	r0, #1
 8006648:	4604      	mov	r4, r0
 800664a:	d1f9      	bne.n	8006640 <readfromspi+0x14>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800664c:	2200      	movs	r2, #0
 800664e:	2110      	movs	r1, #16
 8006650:	480f      	ldr	r0, [pc, #60]	; (8006690 <readfromspi+0x64>)
 8006652:	f7fa f8b0 	bl	80007b6 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)headerBuffer, spi_TmpBuffer, (uint16_t)(headerLength+readlength), 10);
 8006656:	220a      	movs	r2, #10
 8006658:	eb06 0308 	add.w	r3, r6, r8
 800665c:	4651      	mov	r1, sl
 800665e:	9200      	str	r2, [sp, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	aa02      	add	r2, sp, #8
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <readfromspi+0x60>)
 8006666:	f7fb fe34 	bl	80022d2 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800666a:	4622      	mov	r2, r4
 800666c:	2110      	movs	r1, #16
 800666e:	4808      	ldr	r0, [pc, #32]	; (8006690 <readfromspi+0x64>)
 8006670:	f7fa f8a1 	bl	80007b6 <HAL_GPIO_WritePin>

	memcpy((uint8_t*)readBuffer , (uint8_t*)&spi_TmpBuffer[headerLength], readlength);
 8006674:	ab02      	add	r3, sp, #8
 8006676:	4642      	mov	r2, r8
 8006678:	1999      	adds	r1, r3, r6
 800667a:	4648      	mov	r0, r9
 800667c:	f000 ff75 	bl	800756a <memcpy>

//	decamutexoff(stat);

    return 0;
} // end readfromspi()
 8006680:	2000      	movs	r0, #0
 8006682:	f50d 5d84 	add.w	sp, sp, #4224	; 0x1080
 8006686:	b003      	add	sp, #12
 8006688:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 800668c:	20000470 	.word	0x20000470
 8006690:	40010800 	.word	0x40010800

08006694 <NVIC_EnableIRQ>:
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800669e:	4908      	ldr	r1, [pc, #32]	; (80066c0 <NVIC_EnableIRQ+0x2c>)
 80066a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	79fa      	ldrb	r2, [r7, #7]
 80066a8:	f002 021f 	and.w	r2, r2, #31
 80066ac:	2001      	movs	r0, #1
 80066ae:	fa00 f202 	lsl.w	r2, r0, r2
 80066b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr
 80066c0:	e000e100 	.word	0xe000e100

080066c4 <NVIC_DisableIRQ>:
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80066ce:	4909      	ldr	r1, [pc, #36]	; (80066f4 <NVIC_DisableIRQ+0x30>)
 80066d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	79fa      	ldrb	r2, [r7, #7]
 80066d8:	f002 021f 	and.w	r2, r2, #31
 80066dc:	2001      	movs	r0, #1
 80066de:	fa00 f202 	lsl.w	r2, r0, r2
 80066e2:	3320      	adds	r3, #32
 80066e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	e000e100 	.word	0xe000e100

080066f8 <usleep>:
/* @fn	  usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	int i,j;
#pragma GCC ivdep
	for(i=0;i<usec;i++)
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e012      	b.n	800672c <usleep+0x34>
	{
#pragma GCC ivdep
		for(j=0;j<2;j++)
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	e004      	b.n	8006716 <usleep+0x1e>
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	3301      	adds	r3, #1
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b01      	cmp	r3, #1
 800671a:	bfd4      	ite	le
 800671c:	2301      	movle	r3, #1
 800671e:	2300      	movgt	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f2      	bne.n	800670c <usleep+0x14>
	for(i=0;i<usec;i++)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	bf34      	ite	cc
 8006734:	2301      	movcc	r3, #1
 8006736:	2300      	movcs	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e3      	bne.n	8006706 <usleep+0xe>
		{
			__NOP();
			__NOP();
		}
	}
	return 0;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <Sleep>:
/* @fn 	  Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7f9 fd44 	bl	80001e0 <HAL_Delay>
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <peripherals_init>:
 *******************************************************************************/

/* @fn 	  peripherals_init
 * */
int peripherals_init (void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
	/* All has been initialized in the CubeMx code, see main.c */
	return 0;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
	...

08006770 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8006778:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <EXTI_GetITEnStatus+0x34>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		    (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr
 80067a4:	e000e100 	.word	0xe000e100

080067a8 <reset_DW1000>:
 * 			In general it is output, but it also can be used to reset the digital
 * 			part of DW1000 by driving this pin low.
 * 			Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStruct;

	// Enable GPIO used for DW1000 reset as open collector output
	GPIO_InitStruct.Pin = DW_RESET_Pin;
 80067ae:	2301      	movs	r3, #1
 80067b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80067b2:	2311      	movs	r3, #17
 80067b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b6:	2302      	movs	r3, #2
 80067b8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80067ba:	463b      	mov	r3, r7
 80067bc:	4619      	mov	r1, r3
 80067be:	480a      	ldr	r0, [pc, #40]	; (80067e8 <reset_DW1000+0x40>)
 80067c0:	f7f9 fe84 	bl	80004cc <HAL_GPIO_Init>

	//drive the RSTn pin low
	HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2101      	movs	r1, #1
 80067c8:	4807      	ldr	r0, [pc, #28]	; (80067e8 <reset_DW1000+0x40>)
 80067ca:	f7f9 fff4 	bl	80007b6 <HAL_GPIO_WritePin>

	usleep(1);
 80067ce:	2001      	movs	r0, #1
 80067d0:	f7ff ff92 	bl	80066f8 <usleep>

	//put the pin back to output open-drain (not active)
	setup_DW1000RSTnIRQ(0);
 80067d4:	2000      	movs	r0, #0
 80067d6:	f000 f809 	bl	80067ec <setup_DW1000RSTnIRQ>



	Sleep(2);
 80067da:	2002      	movs	r0, #2
 80067dc:	f7ff ffb5 	bl	800674a <Sleep>
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40010800 	.word	0x40010800

080067ec <setup_DW1000RSTnIRQ>:
 * @brief	setup the DW_RESET pin mode
 * 			0 - output Open collector mode
 * 			!0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	if(enable)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <setup_DW1000RSTnIRQ+0x38>
	{
		// Enable GPIO used as DECA RESET for interrupt
		GPIO_InitStruct.Pin = DW_RESET_Pin;
 80067fa:	2301      	movs	r3, #1
 80067fc:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80067fe:	4b16      	ldr	r3, [pc, #88]	; (8006858 <setup_DW1000RSTnIRQ+0x6c>)
 8006800:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	4619      	mov	r1, r3
 800680c:	4813      	ldr	r0, [pc, #76]	; (800685c <setup_DW1000RSTnIRQ+0x70>)
 800680e:	f7f9 fe5d 	bl	80004cc <HAL_GPIO_Init>

		HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//pin #0 -> EXTI #0
 8006812:	2006      	movs	r0, #6
 8006814:	f7f9 fe09 	bl	800042a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8006818:	2200      	movs	r2, #0
 800681a:	2105      	movs	r1, #5
 800681c:	2006      	movs	r0, #6
 800681e:	f7f9 fde8 	bl	80003f2 <HAL_NVIC_SetPriority>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
		HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
	}
}
 8006822:	e015      	b.n	8006850 <setup_DW1000RSTnIRQ+0x64>
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//pin #0 -> EXTI #0
 8006824:	2006      	movs	r0, #6
 8006826:	f7f9 fe0e 	bl	8000446 <HAL_NVIC_DisableIRQ>
		GPIO_InitStruct.Pin = DW_RESET_Pin;
 800682a:	2301      	movs	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800682e:	2311      	movs	r3, #17
 8006830:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006836:	2303      	movs	r3, #3
 8006838:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800683a:	f107 0308 	add.w	r3, r7, #8
 800683e:	4619      	mov	r1, r3
 8006840:	4806      	ldr	r0, [pc, #24]	; (800685c <setup_DW1000RSTnIRQ+0x70>)
 8006842:	f7f9 fe43 	bl	80004cc <HAL_GPIO_Init>
		HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8006846:	2201      	movs	r2, #1
 8006848:	2101      	movs	r1, #1
 800684a:	4804      	ldr	r0, [pc, #16]	; (800685c <setup_DW1000RSTnIRQ+0x70>)
 800684c:	f7f9 ffb3 	bl	80007b6 <HAL_GPIO_WritePin>
}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	10110000 	.word	0x10110000
 800685c:	40010800 	.word	0x40010800

08006860 <port_set_dw1000_slowrate>:
/* @fn		port_set_dw1000_slowrate
 * @brief	set 2.25MHz
 * 			note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006864:	4b03      	ldr	r3, [pc, #12]	; (8006874 <port_set_dw1000_slowrate+0x14>)
 8006866:	2220      	movs	r2, #32
 8006868:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800686a:	4802      	ldr	r0, [pc, #8]	; (8006874 <port_set_dw1000_slowrate+0x14>)
 800686c:	f7fb ff64 	bl	8002738 <HAL_SPI_Init>
}
 8006870:	bf00      	nop
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000470 	.word	0x20000470

08006878 <port_set_dw1000_fastrate>:
/* @fn		port_set_dw1000_fastrate
 * @brief	set 18MHz
 * 			note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800687c:	4b03      	ldr	r3, [pc, #12]	; (800688c <port_set_dw1000_fastrate+0x14>)
 800687e:	2208      	movs	r2, #8
 8006880:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8006882:	4802      	ldr	r0, [pc, #8]	; (800688c <port_set_dw1000_fastrate+0x14>)
 8006884:	f7fb ff58 	bl	8002738 <HAL_SPI_Init>
}
 8006888:	bf00      	nop
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000470 	.word	0x20000470

08006890 <HAL_GPIO_EXTI_Callback>:
/* @fn		HAL_GPIO_EXTI_Callback
 * @brief	IRQ HAL call-back for all EXTI configured lines
 * 			i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DW_RESET_Pin)
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d103      	bne.n	80068a8 <HAL_GPIO_EXTI_Callback+0x18>
	{
		signalResetDone = 1;
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <HAL_GPIO_EXTI_Callback+0x2c>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
		process_deca_irq();
	}
	else
	{
	}
}
 80068a6:	e004      	b.n	80068b2 <HAL_GPIO_EXTI_Callback+0x22>
	else if (GPIO_Pin == DW_IRQn_Pin)
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d101      	bne.n	80068b2 <HAL_GPIO_EXTI_Callback+0x22>
		process_deca_irq();
 80068ae:	f000 f807 	bl	80068c0 <process_deca_irq>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000208 	.word	0x20000208

080068c0 <process_deca_irq>:
 * @brief	main call-back for processing of DW1000 IRQ
 * 			it re-enters the IRQ routing and processes all events.
 * 			After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
	while(port_CheckEXT_IRQ() != 0)
 80068c4:	e001      	b.n	80068ca <process_deca_irq+0xa>
	{

    	dwt_isr();
 80068c6:	f7ff f851 	bl	800596c <dwt_isr>
	while(port_CheckEXT_IRQ() != 0)
 80068ca:	f000 f81b 	bl	8006904 <port_CheckEXT_IRQ>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f8      	bne.n	80068c6 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <port_DisableEXT_IRQ>:
/* @fn		port_DisableEXT_IRQ
 * @brief	wrapper to disable DW_IRQ pin IRQ
 * 			in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80068dc:	2017      	movs	r0, #23
 80068de:	f7ff fef1 	bl	80066c4 <NVIC_DisableIRQ>
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <port_EnableEXT_IRQ>:
/* @fn		port_EnableEXT_IRQ
 * @brief	wrapper to enable DW_IRQ pin IRQ
 * 			in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80068ea:	2017      	movs	r0, #23
 80068ec:	f7ff fed2 	bl	8006694 <NVIC_EnableIRQ>
}
 80068f0:	bf00      	nop
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <port_GetEXT_IRQStatus>:

/* @fn		port_GetEXT_IRQStatus
 * @brief	wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
	return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80068f8:	2017      	movs	r0, #23
 80068fa:	f7ff ff39 	bl	8006770 <EXTI_GetITEnStatus>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	bd80      	pop	{r7, pc}

08006904 <port_CheckEXT_IRQ>:

/* @fn		port_CheckEXT_IRQ
 * @brief	wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8006908:	2120      	movs	r1, #32
 800690a:	4803      	ldr	r0, [pc, #12]	; (8006918 <port_CheckEXT_IRQ+0x14>)
 800690c:	f7f9 ff3c 	bl	8000788 <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40010c00 	.word	0x40010c00

0800691c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006922:	4a24      	ldr	r2, [pc, #144]	; (80069b4 <HAL_MspInit+0x98>)
 8006924:	4b23      	ldr	r3, [pc, #140]	; (80069b4 <HAL_MspInit+0x98>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6193      	str	r3, [r2, #24]
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <HAL_MspInit+0x98>)
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800693a:	2003      	movs	r0, #3
 800693c:	f7f9 fd4e 	bl	80003dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006940:	2200      	movs	r2, #0
 8006942:	2100      	movs	r1, #0
 8006944:	f06f 000b 	mvn.w	r0, #11
 8006948:	f7f9 fd53 	bl	80003f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800694c:	2200      	movs	r2, #0
 800694e:	2100      	movs	r1, #0
 8006950:	f06f 000a 	mvn.w	r0, #10
 8006954:	f7f9 fd4d 	bl	80003f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	f06f 0009 	mvn.w	r0, #9
 8006960:	f7f9 fd47 	bl	80003f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	f06f 0004 	mvn.w	r0, #4
 800696c:	f7f9 fd41 	bl	80003f2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	f06f 0003 	mvn.w	r0, #3
 8006978:	f7f9 fd3b 	bl	80003f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	f06f 0001 	mvn.w	r0, #1
 8006984:	f7f9 fd35 	bl	80003f2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 5, 0);
 8006988:	2200      	movs	r2, #0
 800698a:	2105      	movs	r1, #5
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	f7f9 fd2f 	bl	80003f2 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006994:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <HAL_MspInit+0x9c>)
 8006996:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <HAL_MspInit+0x9c>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800699e:	6053      	str	r3, [r2, #4]
 80069a0:	4a05      	ldr	r2, [pc, #20]	; (80069b8 <HAL_MspInit+0x9c>)
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_MspInit+0x9c>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069aa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40010000 	.word	0x40010000

080069bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <HAL_SPI_MspInit+0x64>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d123      	bne.n	8006a16 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <HAL_SPI_MspInit+0x68>)
 80069d0:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <HAL_SPI_MspInit+0x68>)
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069d8:	6193      	str	r3, [r2, #24]
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <HAL_SPI_MspInit+0x68>)
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80069e6:	23a0      	movs	r3, #160	; 0xa0
 80069e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ea:	2302      	movs	r3, #2
 80069ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069ee:	2303      	movs	r3, #3
 80069f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f2:	f107 0310 	add.w	r3, r7, #16
 80069f6:	4619      	mov	r1, r3
 80069f8:	480b      	ldr	r0, [pc, #44]	; (8006a28 <HAL_SPI_MspInit+0x6c>)
 80069fa:	f7f9 fd67 	bl	80004cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a0a:	f107 0310 	add.w	r3, r7, #16
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4805      	ldr	r0, [pc, #20]	; (8006a28 <HAL_SPI_MspInit+0x6c>)
 8006a12:	f7f9 fd5b 	bl	80004cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006a16:	bf00      	nop
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40013000 	.word	0x40013000
 8006a24:	40021000 	.word	0x40021000
 8006a28:	40010800 	.word	0x40010800

08006a2c <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <HAL_UART_MspInit+0x68>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d125      	bne.n	8006a8a <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a3e:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <HAL_UART_MspInit+0x6c>)
 8006a40:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <HAL_UART_MspInit+0x6c>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a48:	6193      	str	r3, [r2, #24]
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <HAL_UART_MspInit+0x6c>)
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a60:	2303      	movs	r3, #3
 8006a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	4619      	mov	r1, r3
 8006a6a:	480c      	ldr	r0, [pc, #48]	; (8006a9c <HAL_UART_MspInit+0x70>)
 8006a6c:	f7f9 fd2e 	bl	80004cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	4619      	mov	r1, r3
 8006a84:	4805      	ldr	r0, [pc, #20]	; (8006a9c <HAL_UART_MspInit+0x70>)
 8006a86:	f7f9 fd21 	bl	80004cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006a8a:	bf00      	nop
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40013800 	.word	0x40013800
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40010800 	.word	0x40010800

08006aa0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ab0:	e7fe      	b.n	8006ab0 <HardFault_Handler+0x4>

08006ab2 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ab6:	e7fe      	b.n	8006ab6 <MemManage_Handler+0x4>

08006ab8 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006abc:	e7fe      	b.n	8006abc <BusFault_Handler+0x4>

08006abe <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ac2:	e7fe      	b.n	8006ac2 <UsageFault_Handler+0x4>

08006ac4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ac8:	bf00      	nop
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006aec:	f7f9 fb60 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006af0:	f7f9 fce0 	bl	80004b4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006afc:	2001      	movs	r0, #1
 8006afe:	f7f9 fe83 	bl	8000808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006b02:	bf00      	nop
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006b0c:	4802      	ldr	r0, [pc, #8]	; (8006b18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006b0e:	f7f9 ff93 	bl	8000a38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006b12:	bf00      	nop
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200016ec 	.word	0x200016ec

08006b1c <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006b20:	2020      	movs	r0, #32
 8006b22:	f7f9 fe71 	bl	8000808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006b30:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <SystemInit+0x5c>)
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <SystemInit+0x5c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006b3c:	4912      	ldr	r1, [pc, #72]	; (8006b88 <SystemInit+0x5c>)
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <SystemInit+0x5c>)
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <SystemInit+0x60>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006b48:	4a0f      	ldr	r2, [pc, #60]	; (8006b88 <SystemInit+0x5c>)
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <SystemInit+0x5c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b58:	4a0b      	ldr	r2, [pc, #44]	; (8006b88 <SystemInit+0x5c>)
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <SystemInit+0x5c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <SystemInit+0x5c>)
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <SystemInit+0x5c>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006b6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <SystemInit+0x5c>)
 8006b72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006b76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <SystemInit+0x64>)
 8006b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	f8ff0000 	.word	0xf8ff0000
 8006b90:	e000ed00 	.word	0xe000ed00

08006b94 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4908      	ldr	r1, [pc, #32]	; (8006bbc <MX_USB_DEVICE_Init+0x28>)
 8006b9c:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <MX_USB_DEVICE_Init+0x2c>)
 8006b9e:	f7fd fb7d 	bl	800429c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8006ba2:	4908      	ldr	r1, [pc, #32]	; (8006bc4 <MX_USB_DEVICE_Init+0x30>)
 8006ba4:	4806      	ldr	r0, [pc, #24]	; (8006bc0 <MX_USB_DEVICE_Init+0x2c>)
 8006ba6:	f7fd fba4 	bl	80042f2 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8006baa:	4907      	ldr	r1, [pc, #28]	; (8006bc8 <MX_USB_DEVICE_Init+0x34>)
 8006bac:	4804      	ldr	r0, [pc, #16]	; (8006bc0 <MX_USB_DEVICE_Init+0x2c>)
 8006bae:	f7fd fb09 	bl	80041c4 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8006bb2:	4803      	ldr	r0, [pc, #12]	; (8006bc0 <MX_USB_DEVICE_Init+0x2c>)
 8006bb4:	f7fd fbb6 	bl	8004324 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bb8:	bf00      	nop
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000150 	.word	0x20000150
 8006bc0:	200004c8 	.word	0x200004c8
 8006bc4:	2000000c 	.word	0x2000000c
 8006bc8:	20000140 	.word	0x20000140

08006bcc <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4905      	ldr	r1, [pc, #20]	; (8006be8 <CDC_Init_FS+0x1c>)
 8006bd4:	4805      	ldr	r0, [pc, #20]	; (8006bec <CDC_Init_FS+0x20>)
 8006bd6:	f7fd fb0b 	bl	80041f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bda:	4905      	ldr	r1, [pc, #20]	; (8006bf0 <CDC_Init_FS+0x24>)
 8006bdc:	4803      	ldr	r0, [pc, #12]	; (8006bec <CDC_Init_FS+0x20>)
 8006bde:	f7fd fb20 	bl	8004222 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006be2:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000eec 	.word	0x20000eec
 8006bec:	200004c8 	.word	0x200004c8
 8006bf0:	200006ec 	.word	0x200006ec

08006bf4 <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8006bf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr
	...

08006c04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	71fb      	strb	r3, [r7, #7]
 8006c10:	4613      	mov	r3, r2
 8006c12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	2b23      	cmp	r3, #35	; 0x23
 8006c18:	d84a      	bhi.n	8006cb0 <CDC_Control_FS+0xac>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <CDC_Control_FS+0x1c>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006cb1 	.word	0x08006cb1
 8006c24:	08006cb1 	.word	0x08006cb1
 8006c28:	08006cb1 	.word	0x08006cb1
 8006c2c:	08006cb1 	.word	0x08006cb1
 8006c30:	08006cb1 	.word	0x08006cb1
 8006c34:	08006cb1 	.word	0x08006cb1
 8006c38:	08006cb1 	.word	0x08006cb1
 8006c3c:	08006cb1 	.word	0x08006cb1
 8006c40:	08006cb1 	.word	0x08006cb1
 8006c44:	08006cb1 	.word	0x08006cb1
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006cb1 	.word	0x08006cb1
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006cb1 	.word	0x08006cb1
 8006c68:	08006cb1 	.word	0x08006cb1
 8006c6c:	08006cb1 	.word	0x08006cb1
 8006c70:	08006cb1 	.word	0x08006cb1
 8006c74:	08006cb1 	.word	0x08006cb1
 8006c78:	08006cb1 	.word	0x08006cb1
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cb1 	.word	0x08006cb1
 8006c84:	08006cb1 	.word	0x08006cb1
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb1 	.word	0x08006cb1
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cb1 	.word	0x08006cb1
 8006c9c:	08006cb1 	.word	0x08006cb1
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cb1 	.word	0x08006cb1
 8006ca8:	08006cb1 	.word	0x08006cb1
 8006cac:	08006cb1 	.word	0x08006cb1
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 8006cb0:	bf00      	nop
  }

  return (USBD_OK);
 8006cb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop

08006cc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <CDC_Receive_FS+0x24>)
 8006cce:	f7fd faa8 	bl	8004222 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cd2:	4804      	ldr	r0, [pc, #16]	; (8006ce4 <CDC_Receive_FS+0x24>)
 8006cd4:	f7fd fab8 	bl	8004248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006cd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200004c8 	.word	0x200004c8

08006ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <HAL_PCD_MspInit+0x44>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d113      	bne.n	8006d22 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006cfa:	4a0d      	ldr	r2, [pc, #52]	; (8006d30 <HAL_PCD_MspInit+0x48>)
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <HAL_PCD_MspInit+0x48>)
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d04:	61d3      	str	r3, [r2, #28]
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <HAL_PCD_MspInit+0x48>)
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 8006d12:	2200      	movs	r2, #0
 8006d14:	2107      	movs	r1, #7
 8006d16:	2014      	movs	r0, #20
 8006d18:	f7f9 fb6b 	bl	80003f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d1c:	2014      	movs	r0, #20
 8006d1e:	f7f9 fb84 	bl	800042a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40005c00 	.word	0x40005c00
 8006d30:	40021000 	.word	0x40021000

08006d34 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f7fd fb32 	bl	80043b4 <USBD_LL_SetupStage>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006d6a:	78fb      	ldrb	r3, [r7, #3]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	015b      	lsls	r3, r3, #5
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f7fd fb64 	bl	8004448 <USBD_LL_DataOutStage>
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	4413      	add	r3, r2
 8006da2:	333c      	adds	r3, #60	; 0x3c
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7fd fba8 	bl	80044fe <USBD_LL_DataInStage>
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fc8b 	bl	80046e0 <USBD_LL_SOF>
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d102      	bne.n	8006dec <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8006de6:	2301      	movs	r3, #1
 8006de8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dea:	e002      	b.n	8006df2 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
    break;    
 8006df0:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fd fc3c 	bl	800467a <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fc07 	bl	800461c <USBD_LL_Reset>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd fc36 	bl	8004698 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e34:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <HAL_PCD_SuspendCallback+0x30>)
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <HAL_PCD_SuspendCallback+0x30>)
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f043 0306 	orr.w	r3, r3, #6
 8006e3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000ed00 	.word	0xe000ed00

08006e4c <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd fc30 	bl	80046c0 <USBD_LL_Resume>
  
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8006e70:	4a2b      	ldr	r2, [pc, #172]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e7c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <USBD_LL_Init+0xbc>)
 8006e84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e86:	4b26      	ldr	r3, [pc, #152]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e88:	2208      	movs	r2, #8
 8006e8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e8c:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e8e:	2202      	movs	r2, #2
 8006e90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8006e92:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e94:	2203      	movs	r2, #3
 8006e96:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e9e:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006eaa:	481d      	ldr	r0, [pc, #116]	; (8006f20 <USBD_LL_Init+0xb8>)
 8006eac:	f7f9 fcc4 	bl	8000838 <HAL_PCD_Init>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006eb6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8006eba:	481b      	ldr	r0, [pc, #108]	; (8006f28 <USBD_LL_Init+0xc0>)
 8006ebc:	f7ff fb5a 	bl	8006574 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006ec6:	2318      	movs	r3, #24
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2100      	movs	r1, #0
 8006ecc:	f7fa fbc8 	bl	8001660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006ed6:	2358      	movs	r3, #88	; 0x58
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2180      	movs	r1, #128	; 0x80
 8006edc:	f7fa fbc0 	bl	8001660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006ee6:	23c0      	movs	r3, #192	; 0xc0
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2181      	movs	r1, #129	; 0x81
 8006eec:	f7fa fbb8 	bl	8001660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006ef6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006efa:	2200      	movs	r2, #0
 8006efc:	2101      	movs	r1, #1
 8006efe:	f7fa fbaf 	bl	8001660 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2182      	movs	r1, #130	; 0x82
 8006f10:	f7fa fba6 	bl	8001660 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200016ec 	.word	0x200016ec
 8006f24:	40005c00 	.word	0x40005c00
 8006f28:	080075bc 	.word	0x080075bc

08006f2c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7f9 fd52 	bl	80009ec <HAL_PCD_Start>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d816      	bhi.n	8006f80 <USBD_LL_Start+0x54>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <USBD_LL_Start+0x2c>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f6f 	.word	0x08006f6f
 8006f60:	08006f75 	.word	0x08006f75
 8006f64:	08006f7b 	.word	0x08006f7b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f6c:	e00b      	b.n	8006f86 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	73fb      	strb	r3, [r7, #15]
    break;
 8006f72:	e008      	b.n	8006f86 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
    break;
 8006f78:	e005      	b.n	8006f86 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7e:	e002      	b.n	8006f86 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006f80:	2302      	movs	r3, #2
 8006f82:	73fb      	strb	r3, [r7, #15]
    break;
 8006f84:	bf00      	nop
  }
  return usb_status;  
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	70fb      	strb	r3, [r7, #3]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70bb      	strb	r3, [r7, #2]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006fb8:	78bb      	ldrb	r3, [r7, #2]
 8006fba:	883a      	ldrh	r2, [r7, #0]
 8006fbc:	78f9      	ldrb	r1, [r7, #3]
 8006fbe:	f7f9 fe62 	bl	8000c86 <HAL_PCD_EP_Open>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73bb      	strb	r3, [r7, #14]
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d817      	bhi.n	8006ffc <USBD_LL_OpenEP+0x6c>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_LL_OpenEP+0x44>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	08006feb 	.word	0x08006feb
 8006fdc:	08006ff1 	.word	0x08006ff1
 8006fe0:	08006ff7 	.word	0x08006ff7
    case HAL_OK :
      usb_status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe8:	e00b      	b.n	8007002 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fea:	2302      	movs	r3, #2
 8006fec:	73fb      	strb	r3, [r7, #15]
    break;
 8006fee:	e008      	b.n	8007002 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff4:	e005      	b.n	8007002 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8006ffa:	e002      	b.n	8007002 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8007000:	bf00      	nop
  }
  return usb_status; 
 8007002:	7bfb      	ldrb	r3, [r7, #15]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 fe80 	bl	8000d30 <HAL_PCD_EP_Close>
 8007030:	4603      	mov	r3, r0
 8007032:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	2b03      	cmp	r3, #3
 8007038:	d816      	bhi.n	8007068 <USBD_LL_CloseEP+0x5c>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <USBD_LL_CloseEP+0x34>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007051 	.word	0x08007051
 8007044:	08007057 	.word	0x08007057
 8007048:	0800705d 	.word	0x0800705d
 800704c:	08007063 	.word	0x08007063
    case HAL_OK :
      usb_status = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
    break;
 8007054:	e00b      	b.n	800706e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007056:	2302      	movs	r3, #2
 8007058:	73fb      	strb	r3, [r7, #15]
    break;
 800705a:	e008      	b.n	800706e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800705c:	2301      	movs	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
    break;
 8007060:	e005      	b.n	800706e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007062:	2302      	movs	r3, #2
 8007064:	73fb      	strb	r3, [r7, #15]
    break;
 8007066:	e002      	b.n	800706e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	73fb      	strb	r3, [r7, #15]
    break;
 800706c:	bf00      	nop
  }
  return usb_status;  
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7f9 ff1c 	bl	8000ed4 <HAL_PCD_EP_SetStall>
 800709c:	4603      	mov	r3, r0
 800709e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d816      	bhi.n	80070d4 <USBD_LL_StallEP+0x5c>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <USBD_LL_StallEP+0x34>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070c3 	.word	0x080070c3
 80070b4:	080070c9 	.word	0x080070c9
 80070b8:	080070cf 	.word	0x080070cf
    case HAL_OK :
      usb_status = USBD_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
    break;
 80070c0:	e00b      	b.n	80070da <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070c2:	2302      	movs	r3, #2
 80070c4:	73fb      	strb	r3, [r7, #15]
    break;
 80070c6:	e008      	b.n	80070da <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
    break;
 80070cc:	e005      	b.n	80070da <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070ce:	2302      	movs	r3, #2
 80070d0:	73fb      	strb	r3, [r7, #15]
    break;
 80070d2:	e002      	b.n	80070da <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80070d4:	2302      	movs	r3, #2
 80070d6:	73fb      	strb	r3, [r7, #15]
    break;
 80070d8:	bf00      	nop
  }
  return usb_status;  
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f7f9 ff3b 	bl	8000f7e <HAL_PCD_EP_ClrStall>
 8007108:	4603      	mov	r3, r0
 800710a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b03      	cmp	r3, #3
 8007110:	d816      	bhi.n	8007140 <USBD_LL_ClearStallEP+0x5c>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <USBD_LL_ClearStallEP+0x34>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007129 	.word	0x08007129
 800711c:	0800712f 	.word	0x0800712f
 8007120:	08007135 	.word	0x08007135
 8007124:	0800713b 	.word	0x0800713b
    case HAL_OK :
      usb_status = USBD_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]
    break;
 800712c:	e00b      	b.n	8007146 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800712e:	2302      	movs	r3, #2
 8007130:	73fb      	strb	r3, [r7, #15]
    break;
 8007132:	e008      	b.n	8007146 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
    break;
 8007138:	e005      	b.n	8007146 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800713a:	2302      	movs	r3, #2
 800713c:	73fb      	strb	r3, [r7, #15]
    break;
 800713e:	e002      	b.n	8007146 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007140:	2302      	movs	r3, #2
 8007142:	73fb      	strb	r3, [r7, #15]
    break;
 8007144:	bf00      	nop
  }
  return usb_status; 
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007162:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007168:	2b00      	cmp	r3, #0
 800716a:	da08      	bge.n	800717e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	015b      	lsls	r3, r3, #5
 8007176:	4413      	add	r3, r2
 8007178:	332a      	adds	r3, #42	; 0x2a
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	e008      	b.n	8007190 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	015b      	lsls	r3, r3, #5
 8007188:	4413      	add	r3, r2
 800718a:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800718e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr
	...

0800719c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7f9 fd3e 	bl	8000c3c <HAL_PCD_SetAddress>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d816      	bhi.n	80071f8 <USBD_LL_SetUSBAddress+0x5c>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USBD_LL_SetUSBAddress+0x34>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071e7 	.word	0x080071e7
 80071d8:	080071ed 	.word	0x080071ed
 80071dc:	080071f3 	.word	0x080071f3
    case HAL_OK :
      usb_status = USBD_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	73fb      	strb	r3, [r7, #15]
    break;
 80071e4:	e00b      	b.n	80071fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071e6:	2302      	movs	r3, #2
 80071e8:	73fb      	strb	r3, [r7, #15]
    break;
 80071ea:	e008      	b.n	80071fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
    break;
 80071f0:	e005      	b.n	80071fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071f2:	2302      	movs	r3, #2
 80071f4:	73fb      	strb	r3, [r7, #15]
    break;
 80071f6:	e002      	b.n	80071fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	73fb      	strb	r3, [r7, #15]
    break;
 80071fc:	bf00      	nop
  }
  return usb_status;  
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	461a      	mov	r2, r3
 8007214:	460b      	mov	r3, r1
 8007216:	72fb      	strb	r3, [r7, #11]
 8007218:	4613      	mov	r3, r2
 800721a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800722a:	893b      	ldrh	r3, [r7, #8]
 800722c:	7af9      	ldrb	r1, [r7, #11]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	f7f9 fe15 	bl	8000e5e <HAL_PCD_EP_Transmit>
 8007234:	4603      	mov	r3, r0
 8007236:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007238:	7dbb      	ldrb	r3, [r7, #22]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d816      	bhi.n	800726c <USBD_LL_Transmit+0x64>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <USBD_LL_Transmit+0x3c>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007255 	.word	0x08007255
 8007248:	0800725b 	.word	0x0800725b
 800724c:	08007261 	.word	0x08007261
 8007250:	08007267 	.word	0x08007267
    case HAL_OK :
      usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	75fb      	strb	r3, [r7, #23]
    break;
 8007258:	e00b      	b.n	8007272 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800725a:	2302      	movs	r3, #2
 800725c:	75fb      	strb	r3, [r7, #23]
    break;
 800725e:	e008      	b.n	8007272 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
    break;
 8007264:	e005      	b.n	8007272 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007266:	2302      	movs	r3, #2
 8007268:	75fb      	strb	r3, [r7, #23]
    break;
 800726a:	e002      	b.n	8007272 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800726c:	2302      	movs	r3, #2
 800726e:	75fb      	strb	r3, [r7, #23]
    break;
 8007270:	bf00      	nop
  }
  return usb_status;    
 8007272:	7dfb      	ldrb	r3, [r7, #23]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	461a      	mov	r2, r3
 8007288:	460b      	mov	r3, r1
 800728a:	72fb      	strb	r3, [r7, #11]
 800728c:	4613      	mov	r3, r2
 800728e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	7af9      	ldrb	r1, [r7, #11]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	f7f9 fd8a 	bl	8000dbc <HAL_PCD_EP_Receive>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80072ac:	7dbb      	ldrb	r3, [r7, #22]
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d816      	bhi.n	80072e0 <USBD_LL_PrepareReceive+0x64>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <USBD_LL_PrepareReceive+0x3c>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072cf 	.word	0x080072cf
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	080072db 	.word	0x080072db
    case HAL_OK :
      usb_status = USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	75fb      	strb	r3, [r7, #23]
    break;
 80072cc:	e00b      	b.n	80072e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ce:	2302      	movs	r3, #2
 80072d0:	75fb      	strb	r3, [r7, #23]
    break;
 80072d2:	e008      	b.n	80072e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
    break;
 80072d8:	e005      	b.n	80072e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	75fb      	strb	r3, [r7, #23]
    break;
 80072de:	e002      	b.n	80072e6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80072e0:	2302      	movs	r3, #2
 80072e2:	75fb      	strb	r3, [r7, #23]
    break;
 80072e4:	bf00      	nop
  }
  return usb_status; 
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	4611      	mov	r1, r2
 8007306:	4618      	mov	r0, r3
 8007308:	f7f9 fd94 	bl	8000e34 <HAL_PCD_EP_GetRxCount>
 800730c:	4603      	mov	r3, r0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007320:	4b02      	ldr	r3, [pc, #8]	; (800732c <USBD_static_malloc+0x14>)
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	2000020c 	.word	0x2000020c

08007330 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr

08007342 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 5 */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	6039      	str	r1, [r7, #0]
 8007362:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2212      	movs	r2, #18
 8007368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800736a:	4b03      	ldr	r3, [pc, #12]	; (8007378 <USBD_FS_DeviceDescriptor+0x20>)
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	2000016c 	.word	0x2000016c

0800737c <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2204      	movs	r2, #4
 800738c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800738e:	4b03      	ldr	r3, [pc, #12]	; (800739c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	20000180 	.word	0x20000180

080073a0 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4907      	ldr	r1, [pc, #28]	; (80073d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80073b6:	4808      	ldr	r0, [pc, #32]	; (80073d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80073b8:	f7fd fdae 	bl	8004f18 <USBD_GetString>
 80073bc:	e004      	b.n	80073c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4904      	ldr	r1, [pc, #16]	; (80073d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80073c2:	4805      	ldr	r0, [pc, #20]	; (80073d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80073c4:	f7fd fda8 	bl	8004f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073c8:	4b02      	ldr	r3, [pc, #8]	; (80073d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20001b4c 	.word	0x20001b4c
 80073d8:	080075d0 	.word	0x080075d0

080073dc <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	4904      	ldr	r1, [pc, #16]	; (80073fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073ec:	4804      	ldr	r0, [pc, #16]	; (8007400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073ee:	f7fd fd93 	bl	8004f18 <USBD_GetString>
  return USBD_StrDesc;
 80073f2:	4b02      	ldr	r3, [pc, #8]	; (80073fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20001b4c 	.word	0x20001b4c
 8007400:	080075e8 	.word	0x080075e8

08007404 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	6039      	str	r1, [r7, #0]
 800740e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d105      	bne.n	8007422 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	4907      	ldr	r1, [pc, #28]	; (8007438 <USBD_FS_SerialStrDescriptor+0x34>)
 800741a:	4808      	ldr	r0, [pc, #32]	; (800743c <USBD_FS_SerialStrDescriptor+0x38>)
 800741c:	f7fd fd7c 	bl	8004f18 <USBD_GetString>
 8007420:	e004      	b.n	800742c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4904      	ldr	r1, [pc, #16]	; (8007438 <USBD_FS_SerialStrDescriptor+0x34>)
 8007426:	4805      	ldr	r0, [pc, #20]	; (800743c <USBD_FS_SerialStrDescriptor+0x38>)
 8007428:	f7fd fd76 	bl	8004f18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20001b4c 	.word	0x20001b4c
 800743c:	080075fc 	.word	0x080075fc

08007440 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800744c:	79fb      	ldrb	r3, [r7, #7]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	4907      	ldr	r1, [pc, #28]	; (8007474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007456:	4808      	ldr	r0, [pc, #32]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007458:	f7fd fd5e 	bl	8004f18 <USBD_GetString>
 800745c:	e004      	b.n	8007468 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4904      	ldr	r1, [pc, #16]	; (8007474 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007462:	4805      	ldr	r0, [pc, #20]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007464:	f7fd fd58 	bl	8004f18 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8007468:	4b02      	ldr	r3, [pc, #8]	; (8007474 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20001b4c 	.word	0x20001b4c
 8007478:	0800760c 	.word	0x0800760c

0800747c <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4907      	ldr	r1, [pc, #28]	; (80074b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007492:	4808      	ldr	r0, [pc, #32]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007494:	f7fd fd40 	bl	8004f18 <USBD_GetString>
 8007498:	e004      	b.n	80074a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4904      	ldr	r1, [pc, #16]	; (80074b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800749e:	4805      	ldr	r0, [pc, #20]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074a0:	f7fd fd3a 	bl	8004f18 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80074a4:	4b02      	ldr	r3, [pc, #8]	; (80074b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20001b4c 	.word	0x20001b4c
 80074b4:	08007618 	.word	0x08007618

080074b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80074b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80074ba:	e003      	b.n	80074c4 <LoopCopyDataInit>

080074bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80074be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80074c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80074c2:	3104      	adds	r1, #4

080074c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80074c4:	480a      	ldr	r0, [pc, #40]	; (80074f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80074c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80074ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80074cc:	d3f6      	bcc.n	80074bc <CopyDataInit>
  ldr r2, =_sbss
 80074ce:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80074d0:	e002      	b.n	80074d8 <LoopFillZerobss>

080074d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80074d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80074d4:	f842 3b04 	str.w	r3, [r2], #4

080074d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80074d8:	4b08      	ldr	r3, [pc, #32]	; (80074fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80074da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80074dc:	d3f9      	bcc.n	80074d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074de:	f7ff fb25 	bl	8006b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074e2:	f000 f80f 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074e6:	f7fe fcf1 	bl	8005ecc <main>
  bx lr
 80074ea:	4770      	bx	lr
  ldr r3, =_sidata
 80074ec:	080076fc 	.word	0x080076fc
  ldr r0, =_sdata
 80074f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80074f4:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 80074f8:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 80074fc:	20001d4c 	.word	0x20001d4c

08007500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007500:	e7fe      	b.n	8007500 <ADC1_2_IRQHandler>
	...

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	2500      	movs	r5, #0
 8007508:	4e0c      	ldr	r6, [pc, #48]	; (800753c <__libc_init_array+0x38>)
 800750a:	4c0d      	ldr	r4, [pc, #52]	; (8007540 <__libc_init_array+0x3c>)
 800750c:	1ba4      	subs	r4, r4, r6
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	42a5      	cmp	r5, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	f000 f834 	bl	8007580 <_init>
 8007518:	2500      	movs	r5, #0
 800751a:	4e0a      	ldr	r6, [pc, #40]	; (8007544 <__libc_init_array+0x40>)
 800751c:	4c0a      	ldr	r4, [pc, #40]	; (8007548 <__libc_init_array+0x44>)
 800751e:	1ba4      	subs	r4, r4, r6
 8007520:	10a4      	asrs	r4, r4, #2
 8007522:	42a5      	cmp	r5, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800752c:	4798      	blx	r3
 800752e:	3501      	adds	r5, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007536:	4798      	blx	r3
 8007538:	3501      	adds	r5, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	080076f4 	.word	0x080076f4
 8007540:	080076f4 	.word	0x080076f4
 8007544:	080076f4 	.word	0x080076f4
 8007548:	080076f8 	.word	0x080076f8

0800754c <memcmp>:
 800754c:	b510      	push	{r4, lr}
 800754e:	3901      	subs	r1, #1
 8007550:	4402      	add	r2, r0
 8007552:	4290      	cmp	r0, r2
 8007554:	d101      	bne.n	800755a <memcmp+0xe>
 8007556:	2000      	movs	r0, #0
 8007558:	bd10      	pop	{r4, pc}
 800755a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800755e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007562:	42a3      	cmp	r3, r4
 8007564:	d0f5      	beq.n	8007552 <memcmp+0x6>
 8007566:	1b18      	subs	r0, r3, r4
 8007568:	bd10      	pop	{r4, pc}

0800756a <memcpy>:
 800756a:	b510      	push	{r4, lr}
 800756c:	1e43      	subs	r3, r0, #1
 800756e:	440a      	add	r2, r1
 8007570:	4291      	cmp	r1, r2
 8007572:	d100      	bne.n	8007576 <memcpy+0xc>
 8007574:	bd10      	pop	{r4, pc}
 8007576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800757e:	e7f7      	b.n	8007570 <memcpy+0x6>

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
